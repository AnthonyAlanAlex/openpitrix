consumes:
  - application/json
  - application/yaml
produces:
  - application/json
  - application/yaml
schemes:
  - http
  - https
swagger: '2.0'
info:
  description: >-
    An open platform to package and deploy applications into multiple
    environment such as QingCloud, AWS, Kubernetes etc.
  title: AppHub
  version: 0.1.0
paths:
  /apps:
    get:
      summary: Gets some apps
      description: Returns a list containing all apps.
      parameters:
        - $ref: '#/parameters/pageSize'
        - $ref: '#/parameters/pageNumber'
      tags:
        - app
      responses:
        '200':
          description: A list of apps
          schema:
            allOf:
              - $ref: '#/definitions/Apps'
              - $ref: '#/definitions/Paging'
        '500':
          $ref: '#/responses/Standard500ErrorResponse'
    post:
      summary: Creates an app
      description: Adds a new app to the runtimes list.
      parameters:
        - name: app
          in: body
          description: The app to create.
          schema:
            $ref: '#/definitions/App'
      tags:
        - app
      responses:
        '204':
          description: App succesfully created.
        '400':
          description: App couldn't have been created.
        '500':
          $ref: '#/responses/Standard500ErrorResponse'
  '/apps/{appId}':
    get:
      summary: Gets a app
      description: Returns a single app by its id
      parameters:
        - $ref: '#/parameters/appId'
      tags:
        - app
      responses:
        '200':
          description: An app
          schema:
            $ref: '#/definitions/App'
        '404':
          $ref: '#/responses/AppDoesNotExistResponse'
        '500':
          $ref: '#/responses/Standard500ErrorResponse'
    delete:
      summary: Deletes an app
      description: Delete a single app identified via its id
      parameters:
        - $ref: '#/parameters/appId'
      tags:
        - app
      responses:
        '204':
          description: App successfully deleted.
        '404':
          $ref: '#/responses/AppDoesNotExistResponse'
        '500':
          $ref: '#/responses/Standard500ErrorResponse'
  /clusters:
    get:
      summary: Gets some clusters
      description: Returns a list containing all clusters.
      parameters:
        - $ref: '#/parameters/pageSize'
        - $ref: '#/parameters/pageNumber'
      tags:
        - cluster
      responses:
        '200':
          description: A list of Cluster
          schema:
            allOf:
              - $ref: '#/definitions/Clusters'
              - $ref: '#/definitions/Paging'
        '500':
          $ref: '#/responses/Standard500ErrorResponse'
    post:
      summary: Creates a cluster
      description: Adds a new cluster to the clusters list.
      parameters:
        - name: cluster
          in: body
          description: The cluster to create.
          schema:
            $ref: '#/definitions/Cluster'
      tags:
        - cluster
      responses:
        '204':
          description: Cluster succesfully created.
        '400':
          description: Cluster couldn't have been created.
        '500':
          $ref: '#/responses/Standard500ErrorResponse'
  '/clusters/{clusterId}':
    get:
      summary: Gets a cluster
      description: Returns a single cluster by its id
      parameters:
        - $ref: '#/parameters/clusterId'
      tags:
        - cluster
      responses:
        '200':
          description: A Cluster
          schema:
            $ref: '#/definitions/Cluster'
        '404':
          $ref: '#/responses/ClusterDoesNotExistResponse'
        '500':
          $ref: '#/responses/Standard500ErrorResponse'
    delete:
      summary: Deletes a cluster
      description: Delete a single cluster identified via its id
      parameters:
        - $ref: '#/parameters/clusterId'
      tags:
        - cluster
      responses:
        '204':
          description: Cluster successfully deleted.
        '404':
          $ref: '#/responses/ClusterDoesNotExistResponse'
        '500':
          $ref: '#/responses/Standard500ErrorResponse'
  /repos:
    get:
      summary: Gets some repos
      description: Returns a list containing all repos.
      parameters:
        - $ref: '#/parameters/pageSize'
        - $ref: '#/parameters/pageNumber'
      tags:
        - repo
      responses:
        '200':
          description: A list of repos
          schema:
            allOf:
              - $ref: '#/definitions/Repos'
              - $ref: '#/definitions/Paging'
        '500':
          $ref: '#/responses/Standard500ErrorResponse'
    post:
      summary: Creates a repo
      description: Adds a new repo to the repos list.
      parameters:
        - name: repo
          in: body
          description: The repo to create.
          schema:
            $ref: '#/definitions/Repo'
      tags:
        - repo
      responses:
        '204':
          description: Repo succesfully created.
        '400':
          description: Repo couldn't have been created.
        '500':
          $ref: '#/responses/Standard500ErrorResponse'
  '/repos/{repoId}':
    get:
      summary: Gets a repo
      description: Returns a single repo by its id
      parameters:
        - $ref: '#/parameters/repoId'
      tags:
        - repo
      responses:
        '200':
          description: A repo
          schema:
            $ref: '#/definitions/Repo'
        '404':
          $ref: '#/responses/RepoDoesNotExistResponse'
        '500':
          $ref: '#/responses/Standard500ErrorResponse'
    delete:
      summary: Deletes a repo
      description: Delete a single repo identified via its id
      parameters:
        - $ref: '#/parameters/repoId'
      tags:
        - repo
      responses:
        '204':
          description: Repo successfully deleted.
        '404':
          $ref: '#/responses/RepoDoesNotExistResponse'
        '500':
          $ref: '#/responses/Standard500ErrorResponse'
  /runtimes:
    get:
      summary: Gets some runtimes
      description: Returns a list containing all runtimes.
      parameters:
        - $ref: '#/parameters/pageSize'
        - $ref: '#/parameters/pageNumber'
      tags:
        - runtime
      responses:
        '200':
          description: A list of runtimes
          schema:
            allOf:
              - $ref: '#/definitions/Runtimes'
              - $ref: '#/definitions/Paging'
        '500':
          $ref: '#/responses/Standard500ErrorResponse'
    post:
      summary: Creates a runtime
      description: Adds a new runtime to the runtimes list.
      parameters:
        - name: runtime
          in: body
          description: The runtime to create.
          schema:
            $ref: '#/definitions/Runtime'
      tags:
        - runtime
      responses:
        '204':
          description: Runtime succesfully created.
        '400':
          description: Runtime couldn't have been created.
        '500':
          $ref: '#/responses/Standard500ErrorResponse'
  '/runtimes/{runtimeId}':
    get:
      summary: Gets a runtime
      description: Returns a single runtime by its id
      parameters:
        - $ref: '#/parameters/runtimeId'
      tags:
        - runtime
      responses:
        '200':
          description: A runtime
          schema:
            $ref: '#/definitions/Runtime'
        '404':
          $ref: '#/responses/RuntimeDoesNotExistResponse'
        '500':
          $ref: '#/responses/Standard500ErrorResponse'
    delete:
      summary: Deletes a runtime
      description: Delete a single runtime identified via its id
      parameters:
        - $ref: '#/parameters/runtimeId'
      tags:
        - runtime
      responses:
        '204':
          description: Runtime successfully deleted.
        '404':
          $ref: '#/responses/RuntimeDoesNotExistResponse'
        '500':
          $ref: '#/responses/Standard500ErrorResponse'
definitions:
  App:
    required:
      - appId
    properties:
      name:
        type: string
      description:
        type: string
      url:
        type: string
      appId:
        type: string
        pattern: 'app-[a-zA-Z0-9]{11}'
        minLength: 12
        maxLength: 12
      createTime:
        type: string
        format: date-time
        readOnly: true
        example: 2017-09-17T12:36:58.014Z
  Apps:
    properties:
      items:
        type: array
        uniqueItems: true
        items:
          $ref: '#/definitions/App'
  Cluster:
    required:
      - clusterId
    properties:
      name:
        type: string
      description:
        type: string
      clusterId:
        type: string
        pattern: 'cl-[a-zA-Z0-9]{11}'
        minLength: 11
        maxLength: 11
      createTime:
        type: string
        format: date-time
        readOnly: true
        example: 2017-09-17T12:36:58.014Z
  Clusters:
    properties:
      items:
        type: array
        uniqueItems: true
        items:
          $ref: '#/definitions/Cluster'
  Repo:
    required:
      - repoId
    properties:
      name:
        type: string
      description:
        type: string
      url:
        type: string
      repoId:
        type: string
        pattern: 'repo-[a-zA-Z0-9]{11}'
        minLength: 13
        maxLength: 13
      createTime:
        type: string
        format: date-time
        readOnly: true
        example: 2017-09-17T12:36:58.014Z
  Repos:
    properties:
      items:
        type: array
        uniqueItems: true
        items:
          $ref: '#/definitions/Repo'
  Runtime:
    required:
      - runtimeId
    properties:
      name:
        type: string
      description:
        type: string
      url:
        type: string
      runtimeId:
        type: string
        pattern: 'rt-[a-zA-Z0-9]{11}'
        minLength: 11
        maxLength: 11
      createTime:
        type: string
        format: date-time
        readOnly: true
        example: 2017-09-17T12:36:58.014Z
  Runtimes:
    properties:
      items:
        type: array
        uniqueItems: true
        items:
          $ref: '#/definitions/Runtime'
  Paging:
    properties:
      totalItems:
        type: integer
      totalPages:
        type: integer
      pageSize:
        type: integer
      currentPage:
        type: integer
  Error:
    properties:
      code:
        type: string
        enum:
          - DBERR
          - NTERR
          - UNERR
      message:
        type: string
responses:
  Standard500ErrorResponse:
    description: An unexpected error occured.
    schema:
      $ref: '#/definitions/Error'
  ClusterDoesNotExistResponse:
    description: The cluster does not exist.
  RepoDoesNotExistResponse:
    description: The repo does not exist.
  RuntimeDoesNotExistResponse:
    description: The runtime does not exist.
  AppDoesNotExistResponse:
    description: The app does not exist.
parameters:
  pageSize:
    name: pageSize
    in: query
    description: Number of clusters returned
    type: integer
    format: int32
    minimum: 0
    exclusiveMinimum: true
    exclusiveMaximum: false
    multipleOf: 10
    default: 20
  pageNumber:
    name: pageNumber
    in: query
    description: Page number
    type: integer
    default: 1
  appId:
    name: appId
    in: path
    required: true
    description: The app's id
    type: string
  clusterId:
    name: clusterId
    in: path
    required: true
    description: The cluster's id
    type: string
  repoId:
    name: repoId
    in: path
    required: true
    description: The repo's id
    type: string
  runtimeId:
    name: runtimeId
    in: path
    required: true
    description: The runtime's id
    type: string
