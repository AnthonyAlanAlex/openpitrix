// Copyright 2018 The OpenPitrix Authors. All rights reserved.
// Use of this source code is governed by a Apache license
// that can be found in the LICENSE file.

// Auto generated by 'go run gen_helper.go', DO NOT EDIT.

package models

import (
	"context"

	"openpitrix.io/openpitrix/pkg/constants"
	"openpitrix.io/openpitrix/pkg/db"
	"openpitrix.io/openpitrix/pkg/gerr"
	"openpitrix.io/openpitrix/pkg/pi"
	"openpitrix.io/openpitrix/pkg/util/senderutil"
)

func CheckRepoPermission(ctx context.Context, resourceId ...string) error {
	if len(resourceId) == 0 {
		return nil
	}
	var sender = senderutil.GetSenderFromContext(ctx)
	var repos []*Repo
	_, err := pi.Global().DB(ctx).
		Select(constants.ColumnRepoId, constants.ColumnOwner).
		From(constants.TableRepo).
		Where(db.Eq(constants.ColumnRepoId, resourceId)).Load(&repos)
	if err != nil {
		return gerr.NewWithDetail(ctx, gerr.Internal, err, gerr.ErrorInternalError)
	}
	if sender != nil && !sender.IsGlobalAdmin() {
		for _, repo := range repos {
			if repo.Owner != sender.UserId {
				return gerr.New(ctx, gerr.PermissionDenied, gerr.ErrorResourceAccessDenied, repo.RepoId)
			}
		}
	}
	return nil
}

func CheckAppPermission(ctx context.Context, resourceId ...string) error {
	if len(resourceId) == 0 {
		return nil
	}
	var sender = senderutil.GetSenderFromContext(ctx)
	var apps []*App
	_, err := pi.Global().DB(ctx).
		Select(constants.ColumnAppId, constants.ColumnOwner).
		From(constants.TableApp).
		Where(db.Eq(constants.ColumnAppId, resourceId)).Load(&apps)
	if err != nil {
		return gerr.NewWithDetail(ctx, gerr.Internal, err, gerr.ErrorInternalError)
	}
	if sender != nil && !sender.IsGlobalAdmin() {
		for _, app := range apps {
			if app.Owner != sender.UserId {
				return gerr.New(ctx, gerr.PermissionDenied, gerr.ErrorResourceAccessDenied, app.AppId)
			}
		}
	}
	return nil
}

func CheckAppVersionPermission(ctx context.Context, resourceId ...string) error {
	if len(resourceId) == 0 {
		return nil
	}
	var sender = senderutil.GetSenderFromContext(ctx)
	var appversions []*AppVersion
	_, err := pi.Global().DB(ctx).
		Select(constants.ColumnVersionId, constants.ColumnOwner).
		From(constants.TableAppVersion).
		Where(db.Eq(constants.ColumnVersionId, resourceId)).Load(&appversions)
	if err != nil {
		return gerr.NewWithDetail(ctx, gerr.Internal, err, gerr.ErrorInternalError)
	}
	if sender != nil && !sender.IsGlobalAdmin() {
		for _, appversion := range appversions {
			if appversion.Owner != sender.UserId {
				return gerr.New(ctx, gerr.PermissionDenied, gerr.ErrorResourceAccessDenied, appversion.VersionId)
			}
		}
	}
	return nil
}

func CheckJobPermission(ctx context.Context, resourceId ...string) error {
	if len(resourceId) == 0 {
		return nil
	}
	var sender = senderutil.GetSenderFromContext(ctx)
	var jobs []*Job
	_, err := pi.Global().DB(ctx).
		Select(constants.ColumnJobId, constants.ColumnOwner).
		From(constants.TableJob).
		Where(db.Eq(constants.ColumnJobId, resourceId)).Load(&jobs)
	if err != nil {
		return gerr.NewWithDetail(ctx, gerr.Internal, err, gerr.ErrorInternalError)
	}
	if sender != nil && !sender.IsGlobalAdmin() {
		for _, job := range jobs {
			if job.Owner != sender.UserId {
				return gerr.New(ctx, gerr.PermissionDenied, gerr.ErrorResourceAccessDenied, job.JobId)
			}
		}
	}
	return nil
}

func CheckTaskPermission(ctx context.Context, resourceId ...string) error {
	if len(resourceId) == 0 {
		return nil
	}
	var sender = senderutil.GetSenderFromContext(ctx)
	var tasks []*Task
	_, err := pi.Global().DB(ctx).
		Select(constants.ColumnTaskId, constants.ColumnOwner).
		From(constants.TableTask).
		Where(db.Eq(constants.ColumnTaskId, resourceId)).Load(&tasks)
	if err != nil {
		return gerr.NewWithDetail(ctx, gerr.Internal, err, gerr.ErrorInternalError)
	}
	if sender != nil && !sender.IsGlobalAdmin() {
		for _, task := range tasks {
			if task.Owner != sender.UserId {
				return gerr.New(ctx, gerr.PermissionDenied, gerr.ErrorResourceAccessDenied, task.TaskId)
			}
		}
	}
	return nil
}

func CheckRepoEventPermission(ctx context.Context, resourceId ...string) error {
	if len(resourceId) == 0 {
		return nil
	}
	var sender = senderutil.GetSenderFromContext(ctx)
	var repoevents []*RepoEvent
	_, err := pi.Global().DB(ctx).
		Select(constants.ColumnRepoEventId, constants.ColumnOwner).
		From(constants.TableRepoEvent).
		Where(db.Eq(constants.ColumnRepoEventId, resourceId)).Load(&repoevents)
	if err != nil {
		return gerr.NewWithDetail(ctx, gerr.Internal, err, gerr.ErrorInternalError)
	}
	if sender != nil && !sender.IsGlobalAdmin() {
		for _, repoevent := range repoevents {
			if repoevent.Owner != sender.UserId {
				return gerr.New(ctx, gerr.PermissionDenied, gerr.ErrorResourceAccessDenied, repoevent.RepoEventId)
			}
		}
	}
	return nil
}

func CheckRuntimePermission(ctx context.Context, resourceId ...string) error {
	if len(resourceId) == 0 {
		return nil
	}
	var sender = senderutil.GetSenderFromContext(ctx)
	var runtimes []*Runtime
	_, err := pi.Global().DB(ctx).
		Select(constants.ColumnRuntimeId, constants.ColumnOwner).
		From(constants.TableRuntime).
		Where(db.Eq(constants.ColumnRuntimeId, resourceId)).Load(&runtimes)
	if err != nil {
		return gerr.NewWithDetail(ctx, gerr.Internal, err, gerr.ErrorInternalError)
	}
	if sender != nil && !sender.IsGlobalAdmin() {
		for _, runtime := range runtimes {
			if runtime.Owner != sender.UserId {
				return gerr.New(ctx, gerr.PermissionDenied, gerr.ErrorResourceAccessDenied, runtime.RuntimeId)
			}
		}
	}
	return nil
}
