// Copyright 2018 The OpenPitrix Authors. All rights reserved.
// Use of this source code is governed by a Apache license
// that can be found in the LICENSE file.

//go:generate go run gen_helper.go
//go:generate go fmt

// +build ignore

package main

import (
	"html/template"
	"log"
	"os"
	"strings"

	"openpitrix.io/openpitrix/pkg/util/stringutil"
)

var syncTemplate = template.Must(template.New("").Funcs(template.FuncMap{
	"snakeCase":  stringutil.CamelCaseToUnderscore,
	"pascalCase": stringutil.UnderscoreToCamelCase,
	"escape": func(s string) string {
		return strings.Replace(s, "_", "", -1)
	},
	"columnId": func(table string) string {
		if table == "app_version" {
			return "version"
		}
		if table == "cluster_node" {
			return "node"
		}
		return table
	},
}).Parse(`
func Check{{pascalCase .}}Permission(ctx context.Context, resourceId ...string) error {
	if len(resourceId) == 0 {
		return nil
	}
	var sender = senderutil.GetSenderFromContext(ctx)
	var {{escape .}}s []*{{pascalCase .}}
	_, err := pi.Global().DB(ctx).
		Select(constants.Column{{columnId . | pascalCase}}Id, constants.ColumnOwner).
		From(constants.Table{{pascalCase .}}).
		Where(db.Eq(constants.Column{{columnId . | pascalCase}}Id, resourceId)).Load(&{{escape .}}s)
	if err != nil {
		return gerr.NewWithDetail(ctx, gerr.Internal, err, gerr.ErrorInternalError)
	}
	if sender != nil && !sender.IsGlobalAdmin() {
		for _, {{escape .}} := range {{escape .}}s {
			if {{escape .}}.Owner != sender.UserId {
				return gerr.New(ctx, gerr.PermissionDenied, gerr.ErrorResourceAccessDenied, {{escape .}}.{{columnId . | pascalCase}}Id)
			}
		}
	}
	return nil
}
`))

type Model struct {
	Name string
	Key  string
}

func main() {
	f, err := os.Create("resource_permission.go")
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	f.Write([]byte(`// Copyright 2018 The OpenPitrix Authors. All rights reserved.
// Use of this source code is governed by a Apache license
// that can be found in the LICENSE file.

// Auto generated by 'go run gen_helper.go', DO NOT EDIT.

package models

import (
	"context"

	"openpitrix.io/openpitrix/pkg/constants"
	"openpitrix.io/openpitrix/pkg/db"
	"openpitrix.io/openpitrix/pkg/gerr"
	"openpitrix.io/openpitrix/pkg/pi"
	"openpitrix.io/openpitrix/pkg/util/senderutil"
)
`))

	var models = []string{
		"repo", "app", "app_version", "cluster", "cluster_node",
		"job", "task", "repo_event", "runtime",
	}

	for _, m := range models {
		syncTemplate.Execute(f, m)
	}
}
