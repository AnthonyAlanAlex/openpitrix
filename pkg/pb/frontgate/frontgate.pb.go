// Code generated by protoc-gen-go. DO NOT EDIT.
// source: openpitrix/frontgate/frontgate.proto

/*
Package pbfrontgate is a generated protocol buffer package.

It is generated from these files:
	openpitrix/frontgate/frontgate.proto

It has these top-level messages:
	Config
*/
package pbfrontgate

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import openpitrix_types "openpitrix.io/openpitrix/pkg/pb/types"
import openpitrix_types1 "openpitrix.io/openpitrix/pkg/pb/types"
import openpitrix_types2 "openpitrix.io/openpitrix/pkg/pb/types"
import openpitrix_types3 "openpitrix.io/openpitrix/pkg/pb/types"
import openpitrix_types4 "openpitrix.io/openpitrix/pkg/pb/types"
import openpitrix_types5 "openpitrix.io/openpitrix/pkg/pb/types"
import openpitrix_types6 "openpitrix.io/openpitrix/pkg/pb/types"

import "io"
import "log"
import "net"
import "net/rpc"
import "time"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Config struct {
	Id          string                               `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	ListenPort  int32                                `protobuf:"varint,2,opt,name=listen_port,json=listenPort" json:"listen_port,omitempty"`
	PilotHost   string                               `protobuf:"bytes,3,opt,name=pilot_host,json=pilotHost" json:"pilot_host,omitempty"`
	PilotPort   int32                                `protobuf:"varint,4,opt,name=pilot_port,json=pilotPort" json:"pilot_port,omitempty"`
	NodeList    *openpitrix_types4.FrontgateEndpoint `protobuf:"bytes,5,opt,name=node_list,json=nodeList" json:"node_list,omitempty"`
	EtcdConfig  *openpitrix_types1.EtcdConfig        `protobuf:"bytes,6,opt,name=etcd_config,json=etcdConfig" json:"etcd_config,omitempty"`
	ConfdConfig *openpitrix_types2.ConfdConfig       `protobuf:"bytes,7,opt,name=confd_config,json=confdConfig" json:"confd_config,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Config) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Config) GetListenPort() int32 {
	if m != nil {
		return m.ListenPort
	}
	return 0
}

func (m *Config) GetPilotHost() string {
	if m != nil {
		return m.PilotHost
	}
	return ""
}

func (m *Config) GetPilotPort() int32 {
	if m != nil {
		return m.PilotPort
	}
	return 0
}

func (m *Config) GetNodeList() *openpitrix_types4.FrontgateEndpoint {
	if m != nil {
		return m.NodeList
	}
	return nil
}

func (m *Config) GetEtcdConfig() *openpitrix_types1.EtcdConfig {
	if m != nil {
		return m.EtcdConfig
	}
	return nil
}

func (m *Config) GetConfdConfig() *openpitrix_types2.ConfdConfig {
	if m != nil {
		return m.ConfdConfig
	}
	return nil
}

func init() {
	proto.RegisterType((*Config)(nil), "openpitrix.frontgate.Config")
}

type FrontgateService interface {
	GetPilotConfig(in *openpitrix_types.Empty, out *openpitrix_types5.PilotConfig) error
	GetFrontgateConfig(in *openpitrix_types.Empty, out *openpitrix_types4.FrontgateConfig) error
	GetDroneList(in *openpitrix_types.Empty, out *openpitrix_types3.DroneIdList) error
	GetDroneConfig(in *openpitrix_types3.DroneEndpoint, out *openpitrix_types3.DroneConfig) error
	IsConfdRunning(in *openpitrix_types2.ConfdEndpoint, out *openpitrix_types.Bool) error
	StartConfd(in *openpitrix_types2.ConfdEndpoint, out *openpitrix_types.Empty) error
	StopConfd(in *openpitrix_types2.ConfdEndpoint, out *openpitrix_types.Empty) error
	RegisterMetadata(in *openpitrix_types6.SubTask_RegisterMetadata, out *openpitrix_types.Empty) error
	DeregisterMetadata(in *openpitrix_types6.SubTask_DeregisterMetadata, out *openpitrix_types.Empty) error
	RegisterCmd(in *openpitrix_types6.SubTask_RegisterCmd, out *openpitrix_types.Empty) error
	DeregisterCmd(in *openpitrix_types6.SubTask_DeregisterCmd, out *openpitrix_types.Empty) error
	ReportSubTaskStatus(in *openpitrix_types6.SubTaskStatus, out *openpitrix_types.Empty) error
	GetEtcdValuesByPrefix(in *openpitrix_types.String, out *openpitrix_types.StringMap) error
	GetEtcdValues(in *openpitrix_types.StringList, out *openpitrix_types.StringMap) error
	SetEtcdValues(in *openpitrix_types.StringMap, out *openpitrix_types.Empty) error
	PingPilot(in *openpitrix_types.Empty, out *openpitrix_types.Empty) error
	PingFrontgate(in *openpitrix_types.Empty, out *openpitrix_types.Empty) error
	PingDrone(in *openpitrix_types3.DroneEndpoint, out *openpitrix_types.Empty) error
	HeartBeat(in *openpitrix_types.Empty, out *openpitrix_types.Empty) error
}

// AcceptFrontgateServiceClient accepts connections on the listener and serves requests
// for each incoming connection.  Accept blocks; the caller typically
// invokes it in a go statement.
func AcceptFrontgateServiceClient(lis net.Listener, x FrontgateService) {
	srv := rpc.NewServer()
	if err := srv.RegisterName("openpitrix.frontgate.FrontgateService", x); err != nil {
		log.Fatal(err)
	}

	for {
		conn, err := lis.Accept()
		if err != nil {
			log.Fatalf("lis.Accept(): %v\n", err)
		}
		go srv.ServeConn(conn)
	}
}

// RegisterFrontgateService publish the given FrontgateService implementation on the server.
func RegisterFrontgateService(srv *rpc.Server, x FrontgateService) error {
	if err := srv.RegisterName("openpitrix.frontgate.FrontgateService", x); err != nil {
		return err
	}
	return nil
}

// NewFrontgateServiceServer returns a new FrontgateService Server.
func NewFrontgateServiceServer(x FrontgateService) *rpc.Server {
	srv := rpc.NewServer()
	if err := srv.RegisterName("openpitrix.frontgate.FrontgateService", x); err != nil {
		log.Fatal(err)
	}
	return srv
}

// ListenAndServeFrontgateService listen announces on the local network address laddr
// and serves the given FrontgateService implementation.
func ListenAndServeFrontgateService(network, addr string, x FrontgateService) error {
	lis, err := net.Listen(network, addr)
	if err != nil {
		return err
	}
	defer lis.Close()

	srv := rpc.NewServer()
	if err := srv.RegisterName("openpitrix.frontgate.FrontgateService", x); err != nil {
		return err
	}

	for {
		conn, err := lis.Accept()
		if err != nil {
			log.Fatalf("lis.Accept(): %v\n", err)
		}
		go srv.ServeConn(conn)
	}
}

// ServeFrontgateService serves the given FrontgateService implementation.
func ServeFrontgateService(conn io.ReadWriteCloser, x FrontgateService) {
	srv := rpc.NewServer()
	if err := srv.RegisterName("openpitrix.frontgate.FrontgateService", x); err != nil {
		log.Fatal(err)
	}
	srv.ServeConn(conn)
}

type FrontgateServiceClient struct {
	*rpc.Client
}

// NewFrontgateServiceClient returns a FrontgateService stub to handle
// requests to the set of FrontgateService at the other end of the connection.
func NewFrontgateServiceClient(conn io.ReadWriteCloser) *FrontgateServiceClient {
	c := rpc.NewClient(conn)
	return &FrontgateServiceClient{c}
}

func (c *FrontgateServiceClient) GetPilotConfig(in *openpitrix_types.Empty) (out *openpitrix_types5.PilotConfig, err error) {
	if in == nil {
		in = new(openpitrix_types.Empty)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(openpitrix_types5.PilotConfig)
	if err = c.Call("openpitrix.frontgate.FrontgateService.GetPilotConfig", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncGetPilotConfig(in *openpitrix_types.Empty, out *openpitrix_types5.PilotConfig, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(openpitrix_types.Empty)
	}
	return c.Go(
		"openpitrix.frontgate.FrontgateService.GetPilotConfig",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) GetFrontgateConfig(in *openpitrix_types.Empty) (out *openpitrix_types4.FrontgateConfig, err error) {
	if in == nil {
		in = new(openpitrix_types.Empty)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(openpitrix_types4.FrontgateConfig)
	if err = c.Call("openpitrix.frontgate.FrontgateService.GetFrontgateConfig", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncGetFrontgateConfig(in *openpitrix_types.Empty, out *openpitrix_types4.FrontgateConfig, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(openpitrix_types.Empty)
	}
	return c.Go(
		"openpitrix.frontgate.FrontgateService.GetFrontgateConfig",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) GetDroneList(in *openpitrix_types.Empty) (out *openpitrix_types3.DroneIdList, err error) {
	if in == nil {
		in = new(openpitrix_types.Empty)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(openpitrix_types3.DroneIdList)
	if err = c.Call("openpitrix.frontgate.FrontgateService.GetDroneList", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncGetDroneList(in *openpitrix_types.Empty, out *openpitrix_types3.DroneIdList, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(openpitrix_types.Empty)
	}
	return c.Go(
		"openpitrix.frontgate.FrontgateService.GetDroneList",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) GetDroneConfig(in *openpitrix_types3.DroneEndpoint) (out *openpitrix_types3.DroneConfig, err error) {
	if in == nil {
		in = new(openpitrix_types3.DroneEndpoint)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(openpitrix_types3.DroneConfig)
	if err = c.Call("openpitrix.frontgate.FrontgateService.GetDroneConfig", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncGetDroneConfig(in *openpitrix_types3.DroneEndpoint, out *openpitrix_types3.DroneConfig, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(openpitrix_types3.DroneEndpoint)
	}
	return c.Go(
		"openpitrix.frontgate.FrontgateService.GetDroneConfig",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) IsConfdRunning(in *openpitrix_types2.ConfdEndpoint) (out *openpitrix_types.Bool, err error) {
	if in == nil {
		in = new(openpitrix_types2.ConfdEndpoint)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(openpitrix_types.Bool)
	if err = c.Call("openpitrix.frontgate.FrontgateService.IsConfdRunning", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncIsConfdRunning(in *openpitrix_types2.ConfdEndpoint, out *openpitrix_types.Bool, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(openpitrix_types2.ConfdEndpoint)
	}
	return c.Go(
		"openpitrix.frontgate.FrontgateService.IsConfdRunning",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) StartConfd(in *openpitrix_types2.ConfdEndpoint) (out *openpitrix_types.Empty, err error) {
	if in == nil {
		in = new(openpitrix_types2.ConfdEndpoint)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(openpitrix_types.Empty)
	if err = c.Call("openpitrix.frontgate.FrontgateService.StartConfd", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncStartConfd(in *openpitrix_types2.ConfdEndpoint, out *openpitrix_types.Empty, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(openpitrix_types2.ConfdEndpoint)
	}
	return c.Go(
		"openpitrix.frontgate.FrontgateService.StartConfd",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) StopConfd(in *openpitrix_types2.ConfdEndpoint) (out *openpitrix_types.Empty, err error) {
	if in == nil {
		in = new(openpitrix_types2.ConfdEndpoint)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(openpitrix_types.Empty)
	if err = c.Call("openpitrix.frontgate.FrontgateService.StopConfd", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncStopConfd(in *openpitrix_types2.ConfdEndpoint, out *openpitrix_types.Empty, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(openpitrix_types2.ConfdEndpoint)
	}
	return c.Go(
		"openpitrix.frontgate.FrontgateService.StopConfd",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) RegisterMetadata(in *openpitrix_types6.SubTask_RegisterMetadata) (out *openpitrix_types.Empty, err error) {
	if in == nil {
		in = new(openpitrix_types6.SubTask_RegisterMetadata)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(openpitrix_types.Empty)
	if err = c.Call("openpitrix.frontgate.FrontgateService.RegisterMetadata", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncRegisterMetadata(in *openpitrix_types6.SubTask_RegisterMetadata, out *openpitrix_types.Empty, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(openpitrix_types6.SubTask_RegisterMetadata)
	}
	return c.Go(
		"openpitrix.frontgate.FrontgateService.RegisterMetadata",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) DeregisterMetadata(in *openpitrix_types6.SubTask_DeregisterMetadata) (out *openpitrix_types.Empty, err error) {
	if in == nil {
		in = new(openpitrix_types6.SubTask_DeregisterMetadata)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(openpitrix_types.Empty)
	if err = c.Call("openpitrix.frontgate.FrontgateService.DeregisterMetadata", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncDeregisterMetadata(in *openpitrix_types6.SubTask_DeregisterMetadata, out *openpitrix_types.Empty, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(openpitrix_types6.SubTask_DeregisterMetadata)
	}
	return c.Go(
		"openpitrix.frontgate.FrontgateService.DeregisterMetadata",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) RegisterCmd(in *openpitrix_types6.SubTask_RegisterCmd) (out *openpitrix_types.Empty, err error) {
	if in == nil {
		in = new(openpitrix_types6.SubTask_RegisterCmd)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(openpitrix_types.Empty)
	if err = c.Call("openpitrix.frontgate.FrontgateService.RegisterCmd", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncRegisterCmd(in *openpitrix_types6.SubTask_RegisterCmd, out *openpitrix_types.Empty, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(openpitrix_types6.SubTask_RegisterCmd)
	}
	return c.Go(
		"openpitrix.frontgate.FrontgateService.RegisterCmd",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) DeregisterCmd(in *openpitrix_types6.SubTask_DeregisterCmd) (out *openpitrix_types.Empty, err error) {
	if in == nil {
		in = new(openpitrix_types6.SubTask_DeregisterCmd)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(openpitrix_types.Empty)
	if err = c.Call("openpitrix.frontgate.FrontgateService.DeregisterCmd", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncDeregisterCmd(in *openpitrix_types6.SubTask_DeregisterCmd, out *openpitrix_types.Empty, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(openpitrix_types6.SubTask_DeregisterCmd)
	}
	return c.Go(
		"openpitrix.frontgate.FrontgateService.DeregisterCmd",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) ReportSubTaskStatus(in *openpitrix_types6.SubTaskStatus) (out *openpitrix_types.Empty, err error) {
	if in == nil {
		in = new(openpitrix_types6.SubTaskStatus)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(openpitrix_types.Empty)
	if err = c.Call("openpitrix.frontgate.FrontgateService.ReportSubTaskStatus", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncReportSubTaskStatus(in *openpitrix_types6.SubTaskStatus, out *openpitrix_types.Empty, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(openpitrix_types6.SubTaskStatus)
	}
	return c.Go(
		"openpitrix.frontgate.FrontgateService.ReportSubTaskStatus",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) GetEtcdValuesByPrefix(in *openpitrix_types.String) (out *openpitrix_types.StringMap, err error) {
	if in == nil {
		in = new(openpitrix_types.String)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(openpitrix_types.StringMap)
	if err = c.Call("openpitrix.frontgate.FrontgateService.GetEtcdValuesByPrefix", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncGetEtcdValuesByPrefix(in *openpitrix_types.String, out *openpitrix_types.StringMap, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(openpitrix_types.String)
	}
	return c.Go(
		"openpitrix.frontgate.FrontgateService.GetEtcdValuesByPrefix",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) GetEtcdValues(in *openpitrix_types.StringList) (out *openpitrix_types.StringMap, err error) {
	if in == nil {
		in = new(openpitrix_types.StringList)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(openpitrix_types.StringMap)
	if err = c.Call("openpitrix.frontgate.FrontgateService.GetEtcdValues", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncGetEtcdValues(in *openpitrix_types.StringList, out *openpitrix_types.StringMap, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(openpitrix_types.StringList)
	}
	return c.Go(
		"openpitrix.frontgate.FrontgateService.GetEtcdValues",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) SetEtcdValues(in *openpitrix_types.StringMap) (out *openpitrix_types.Empty, err error) {
	if in == nil {
		in = new(openpitrix_types.StringMap)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(openpitrix_types.Empty)
	if err = c.Call("openpitrix.frontgate.FrontgateService.SetEtcdValues", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncSetEtcdValues(in *openpitrix_types.StringMap, out *openpitrix_types.Empty, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(openpitrix_types.StringMap)
	}
	return c.Go(
		"openpitrix.frontgate.FrontgateService.SetEtcdValues",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) PingPilot(in *openpitrix_types.Empty) (out *openpitrix_types.Empty, err error) {
	if in == nil {
		in = new(openpitrix_types.Empty)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(openpitrix_types.Empty)
	if err = c.Call("openpitrix.frontgate.FrontgateService.PingPilot", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncPingPilot(in *openpitrix_types.Empty, out *openpitrix_types.Empty, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(openpitrix_types.Empty)
	}
	return c.Go(
		"openpitrix.frontgate.FrontgateService.PingPilot",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) PingFrontgate(in *openpitrix_types.Empty) (out *openpitrix_types.Empty, err error) {
	if in == nil {
		in = new(openpitrix_types.Empty)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(openpitrix_types.Empty)
	if err = c.Call("openpitrix.frontgate.FrontgateService.PingFrontgate", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncPingFrontgate(in *openpitrix_types.Empty, out *openpitrix_types.Empty, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(openpitrix_types.Empty)
	}
	return c.Go(
		"openpitrix.frontgate.FrontgateService.PingFrontgate",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) PingDrone(in *openpitrix_types3.DroneEndpoint) (out *openpitrix_types.Empty, err error) {
	if in == nil {
		in = new(openpitrix_types3.DroneEndpoint)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(openpitrix_types.Empty)
	if err = c.Call("openpitrix.frontgate.FrontgateService.PingDrone", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncPingDrone(in *openpitrix_types3.DroneEndpoint, out *openpitrix_types.Empty, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(openpitrix_types3.DroneEndpoint)
	}
	return c.Go(
		"openpitrix.frontgate.FrontgateService.PingDrone",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) HeartBeat(in *openpitrix_types.Empty) (out *openpitrix_types.Empty, err error) {
	if in == nil {
		in = new(openpitrix_types.Empty)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(openpitrix_types.Empty)
	if err = c.Call("openpitrix.frontgate.FrontgateService.HeartBeat", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncHeartBeat(in *openpitrix_types.Empty, out *openpitrix_types.Empty, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(openpitrix_types.Empty)
	}
	return c.Go(
		"openpitrix.frontgate.FrontgateService.HeartBeat",
		in, out,
		done,
	)
}

// DialFrontgateService connects to an FrontgateService at the specified network address.
func DialFrontgateService(network, addr string) (*FrontgateServiceClient, error) {
	c, err := rpc.Dial(network, addr)
	if err != nil {
		return nil, err
	}
	return &FrontgateServiceClient{c}, nil
}

// DialFrontgateServiceTimeout connects to an FrontgateService at the specified network address.
func DialFrontgateServiceTimeout(network, addr string, timeout time.Duration) (*FrontgateServiceClient, error) {
	conn, err := net.DialTimeout(network, addr, timeout)
	if err != nil {
		return nil, err
	}
	return &FrontgateServiceClient{rpc.NewClient(conn)}, nil
}

func init() { proto.RegisterFile("openpitrix/frontgate/frontgate.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 641 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x95, 0xdf, 0x4f, 0x53, 0x31,
	0x14, 0xc7, 0xb3, 0x29, 0xe8, 0xce, 0x18, 0x21, 0xf5, 0xd7, 0x32, 0x20, 0xcc, 0x5f, 0x91, 0x18,
	0x03, 0x09, 0xc6, 0xf8, 0x60, 0x48, 0x70, 0x30, 0x06, 0x46, 0x74, 0xde, 0x19, 0x4d, 0xf4, 0x61,
	0xe9, 0xd6, 0x6e, 0x36, 0x8c, 0xb6, 0xe9, 0x3d, 0x33, 0xf0, 0x8f, 0xf9, 0xe0, 0x5f, 0x67, 0xda,
	0x7b, 0x77, 0x77, 0xe1, 0xde, 0x6e, 0x8a, 0x2f, 0x4b, 0xd7, 0x73, 0xbe, 0x9f, 0x7e, 0xcf, 0xe9,
	0x6d, 0x0b, 0x4f, 0x94, 0xe6, 0x52, 0x0b, 0x34, 0xe2, 0x7c, 0x7b, 0x60, 0x94, 0xc4, 0x21, 0x45,
	0x3e, 0x1d, 0x6d, 0x69, 0xa3, 0x50, 0x91, 0xbb, 0xd3, 0xac, 0xad, 0x24, 0x56, 0x5b, 0x4b, 0x69,
	0xf1, 0x42, 0xf3, 0x30, 0xfa, 0x8d, 0x34, 0xb5, 0xd5, 0x4c, 0x94, 0x63, 0x9f, 0xc5, 0xc1, 0xac,
	0xb4, 0xaf, 0xe4, 0xc0, 0x1f, 0x65, 0x46, 0xc9, 0xd8, 0x4c, 0xad, 0x9e, 0x89, 0x5e, 0xb1, 0x9b,
	0xa3, 0xd7, 0x62, 0xa4, 0xd0, 0x6b, 0x0c, 0x69, 0x78, 0x1a, 0x05, 0x1f, 0xfd, 0x2e, 0xc2, 0xe2,
	0xbe, 0x92, 0x03, 0x31, 0x24, 0xcb, 0x50, 0x14, 0xac, 0x5a, 0xa8, 0x17, 0x36, 0x4b, 0x41, 0x51,
	0x30, 0xb2, 0x01, 0xe5, 0x91, 0x08, 0x91, 0xcb, 0xae, 0x56, 0x06, 0xab, 0xc5, 0x7a, 0x61, 0x73,
	0x21, 0x80, 0x68, 0xaa, 0xad, 0x0c, 0x92, 0x75, 0x00, 0xb7, 0x4e, 0xf7, 0x87, 0x0a, 0xb1, 0x7a,
	0xc3, 0x09, 0x4b, 0x6e, 0xe6, 0x48, 0x85, 0xa9, 0xb0, 0x93, 0xdf, 0x74, 0xf2, 0x28, 0xec, 0xd4,
	0x7b, 0x50, 0x92, 0x8a, 0xf1, 0xae, 0x05, 0x56, 0x17, 0xea, 0x85, 0xcd, 0xf2, 0xce, 0xe3, 0xad,
	0x54, 0xdf, 0xa3, 0xde, 0x1e, 0x4e, 0x4a, 0x6d, 0x4a, 0xa6, 0x95, 0x90, 0x18, 0xdc, 0xb6, 0xaa,
	0xf7, 0x22, 0x44, 0xb2, 0x0b, 0x65, 0xdb, 0xe2, 0x6e, 0xdf, 0xf9, 0xaf, 0x2e, 0x3a, 0xc6, 0x5a,
	0x96, 0xd1, 0xc4, 0x3e, 0x8b, 0x6a, 0x0c, 0x80, 0x27, 0x63, 0xb2, 0x07, 0x4b, 0x6e, 0x13, 0x26,
	0xfa, 0x5b, 0x4e, 0xbf, 0x9e, 0xd5, 0xdb, 0xfc, 0x09, 0xa0, 0xdc, 0x9f, 0xfe, 0xd9, 0xf9, 0x55,
	0x86, 0x95, 0xc4, 0x60, 0x87, 0x9b, 0x9f, 0xa2, 0xcf, 0xc9, 0x11, 0x2c, 0xb7, 0x38, 0xb6, 0x6d,
	0x9d, 0xf1, 0x42, 0x0f, 0x72, 0x2c, 0x9d, 0x69, 0xbc, 0xa8, 0xe5, 0xac, 0x95, 0xd6, 0xb5, 0x81,
	0xb4, 0x38, 0x26, 0x0b, 0xcc, 0xa3, 0x3d, 0x9c, 0xd1, 0xbd, 0x58, 0x7b, 0x08, 0x4b, 0x2d, 0x8e,
	0x07, 0xf6, 0xe3, 0x72, 0x1d, 0xfc, 0x17, 0x67, 0x4e, 0x75, 0xcc, 0x9c, 0xae, 0xed, 0x6a, 0x74,
	0x33, 0x31, 0x79, 0xc3, 0x23, 0x98, 0x6c, 0x9b, 0x97, 0x18, 0xeb, 0x8f, 0x61, 0xf9, 0x38, 0x74,
	0x8d, 0x0e, 0xc6, 0x52, 0x0a, 0x99, 0x4b, 0x74, 0xf1, 0x84, 0x78, 0x3f, 0x9b, 0xd0, 0x50, 0x6a,
	0x44, 0x0e, 0x01, 0x3a, 0x48, 0x8d, 0xeb, 0x22, 0x9b, 0x8f, 0xf1, 0xf5, 0x80, 0x34, 0xa1, 0xd4,
	0x41, 0xa5, 0xff, 0x17, 0xf3, 0x15, 0x56, 0x02, 0x3e, 0xb4, 0xa7, 0xc6, 0x9c, 0x70, 0xa4, 0x8c,
	0x22, 0x25, 0xcf, 0xb3, 0xc9, 0x9d, 0x71, 0xef, 0x33, 0x0d, 0x4f, 0xbb, 0x57, 0x73, 0xfd, 0xe0,
	0xef, 0x40, 0x0e, 0xb8, 0xb9, 0x8a, 0x7e, 0xe1, 0x47, 0x67, 0xb3, 0xfd, 0xf0, 0x13, 0x28, 0x4f,
	0x9c, 0xec, 0x9f, 0x31, 0xf2, 0x74, 0xbe, 0xe1, 0xfd, 0x33, 0xe6, 0xc7, 0x7d, 0x82, 0xca, 0x74,
	0x75, 0x0b, 0x7c, 0xf6, 0x37, 0x36, 0x67, 0x22, 0x3f, 0xc2, 0x9d, 0x80, 0xdb, 0xab, 0x25, 0xd6,
	0x75, 0x90, 0xe2, 0x38, 0xcc, 0xdb, 0xa8, 0x4b, 0x09, 0x7e, 0xe0, 0x07, 0xb8, 0xd7, 0xe2, 0x68,
	0x2f, 0x8b, 0x2f, 0x74, 0x34, 0xe6, 0x61, 0xe3, 0xa2, 0x6d, 0xf8, 0x40, 0x9c, 0x93, 0x6a, 0x0e,
	0x12, 0x8d, 0x90, 0xc3, 0xda, 0xaa, 0x2f, 0x72, 0x42, 0x35, 0x79, 0x07, 0x95, 0x4b, 0x3c, 0xb2,
	0xe6, 0xcb, 0xb6, 0x67, 0x6a, 0x36, 0xab, 0x09, 0x95, 0xce, 0x25, 0xd6, 0xac, 0x6c, 0x7f, 0x89,
	0xbb, 0x50, 0x6a, 0x0b, 0x39, 0x74, 0x97, 0x8c, 0xff, 0xf0, 0x7b, 0xe5, 0x6f, 0xa1, 0x62, 0xe5,
	0xc9, 0xad, 0x72, 0x0d, 0x44, 0x33, 0x72, 0xe0, 0x8e, 0xfe, 0xfc, 0x4b, 0x63, 0x56, 0x21, 0x47,
	0x9c, 0x1a, 0x6c, 0x70, 0x7a, 0x8d, 0x42, 0x1a, 0xaf, 0xbf, 0xbd, 0x4a, 0x45, 0x84, 0xda, 0x4e,
	0x3d, 0x91, 0xfa, 0x74, 0xb8, 0xad, 0x7b, 0xd3, 0x37, 0xf6, 0x8d, 0xee, 0x25, 0xe3, 0xde, 0xa2,
	0x7b, 0x35, 0x5f, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0xf3, 0x94, 0x91, 0x19, 0x47, 0x08, 0x00,
	0x00,
}
