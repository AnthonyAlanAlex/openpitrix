// Code generated by protoc-gen-go. DO NOT EDIT.
// source: openpitrix/types/drone.proto

package pbtypes

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DroneId struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id"`
}

func (m *DroneId) Reset()                    { *m = DroneId{} }
func (m *DroneId) String() string            { return proto.CompactTextString(m) }
func (*DroneId) ProtoMessage()               {}
func (*DroneId) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *DroneId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DroneIdList struct {
	IdList []string `protobuf:"bytes,1,rep,name=id_list,json=idList" json:"id_list"`
}

func (m *DroneIdList) Reset()                    { *m = DroneIdList{} }
func (m *DroneIdList) String() string            { return proto.CompactTextString(m) }
func (*DroneIdList) ProtoMessage()               {}
func (*DroneIdList) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *DroneIdList) GetIdList() []string {
	if m != nil {
		return m.IdList
	}
	return nil
}

type DroneConfig struct {
	Id             string `protobuf:"bytes,1,opt,name=id" json:"id"`
	Host           string `protobuf:"bytes,2,opt,name=host" json:"host"`
	ListenPort     int32  `protobuf:"varint,3,opt,name=listen_port,json=listenPort" json:"listen_port"`
	CmdInfoLogPath string `protobuf:"bytes,4,opt,name=cmd_info_log_path,json=cmdInfoLogPath" json:"cmd_info_log_path"`
	ConfdSelfHost  string `protobuf:"bytes,5,opt,name=confd_self_host,json=confdSelfHost" json:"confd_self_host"`
	LogLevel       string `protobuf:"bytes,6,opt,name=log_level,json=logLevel" json:"log_level"`
}

func (m *DroneConfig) Reset()                    { *m = DroneConfig{} }
func (m *DroneConfig) String() string            { return proto.CompactTextString(m) }
func (*DroneConfig) ProtoMessage()               {}
func (*DroneConfig) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *DroneConfig) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DroneConfig) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *DroneConfig) GetListenPort() int32 {
	if m != nil {
		return m.ListenPort
	}
	return 0
}

func (m *DroneConfig) GetCmdInfoLogPath() string {
	if m != nil {
		return m.CmdInfoLogPath
	}
	return ""
}

func (m *DroneConfig) GetConfdSelfHost() string {
	if m != nil {
		return m.ConfdSelfHost
	}
	return ""
}

func (m *DroneConfig) GetLogLevel() string {
	if m != nil {
		return m.LogLevel
	}
	return ""
}

type DroneEndpoint struct {
	FrontgateId string `protobuf:"bytes,1,opt,name=frontgate_id,json=frontgateId" json:"frontgate_id"`
	DroneIp     string `protobuf:"bytes,2,opt,name=drone_ip,json=droneIp" json:"drone_ip"`
	DronePort   int32  `protobuf:"varint,3,opt,name=drone_port,json=dronePort" json:"drone_port"`
}

func (m *DroneEndpoint) Reset()                    { *m = DroneEndpoint{} }
func (m *DroneEndpoint) String() string            { return proto.CompactTextString(m) }
func (*DroneEndpoint) ProtoMessage()               {}
func (*DroneEndpoint) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *DroneEndpoint) GetFrontgateId() string {
	if m != nil {
		return m.FrontgateId
	}
	return ""
}

func (m *DroneEndpoint) GetDroneIp() string {
	if m != nil {
		return m.DroneIp
	}
	return ""
}

func (m *DroneEndpoint) GetDronePort() int32 {
	if m != nil {
		return m.DronePort
	}
	return 0
}

func init() {
	proto.RegisterType((*DroneId)(nil), "openpitrix.types.DroneId")
	proto.RegisterType((*DroneIdList)(nil), "openpitrix.types.DroneIdList")
	proto.RegisterType((*DroneConfig)(nil), "openpitrix.types.DroneConfig")
	proto.RegisterType((*DroneEndpoint)(nil), "openpitrix.types.DroneEndpoint")
}

func init() { proto.RegisterFile("openpitrix/types/drone.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 335 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x51, 0x4b, 0x4f, 0xf3, 0x30,
	0x10, 0x54, 0xfa, 0xce, 0xf6, 0x6b, 0x3f, 0xf0, 0x85, 0x94, 0x87, 0x28, 0x39, 0x54, 0xe5, 0x40,
	0x73, 0xe0, 0xc8, 0x8d, 0x87, 0x44, 0xa4, 0x1e, 0xaa, 0x72, 0xe3, 0x62, 0xb5, 0xb5, 0x9d, 0x5a,
	0xb8, 0x5e, 0x2b, 0xb1, 0x10, 0xfc, 0x3d, 0x7e, 0x19, 0xca, 0xa6, 0x2a, 0x11, 0x9c, 0xec, 0x9d,
	0x19, 0xcf, 0x6a, 0x3c, 0x70, 0x8e, 0x4e, 0x5a, 0xa7, 0x7d, 0xae, 0x3f, 0x12, 0xff, 0xe9, 0x64,
	0x91, 0x88, 0x1c, 0xad, 0x9c, 0xb9, 0x1c, 0x3d, 0xb2, 0xa3, 0x1f, 0x76, 0x46, 0xec, 0xe9, 0x5f,
	0xfd, 0x06, 0xad, 0x12, 0x95, 0x3e, 0x1e, 0x41, 0xf7, 0xb1, 0x7c, 0x9e, 0x0a, 0x36, 0x84, 0x86,
	0x16, 0x51, 0x30, 0x0e, 0xa6, 0xe1, 0xb2, 0xa1, 0x45, 0x3c, 0x81, 0xfe, 0x9e, 0x9a, 0xeb, 0xc2,
	0xb3, 0x13, 0xe8, 0x6a, 0xc1, 0x8d, 0x2e, 0x7c, 0x14, 0x8c, 0x9b, 0xd3, 0x70, 0xd9, 0xd1, 0x44,
	0xc4, 0x5f, 0xc1, 0x5e, 0xf8, 0x80, 0x56, 0xe9, 0xec, 0xb7, 0x0f, 0x63, 0xd0, 0xda, 0x62, 0xe1,
	0xa3, 0x06, 0x21, 0x74, 0x67, 0x97, 0xd0, 0x2f, 0x9d, 0xa4, 0xe5, 0x0e, 0x73, 0x1f, 0x35, 0xc7,
	0xc1, 0xb4, 0xbd, 0x84, 0x0a, 0x5a, 0x60, 0xee, 0xd9, 0x35, 0x1c, 0x6f, 0x76, 0x82, 0x6b, 0xab,
	0x90, 0x1b, 0xcc, 0xb8, 0x5b, 0xf9, 0x6d, 0xd4, 0x22, 0x87, 0xe1, 0x66, 0x27, 0x52, 0xab, 0x70,
	0x8e, 0xd9, 0x62, 0xe5, 0xb7, 0x6c, 0x02, 0xff, 0x29, 0x11, 0x2f, 0xa4, 0x51, 0x9c, 0x56, 0xb5,
	0x49, 0x38, 0x20, 0xf8, 0x45, 0x1a, 0xf5, 0x5c, 0xee, 0x3c, 0x83, 0xb0, 0x74, 0x32, 0xf2, 0x5d,
	0x9a, 0xa8, 0x43, 0x8a, 0x9e, 0xc1, 0x6c, 0x5e, 0xce, 0xb1, 0x81, 0x01, 0x65, 0x78, 0xb2, 0xc2,
	0xa1, 0xb6, 0x9e, 0x5d, 0xc1, 0x3f, 0x95, 0xa3, 0xf5, 0xd9, 0xca, 0x4b, 0x7e, 0xc8, 0xd3, 0x3f,
	0x60, 0xa9, 0x60, 0x23, 0xe8, 0xd1, 0xd7, 0x73, 0xed, 0xf6, 0xe1, 0xba, 0x34, 0xa7, 0x8e, 0x5d,
	0x00, 0x54, 0x54, 0x2d, 0x5e, 0x48, 0x48, 0x99, 0xee, 0x3e, 0x79, 0xbd, 0xa9, 0xf5, 0xa4, 0x31,
	0xa9, 0x75, 0xe4, 0xde, 0xb2, 0xc4, 0xad, 0xab, 0xaa, 0xee, 0xdc, 0x9a, 0xce, 0x75, 0x87, 0xda,
	0xba, 0xfd, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x0c, 0xbd, 0xae, 0x6c, 0xfd, 0x01, 0x00, 0x00,
}
