// Code generated by protoc-gen-go. DO NOT EDIT.
// source: openpitrix/drone/drone.proto

package pbdrone // import "openpitrix.io/openpitrix/pkg/pb/drone"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import types "openpitrix.io/openpitrix/pkg/pb/types"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DroneService service

type DroneServiceClient interface {
	GetDroneConfig(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.DroneConfig, error)
	SetDroneConfig(ctx context.Context, in *types.DroneConfig, opts ...grpc.CallOption) (*types.Empty, error)
	GetConfdConfig(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.ConfdConfig, error)
	SetConfdConfig(ctx context.Context, in *types.ConfdConfig, opts ...grpc.CallOption) (*types.Empty, error)
	GetFrontgateConfig(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.FrontgateConfig, error)
	SetFrontgateConfig(ctx context.Context, in *types.FrontgateConfig, opts ...grpc.CallOption) (*types.Empty, error)
	IsConfdRunning(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.Bool, error)
	StartConfd(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.Empty, error)
	StopConfd(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.Empty, error)
	GetTemplateFiles(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.StringList, error)
	GetValues(ctx context.Context, in *types.StringList, opts ...grpc.CallOption) (*types.StringMap, error)
	PingPilot(ctx context.Context, in *types.FrontgateEndpoint, opts ...grpc.CallOption) (*types.Empty, error)
	PingFrontgate(ctx context.Context, in *types.FrontgateEndpoint, opts ...grpc.CallOption) (*types.Empty, error)
	PingDrone(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.Empty, error)
}

type droneServiceClient struct {
	cc *grpc.ClientConn
}

func NewDroneServiceClient(cc *grpc.ClientConn) DroneServiceClient {
	return &droneServiceClient{cc}
}

func (c *droneServiceClient) GetDroneConfig(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.DroneConfig, error) {
	out := new(types.DroneConfig)
	err := grpc.Invoke(ctx, "/openpitrix.drone.DroneService/GetDroneConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *droneServiceClient) SetDroneConfig(ctx context.Context, in *types.DroneConfig, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := grpc.Invoke(ctx, "/openpitrix.drone.DroneService/SetDroneConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *droneServiceClient) GetConfdConfig(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.ConfdConfig, error) {
	out := new(types.ConfdConfig)
	err := grpc.Invoke(ctx, "/openpitrix.drone.DroneService/GetConfdConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *droneServiceClient) SetConfdConfig(ctx context.Context, in *types.ConfdConfig, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := grpc.Invoke(ctx, "/openpitrix.drone.DroneService/SetConfdConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *droneServiceClient) GetFrontgateConfig(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.FrontgateConfig, error) {
	out := new(types.FrontgateConfig)
	err := grpc.Invoke(ctx, "/openpitrix.drone.DroneService/GetFrontgateConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *droneServiceClient) SetFrontgateConfig(ctx context.Context, in *types.FrontgateConfig, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := grpc.Invoke(ctx, "/openpitrix.drone.DroneService/SetFrontgateConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *droneServiceClient) IsConfdRunning(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.Bool, error) {
	out := new(types.Bool)
	err := grpc.Invoke(ctx, "/openpitrix.drone.DroneService/IsConfdRunning", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *droneServiceClient) StartConfd(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := grpc.Invoke(ctx, "/openpitrix.drone.DroneService/StartConfd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *droneServiceClient) StopConfd(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := grpc.Invoke(ctx, "/openpitrix.drone.DroneService/StopConfd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *droneServiceClient) GetTemplateFiles(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.StringList, error) {
	out := new(types.StringList)
	err := grpc.Invoke(ctx, "/openpitrix.drone.DroneService/GetTemplateFiles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *droneServiceClient) GetValues(ctx context.Context, in *types.StringList, opts ...grpc.CallOption) (*types.StringMap, error) {
	out := new(types.StringMap)
	err := grpc.Invoke(ctx, "/openpitrix.drone.DroneService/GetValues", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *droneServiceClient) PingPilot(ctx context.Context, in *types.FrontgateEndpoint, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := grpc.Invoke(ctx, "/openpitrix.drone.DroneService/PingPilot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *droneServiceClient) PingFrontgate(ctx context.Context, in *types.FrontgateEndpoint, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := grpc.Invoke(ctx, "/openpitrix.drone.DroneService/PingFrontgate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *droneServiceClient) PingDrone(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := grpc.Invoke(ctx, "/openpitrix.drone.DroneService/PingDrone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DroneService service

type DroneServiceServer interface {
	GetDroneConfig(context.Context, *types.Empty) (*types.DroneConfig, error)
	SetDroneConfig(context.Context, *types.DroneConfig) (*types.Empty, error)
	GetConfdConfig(context.Context, *types.Empty) (*types.ConfdConfig, error)
	SetConfdConfig(context.Context, *types.ConfdConfig) (*types.Empty, error)
	GetFrontgateConfig(context.Context, *types.Empty) (*types.FrontgateConfig, error)
	SetFrontgateConfig(context.Context, *types.FrontgateConfig) (*types.Empty, error)
	IsConfdRunning(context.Context, *types.Empty) (*types.Bool, error)
	StartConfd(context.Context, *types.Empty) (*types.Empty, error)
	StopConfd(context.Context, *types.Empty) (*types.Empty, error)
	GetTemplateFiles(context.Context, *types.Empty) (*types.StringList, error)
	GetValues(context.Context, *types.StringList) (*types.StringMap, error)
	PingPilot(context.Context, *types.FrontgateEndpoint) (*types.Empty, error)
	PingFrontgate(context.Context, *types.FrontgateEndpoint) (*types.Empty, error)
	PingDrone(context.Context, *types.Empty) (*types.Empty, error)
}

func RegisterDroneServiceServer(s *grpc.Server, srv DroneServiceServer) {
	s.RegisterService(&_DroneService_serviceDesc, srv)
}

func _DroneService_GetDroneConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DroneServiceServer).GetDroneConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.drone.DroneService/GetDroneConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DroneServiceServer).GetDroneConfig(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DroneService_SetDroneConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.DroneConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DroneServiceServer).SetDroneConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.drone.DroneService/SetDroneConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DroneServiceServer).SetDroneConfig(ctx, req.(*types.DroneConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _DroneService_GetConfdConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DroneServiceServer).GetConfdConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.drone.DroneService/GetConfdConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DroneServiceServer).GetConfdConfig(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DroneService_SetConfdConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ConfdConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DroneServiceServer).SetConfdConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.drone.DroneService/SetConfdConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DroneServiceServer).SetConfdConfig(ctx, req.(*types.ConfdConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _DroneService_GetFrontgateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DroneServiceServer).GetFrontgateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.drone.DroneService/GetFrontgateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DroneServiceServer).GetFrontgateConfig(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DroneService_SetFrontgateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.FrontgateConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DroneServiceServer).SetFrontgateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.drone.DroneService/SetFrontgateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DroneServiceServer).SetFrontgateConfig(ctx, req.(*types.FrontgateConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _DroneService_IsConfdRunning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DroneServiceServer).IsConfdRunning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.drone.DroneService/IsConfdRunning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DroneServiceServer).IsConfdRunning(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DroneService_StartConfd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DroneServiceServer).StartConfd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.drone.DroneService/StartConfd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DroneServiceServer).StartConfd(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DroneService_StopConfd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DroneServiceServer).StopConfd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.drone.DroneService/StopConfd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DroneServiceServer).StopConfd(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DroneService_GetTemplateFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DroneServiceServer).GetTemplateFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.drone.DroneService/GetTemplateFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DroneServiceServer).GetTemplateFiles(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DroneService_GetValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.StringList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DroneServiceServer).GetValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.drone.DroneService/GetValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DroneServiceServer).GetValues(ctx, req.(*types.StringList))
	}
	return interceptor(ctx, in, info, handler)
}

func _DroneService_PingPilot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.FrontgateEndpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DroneServiceServer).PingPilot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.drone.DroneService/PingPilot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DroneServiceServer).PingPilot(ctx, req.(*types.FrontgateEndpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _DroneService_PingFrontgate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.FrontgateEndpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DroneServiceServer).PingFrontgate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.drone.DroneService/PingFrontgate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DroneServiceServer).PingFrontgate(ctx, req.(*types.FrontgateEndpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _DroneService_PingDrone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DroneServiceServer).PingDrone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.drone.DroneService/PingDrone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DroneServiceServer).PingDrone(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _DroneService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openpitrix.drone.DroneService",
	HandlerType: (*DroneServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDroneConfig",
			Handler:    _DroneService_GetDroneConfig_Handler,
		},
		{
			MethodName: "SetDroneConfig",
			Handler:    _DroneService_SetDroneConfig_Handler,
		},
		{
			MethodName: "GetConfdConfig",
			Handler:    _DroneService_GetConfdConfig_Handler,
		},
		{
			MethodName: "SetConfdConfig",
			Handler:    _DroneService_SetConfdConfig_Handler,
		},
		{
			MethodName: "GetFrontgateConfig",
			Handler:    _DroneService_GetFrontgateConfig_Handler,
		},
		{
			MethodName: "SetFrontgateConfig",
			Handler:    _DroneService_SetFrontgateConfig_Handler,
		},
		{
			MethodName: "IsConfdRunning",
			Handler:    _DroneService_IsConfdRunning_Handler,
		},
		{
			MethodName: "StartConfd",
			Handler:    _DroneService_StartConfd_Handler,
		},
		{
			MethodName: "StopConfd",
			Handler:    _DroneService_StopConfd_Handler,
		},
		{
			MethodName: "GetTemplateFiles",
			Handler:    _DroneService_GetTemplateFiles_Handler,
		},
		{
			MethodName: "GetValues",
			Handler:    _DroneService_GetValues_Handler,
		},
		{
			MethodName: "PingPilot",
			Handler:    _DroneService_PingPilot_Handler,
		},
		{
			MethodName: "PingFrontgate",
			Handler:    _DroneService_PingFrontgate_Handler,
		},
		{
			MethodName: "PingDrone",
			Handler:    _DroneService_PingDrone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "openpitrix/drone/drone.proto",
}

func init() { proto.RegisterFile("openpitrix/drone/drone.proto", fileDescriptor_drone_d0b6026f2e5274cd) }

var fileDescriptor_drone_d0b6026f2e5274cd = []byte{
	// 361 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0x41, 0x4b, 0xfb, 0x40,
	0x10, 0xc5, 0x6f, 0x7f, 0xfe, 0x1d, 0xb4, 0x94, 0x3d, 0x28, 0xc4, 0x0a, 0x8a, 0x67, 0x1b, 0xd0,
	0xa3, 0x54, 0xb0, 0xda, 0xa6, 0x05, 0x0b, 0xc1, 0x88, 0x07, 0x6f, 0x69, 0x33, 0x0d, 0x8b, 0xe9,
	0xce, 0x92, 0x4c, 0xc5, 0x7e, 0x03, 0x3f, 0xb6, 0x34, 0x5b, 0x75, 0x35, 0x6e, 0x8a, 0xf5, 0xb2,
	0x85, 0x79, 0xf3, 0xde, 0xfe, 0x76, 0x4a, 0x06, 0xda, 0xa4, 0x51, 0x69, 0xc9, 0xb9, 0x7c, 0xf1,
	0x93, 0x9c, 0x14, 0x9a, 0xb3, 0xa3, 0x73, 0x62, 0x12, 0xad, 0x4f, 0xb5, 0x53, 0xd6, 0x3d, 0xbb,
	0x9f, 0x97, 0x1a, 0x0b, 0x73, 0x9a, 0xfe, 0x1f, 0xd4, 0x29, 0xa9, 0x59, 0xe2, 0x54, 0xad, 0xbb,
	0xbc, 0xa3, 0x8a, 0x3a, 0xcb, 0x49, 0x71, 0x1a, 0xf3, 0xba, 0xe3, 0xec, 0xf5, 0x3f, 0xec, 0xdc,
	0xac, 0x1c, 0x11, 0xe6, 0xcf, 0x72, 0x8a, 0x62, 0x08, 0xcd, 0x00, 0xb9, 0x2c, 0x5d, 0x93, 0x9a,
	0xc9, 0x54, 0xec, 0x77, 0x2c, 0x62, 0x43, 0xd6, 0x9f, 0x6b, 0x5e, 0x7a, 0x87, 0x55, 0xc1, 0xf6,
	0x0d, 0xa1, 0x19, 0x7d, 0x4d, 0xaa, 0x37, 0x78, 0xae, 0x8b, 0xd6, 0x4c, 0xab, 0xae, 0x64, 0x0b,
	0x26, 0xdb, 0x67, 0x98, 0xec, 0x4a, 0xbd, 0xc1, 0xcd, 0x14, 0x82, 0x08, 0x90, 0x07, 0xef, 0xe3,
	0xdc, 0xc4, 0x75, 0x5c, 0x15, 0xbe, 0x7b, 0x43, 0x10, 0x51, 0x35, 0x71, 0xb3, 0xd1, 0xcd, 0x78,
	0x05, 0xcd, 0x51, 0x51, 0xbe, 0xe6, 0x6e, 0xa1, 0x94, 0x54, 0x35, 0x7c, 0x7b, 0x55, 0xa1, 0x47,
	0x94, 0x89, 0x4b, 0x80, 0x88, 0xe3, 0xdc, 0x8c, 0xcc, 0x6d, 0x77, 0x22, 0x74, 0xa1, 0x11, 0x31,
	0xe9, 0x6d, 0xed, 0x23, 0x68, 0x05, 0xc8, 0xf7, 0x38, 0xd7, 0x59, 0xcc, 0x38, 0x90, 0x19, 0x16,
	0xee, 0x94, 0x76, 0x55, 0x88, 0x38, 0x97, 0x2a, 0xbd, 0x95, 0x05, 0x8b, 0x01, 0x34, 0x02, 0xe4,
	0x87, 0x38, 0x5b, 0x60, 0x21, 0x6a, 0x5b, 0xbd, 0x03, 0x97, 0x3a, 0x8e, 0xb5, 0x18, 0x41, 0x23,
	0x94, 0x2a, 0x0d, 0x65, 0x46, 0x2c, 0x4e, 0x6a, 0xfe, 0x9d, 0xbe, 0x4a, 0x34, 0x49, 0xc5, 0xee,
	0xd7, 0x8d, 0x61, 0x77, 0x15, 0xf5, 0xe1, 0xf8, 0x63, 0x5c, 0xd7, 0x90, 0x95, 0x9f, 0xd4, 0xef,
	0x67, 0xdd, 0xf3, 0x1f, 0x4f, 0x2d, 0x45, 0x92, 0x6f, 0x2d, 0x0f, 0xfd, 0x94, 0xfa, 0x7a, 0x62,
	0x76, 0xcb, 0x85, 0x9e, 0x94, 0xbf, 0x93, 0x7f, 0xe5, 0x0a, 0x39, 0x7f, 0x0b, 0x00, 0x00, 0xff,
	0xff, 0x73, 0xac, 0xb7, 0x44, 0xf0, 0x04, 0x00, 0x00,
}
