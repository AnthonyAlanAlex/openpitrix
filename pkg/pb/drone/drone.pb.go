// Code generated by protoc-gen-go. DO NOT EDIT.
// source: drone.proto

/*
Package openpitrix_drone is a generated protocol buffer package.

It is generated from these files:
	drone.proto

It has these top-level messages:
	Task
	TaskDirective
	Empty
*/
package openpitrix_drone

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Task struct {
	Id        string         `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Action    string         `protobuf:"bytes,2,opt,name=action" json:"action,omitempty"`
	Target    string         `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
	Directive *TaskDirective `protobuf:"bytes,4,opt,name=directive" json:"directive,omitempty"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Task) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Task) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *Task) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *Task) GetDirective() *TaskDirective {
	if m != nil {
		return m.Directive
	}
	return nil
}

type TaskDirective struct {
	DroneIp               string `protobuf:"bytes,1,opt,name=drone_ip,json=droneIp" json:"drone_ip,omitempty"`
	FrontgateId           string `protobuf:"bytes,2,opt,name=frontgate_id,json=frontgateId" json:"frontgate_id,omitempty"`
	Command               string `protobuf:"bytes,3,opt,name=command" json:"command,omitempty"`
	CommandRetryTimes     string `protobuf:"bytes,4,opt,name=command_retry_times,json=commandRetryTimes" json:"command_retry_times,omitempty"`
	CommandTimeoutSeconds string `protobuf:"bytes,5,opt,name=command_timeout_seconds,json=commandTimeoutSeconds" json:"command_timeout_seconds,omitempty"`
}

func (m *TaskDirective) Reset()                    { *m = TaskDirective{} }
func (m *TaskDirective) String() string            { return proto.CompactTextString(m) }
func (*TaskDirective) ProtoMessage()               {}
func (*TaskDirective) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TaskDirective) GetDroneIp() string {
	if m != nil {
		return m.DroneIp
	}
	return ""
}

func (m *TaskDirective) GetFrontgateId() string {
	if m != nil {
		return m.FrontgateId
	}
	return ""
}

func (m *TaskDirective) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *TaskDirective) GetCommandRetryTimes() string {
	if m != nil {
		return m.CommandRetryTimes
	}
	return ""
}

func (m *TaskDirective) GetCommandTimeoutSeconds() string {
	if m != nil {
		return m.CommandTimeoutSeconds
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*Task)(nil), "openpitrix.drone.Task")
	proto.RegisterType((*TaskDirective)(nil), "openpitrix.drone.TaskDirective")
	proto.RegisterType((*Empty)(nil), "openpitrix.drone.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DroneService service

type DroneServiceClient interface {
	StartConfd(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Empty, error)
}

type droneServiceClient struct {
	cc *grpc.ClientConn
}

func NewDroneServiceClient(cc *grpc.ClientConn) DroneServiceClient {
	return &droneServiceClient{cc}
}

func (c *droneServiceClient) StartConfd(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/openpitrix.drone.DroneService/StartConfd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DroneService service

type DroneServiceServer interface {
	StartConfd(context.Context, *Task) (*Empty, error)
}

func RegisterDroneServiceServer(s *grpc.Server, srv DroneServiceServer) {
	s.RegisterService(&_DroneService_serviceDesc, srv)
}

func _DroneService_StartConfd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DroneServiceServer).StartConfd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.drone.DroneService/StartConfd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DroneServiceServer).StartConfd(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

var _DroneService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openpitrix.drone.DroneService",
	HandlerType: (*DroneServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartConfd",
			Handler:    _DroneService_StartConfd_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "drone.proto",
}

func init() { proto.RegisterFile("drone.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 297 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x85, 0x95, 0xd2, 0x1f, 0x7a, 0x53, 0x10, 0x18, 0xd1, 0x1a, 0x16, 0x4a, 0xa6, 0x4e, 0x19,
	0x8a, 0xc4, 0xd6, 0x89, 0x32, 0x74, 0x60, 0x49, 0xb2, 0x47, 0x26, 0x76, 0x2b, 0x0b, 0xc5, 0xb6,
	0x9c, 0x4b, 0x45, 0x1f, 0x80, 0xe7, 0xe3, 0x95, 0x90, 0x1d, 0x07, 0xc4, 0xcf, 0xe6, 0x73, 0xbe,
	0x7b, 0x7c, 0x8f, 0x6c, 0x88, 0xb9, 0xd5, 0x4a, 0xa4, 0xc6, 0x6a, 0xd4, 0xe4, 0x4c, 0x1b, 0xa1,
	0x8c, 0x44, 0x2b, 0xdf, 0x52, 0xef, 0x27, 0xef, 0x11, 0xf4, 0x0b, 0xd6, 0xbc, 0x90, 0x53, 0xe8,
	0x49, 0x4e, 0xa3, 0x79, 0xb4, 0x18, 0x67, 0x3d, 0xc9, 0xc9, 0x14, 0x86, 0xac, 0x42, 0xa9, 0x15,
	0xed, 0x79, 0x2f, 0x28, 0xe7, 0x23, 0xb3, 0x3b, 0x81, 0xf4, 0xa8, 0xf5, 0x5b, 0x45, 0x56, 0x30,
	0xe6, 0xd2, 0x8a, 0x0a, 0xe5, 0x5e, 0xd0, 0xfe, 0x3c, 0x5a, 0xc4, 0xcb, 0x9b, 0xf4, 0xf7, 0xba,
	0xd4, 0xad, 0x5a, 0x77, 0x63, 0xd9, 0x77, 0x22, 0xf9, 0x88, 0xe0, 0xe4, 0x07, 0x24, 0x57, 0x70,
	0xec, 0x33, 0xa5, 0x34, 0xa1, 0xd6, 0xc8, 0xeb, 0x8d, 0x21, 0xb7, 0x30, 0xd9, 0x5a, 0xad, 0x70,
	0xc7, 0x50, 0x94, 0x92, 0x87, 0x86, 0xf1, 0x97, 0xb7, 0xe1, 0x84, 0xc2, 0xa8, 0xd2, 0x75, 0xcd,
	0x14, 0x0f, 0x3d, 0x3b, 0x49, 0x52, 0xb8, 0x08, 0xc7, 0xd2, 0x0a, 0xb4, 0x87, 0x12, 0x65, 0x2d,
	0x1a, 0x5f, 0x79, 0x9c, 0x9d, 0x07, 0x94, 0x39, 0x52, 0x38, 0x40, 0xee, 0x61, 0xd6, 0xcd, 0xbb,
	0x49, 0xfd, 0x8a, 0x65, 0x23, 0x2a, 0xad, 0x78, 0x43, 0x07, 0x3e, 0x73, 0x19, 0x70, 0xd1, 0xd2,
	0xbc, 0x85, 0xc9, 0x08, 0x06, 0x8f, 0xb5, 0xc1, 0xc3, 0xf2, 0x09, 0x26, 0x6b, 0x57, 0x3c, 0x17,
	0x76, 0x2f, 0x2b, 0x41, 0x56, 0x00, 0x39, 0x32, 0x8b, 0x0f, 0x5a, 0x6d, 0x39, 0x99, 0xfe, 0xff,
	0x48, 0xd7, 0xb3, 0xbf, 0xbe, 0xbf, 0xee, 0x79, 0xe8, 0xbf, 0xf2, 0xee, 0x33, 0x00, 0x00, 0xff,
	0xff, 0xfd, 0x83, 0xcb, 0xe9, 0xd9, 0x01, 0x00, 0x00,
}
