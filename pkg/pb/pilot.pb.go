// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pilot.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/wrappers"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type HandleSubtaskRequest struct {
	SubtaskId     *google_protobuf.StringValue `protobuf:"bytes,1,opt,name=subtask_id,json=subtaskId" json:"subtask_id,omitempty"`
	SubtaskAction *google_protobuf.StringValue `protobuf:"bytes,2,opt,name=subtask_action,json=subtaskAction" json:"subtask_action,omitempty"`
	Directive     *google_protobuf.StringValue `protobuf:"bytes,3,opt,name=directive" json:"directive,omitempty"`
}

func (m *HandleSubtaskRequest) Reset()                    { *m = HandleSubtaskRequest{} }
func (m *HandleSubtaskRequest) String() string            { return proto.CompactTextString(m) }
func (*HandleSubtaskRequest) ProtoMessage()               {}
func (*HandleSubtaskRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *HandleSubtaskRequest) GetSubtaskId() *google_protobuf.StringValue {
	if m != nil {
		return m.SubtaskId
	}
	return nil
}

func (m *HandleSubtaskRequest) GetSubtaskAction() *google_protobuf.StringValue {
	if m != nil {
		return m.SubtaskAction
	}
	return nil
}

func (m *HandleSubtaskRequest) GetDirective() *google_protobuf.StringValue {
	if m != nil {
		return m.Directive
	}
	return nil
}

type HandleSubtaskResponse struct {
	SubtaskId *google_protobuf.StringValue `protobuf:"bytes,1,opt,name=subtask_id,json=subtaskId" json:"subtask_id,omitempty"`
}

func (m *HandleSubtaskResponse) Reset()                    { *m = HandleSubtaskResponse{} }
func (m *HandleSubtaskResponse) String() string            { return proto.CompactTextString(m) }
func (*HandleSubtaskResponse) ProtoMessage()               {}
func (*HandleSubtaskResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *HandleSubtaskResponse) GetSubtaskId() *google_protobuf.StringValue {
	if m != nil {
		return m.SubtaskId
	}
	return nil
}

type GetSubtaskStatusRequest struct {
	SubtaskId []string `protobuf:"bytes,1,rep,name=subtask_id,json=subtaskId" json:"subtask_id,omitempty"`
}

func (m *GetSubtaskStatusRequest) Reset()                    { *m = GetSubtaskStatusRequest{} }
func (m *GetSubtaskStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSubtaskStatusRequest) ProtoMessage()               {}
func (*GetSubtaskStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *GetSubtaskStatusRequest) GetSubtaskId() []string {
	if m != nil {
		return m.SubtaskId
	}
	return nil
}

type SubtaskStatus struct {
	SubtaskId *google_protobuf.StringValue `protobuf:"bytes,1,opt,name=subtask_id,json=subtaskId" json:"subtask_id,omitempty"`
	Status    *google_protobuf.StringValue `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *SubtaskStatus) Reset()                    { *m = SubtaskStatus{} }
func (m *SubtaskStatus) String() string            { return proto.CompactTextString(m) }
func (*SubtaskStatus) ProtoMessage()               {}
func (*SubtaskStatus) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *SubtaskStatus) GetSubtaskId() *google_protobuf.StringValue {
	if m != nil {
		return m.SubtaskId
	}
	return nil
}

func (m *SubtaskStatus) GetStatus() *google_protobuf.StringValue {
	if m != nil {
		return m.Status
	}
	return nil
}

type GetSubtaskStatusResponse struct {
	TotalCount       uint32           `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	SubtaskStatusSet []*SubtaskStatus `protobuf:"bytes,2,rep,name=subtask_status_set,json=subtaskStatusSet" json:"subtask_status_set,omitempty"`
}

func (m *GetSubtaskStatusResponse) Reset()                    { *m = GetSubtaskStatusResponse{} }
func (m *GetSubtaskStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*GetSubtaskStatusResponse) ProtoMessage()               {}
func (*GetSubtaskStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *GetSubtaskStatusResponse) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *GetSubtaskStatusResponse) GetSubtaskStatusSet() []*SubtaskStatus {
	if m != nil {
		return m.SubtaskStatusSet
	}
	return nil
}

func init() {
	proto.RegisterType((*HandleSubtaskRequest)(nil), "openpitrix.HandleSubtaskRequest")
	proto.RegisterType((*HandleSubtaskResponse)(nil), "openpitrix.HandleSubtaskResponse")
	proto.RegisterType((*GetSubtaskStatusRequest)(nil), "openpitrix.GetSubtaskStatusRequest")
	proto.RegisterType((*SubtaskStatus)(nil), "openpitrix.SubtaskStatus")
	proto.RegisterType((*GetSubtaskStatusResponse)(nil), "openpitrix.GetSubtaskStatusResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PilotManager service

type PilotManagerClient interface {
	HandleSubtask(ctx context.Context, in *HandleSubtaskRequest, opts ...grpc.CallOption) (*HandleSubtaskResponse, error)
	GetSubtaskStatus(ctx context.Context, in *GetSubtaskStatusRequest, opts ...grpc.CallOption) (*GetSubtaskStatusResponse, error)
}

type pilotManagerClient struct {
	cc *grpc.ClientConn
}

func NewPilotManagerClient(cc *grpc.ClientConn) PilotManagerClient {
	return &pilotManagerClient{cc}
}

func (c *pilotManagerClient) HandleSubtask(ctx context.Context, in *HandleSubtaskRequest, opts ...grpc.CallOption) (*HandleSubtaskResponse, error) {
	out := new(HandleSubtaskResponse)
	err := grpc.Invoke(ctx, "/openpitrix.PilotManager/HandleSubtask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotManagerClient) GetSubtaskStatus(ctx context.Context, in *GetSubtaskStatusRequest, opts ...grpc.CallOption) (*GetSubtaskStatusResponse, error) {
	out := new(GetSubtaskStatusResponse)
	err := grpc.Invoke(ctx, "/openpitrix.PilotManager/GetSubtaskStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PilotManager service

type PilotManagerServer interface {
	HandleSubtask(context.Context, *HandleSubtaskRequest) (*HandleSubtaskResponse, error)
	GetSubtaskStatus(context.Context, *GetSubtaskStatusRequest) (*GetSubtaskStatusResponse, error)
}

func RegisterPilotManagerServer(s *grpc.Server, srv PilotManagerServer) {
	s.RegisterService(&_PilotManager_serviceDesc, srv)
}

func _PilotManager_HandleSubtask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleSubtaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotManagerServer).HandleSubtask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.PilotManager/HandleSubtask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotManagerServer).HandleSubtask(ctx, req.(*HandleSubtaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotManager_GetSubtaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubtaskStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotManagerServer).GetSubtaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.PilotManager/GetSubtaskStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotManagerServer).GetSubtaskStatus(ctx, req.(*GetSubtaskStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PilotManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openpitrix.PilotManager",
	HandlerType: (*PilotManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleSubtask",
			Handler:    _PilotManager_HandleSubtask_Handler,
		},
		{
			MethodName: "GetSubtaskStatus",
			Handler:    _PilotManager_GetSubtaskStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pilot.proto",
}

func init() { proto.RegisterFile("pilot.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 513 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0x65, 0x47, 0x54, 0xca, 0xa4, 0x29, 0xd1, 0xaa, 0x15, 0x26, 0x2a, 0x60, 0x0c, 0x87,
	0x50, 0xa8, 0xdd, 0x1a, 0x0e, 0x28, 0x9c, 0x42, 0x0f, 0x2d, 0x07, 0x44, 0x94, 0x20, 0x0e, 0x5c,
	0xa2, 0x8d, 0xb3, 0xb8, 0x5b, 0xac, 0xdd, 0xad, 0x77, 0xdc, 0xf6, 0xc4, 0xa1, 0xe2, 0xc0, 0x39,
	0x9c, 0x78, 0x2e, 0x78, 0x04, 0x1e, 0x04, 0x65, 0x6d, 0x83, 0x93, 0x94, 0x2a, 0x52, 0x4f, 0x96,
	0x67, 0xfe, 0xf9, 0xf7, 0x9b, 0xd9, 0x59, 0x68, 0x28, 0x9e, 0x48, 0xf4, 0x55, 0x2a, 0x51, 0x12,
	0x90, 0x8a, 0x09, 0xc5, 0x31, 0xe5, 0x17, 0xed, 0xfb, 0xb1, 0x94, 0x71, 0xc2, 0x02, 0x93, 0x19,
	0x67, 0x9f, 0x82, 0xf3, 0x94, 0x2a, 0xc5, 0x52, 0x9d, 0x6b, 0xdb, 0xdb, 0x45, 0x9e, 0x2a, 0x1e,
	0x50, 0x21, 0x24, 0x52, 0xe4, 0x52, 0x94, 0xd9, 0x67, 0xe6, 0x13, 0xed, 0xc6, 0x4c, 0xec, 0xea,
	0x73, 0x1a, 0xc7, 0x2c, 0x0d, 0xa4, 0x32, 0x8a, 0x65, 0xb5, 0xf7, 0xcb, 0x82, 0xcd, 0x23, 0x2a,
	0x26, 0x09, 0x1b, 0x66, 0x63, 0xa4, 0xfa, 0xf3, 0x80, 0x9d, 0x66, 0x4c, 0x23, 0x79, 0x05, 0xa0,
	0xf3, 0xc8, 0x88, 0x4f, 0x1c, 0xcb, 0xb5, 0x3a, 0x8d, 0x70, 0xdb, 0xcf, 0x4f, 0xf6, 0x4b, 0x32,
	0x7f, 0x88, 0x29, 0x17, 0xf1, 0x07, 0x9a, 0x64, 0x6c, 0x50, 0x2f, 0xf4, 0x6f, 0x26, 0xe4, 0x00,
	0x36, 0xca, 0x62, 0x1a, 0xcd, 0x8e, 0x73, 0xec, 0x15, 0x0c, 0x9a, 0x45, 0x4d, 0xcf, 0x94, 0x90,
	0x2e, 0xd4, 0x27, 0x3c, 0x65, 0x11, 0xf2, 0x33, 0xe6, 0xd4, 0x56, 0x01, 0xf8, 0x2b, 0xf7, 0xde,
	0xc3, 0xd6, 0x42, 0x57, 0x5a, 0x49, 0xa1, 0xd9, 0x8d, 0xda, 0xf2, 0x5e, 0xc2, 0x9d, 0x43, 0x86,
	0x85, 0xe5, 0x10, 0x29, 0x66, 0xba, 0x1c, 0xd7, 0xbd, 0x05, 0xdf, 0x5a, 0xa7, 0x5e, 0xad, 0xbc,
	0xb4, 0xa0, 0x39, 0x57, 0x77, 0xb3, 0xf9, 0xbe, 0x80, 0x35, 0x6d, 0x6c, 0x56, 0x9a, 0x6b, 0xa1,
	0xf5, 0xbe, 0x5a, 0xe0, 0x2c, 0xf3, 0x17, 0x83, 0x79, 0x00, 0x0d, 0x94, 0x48, 0x93, 0x51, 0x24,
	0x33, 0x81, 0x06, 0xa8, 0x39, 0x00, 0x13, 0x3a, 0x98, 0x45, 0xc8, 0x21, 0x90, 0x12, 0x38, 0xf7,
	0x1b, 0x69, 0x86, 0x8e, 0xed, 0xd6, 0x3a, 0x8d, 0xf0, 0xae, 0xff, 0x6f, 0x7d, 0xfd, 0x79, 0xff,
	0x96, 0xae, 0xfe, 0x0e, 0x19, 0x86, 0x3f, 0x6c, 0x58, 0xef, 0xcf, 0x56, 0xff, 0x2d, 0x15, 0x34,
	0x66, 0x29, 0xf9, 0x02, 0xcd, 0xb9, 0xcb, 0x22, 0x6e, 0xd5, 0xee, 0xaa, 0xed, 0x6c, 0x3f, 0xbc,
	0x46, 0x91, 0x37, 0xe4, 0x75, 0xa6, 0xbd, 0x16, 0xd9, 0x38, 0x36, 0x39, 0xb7, 0x80, 0xb8, 0xfc,
	0xf9, 0xfb, 0xbb, 0x7d, 0xdb, 0x83, 0xe0, 0x6c, 0x3f, 0x30, 0xaf, 0x4f, 0x77, 0xad, 0x1d, 0xf2,
	0xcd, 0x82, 0xd6, 0xe2, 0x5c, 0xc8, 0xa3, 0xea, 0x09, 0xff, 0xb9, 0xf5, 0xf6, 0xe3, 0xeb, 0x45,
	0x05, 0xc9, 0x93, 0x69, 0x6f, 0x93, 0x90, 0x98, 0x61, 0x89, 0xe1, 0xe6, 0x03, 0x34, 0x34, 0xeb,
	0xa4, 0x42, 0xf3, 0xfa, 0x62, 0xda, 0x3b, 0x25, 0x47, 0x40, 0xde, 0x29, 0x26, 0xfa, 0xc6, 0xd6,
	0xed, 0xa7, 0xf2, 0x84, 0x45, 0xe8, 0x3d, 0xbd, 0x2a, 0x4a, 0xb6, 0x8e, 0x11, 0x95, 0xee, 0x06,
	0x41, 0x05, 0x84, 0xcb, 0xf0, 0xd6, 0x9e, 0xbf, 0xe7, 0xef, 0xef, 0x58, 0x56, 0xd8, 0xa2, 0x4a,
	0x25, 0x3c, 0x32, 0x8f, 0x3e, 0x38, 0xd1, 0x52, 0x74, 0x97, 0x22, 0x1f, 0x6d, 0x35, 0x1e, 0xaf,
	0x99, 0xd5, 0x79, 0xfe, 0x27, 0x00, 0x00, 0xff, 0xff, 0xff, 0xeb, 0x9f, 0xd5, 0x96, 0x04, 0x00,
	0x00,
}
