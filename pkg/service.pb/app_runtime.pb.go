// Code generated by protoc-gen-go. DO NOT EDIT.
// source: app_runtime.proto

package openpitrix

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"
import google_protobuf2 "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AppRuntime struct {
	Id           string                      `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name         string                      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Description  string                      `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Url          string                      `protobuf:"bytes,4,opt,name=url" json:"url,omitempty"`
	Created      *google_protobuf2.Timestamp `protobuf:"bytes,5,opt,name=created" json:"created,omitempty"`
	LastModified *google_protobuf2.Timestamp `protobuf:"bytes,6,opt,name=last_modified,json=lastModified" json:"last_modified,omitempty"`
}

func (m *AppRuntime) Reset()                    { *m = AppRuntime{} }
func (m *AppRuntime) String() string            { return proto.CompactTextString(m) }
func (*AppRuntime) ProtoMessage()               {}
func (*AppRuntime) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *AppRuntime) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AppRuntime) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AppRuntime) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *AppRuntime) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *AppRuntime) GetCreated() *google_protobuf2.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *AppRuntime) GetLastModified() *google_protobuf2.Timestamp {
	if m != nil {
		return m.LastModified
	}
	return nil
}

type AppRuntimeLabel struct {
	AppRuntimeId string `protobuf:"bytes,1,opt,name=app_runtime_id,json=appRuntimeId" json:"app_runtime_id,omitempty"`
	LabelKey     string `protobuf:"bytes,2,opt,name=label_key,json=labelKey" json:"label_key,omitempty"`
	LabelValue   string `protobuf:"bytes,3,opt,name=label_value,json=labelValue" json:"label_value,omitempty"`
}

func (m *AppRuntimeLabel) Reset()                    { *m = AppRuntimeLabel{} }
func (m *AppRuntimeLabel) String() string            { return proto.CompactTextString(m) }
func (*AppRuntimeLabel) ProtoMessage()               {}
func (*AppRuntimeLabel) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *AppRuntimeLabel) GetAppRuntimeId() string {
	if m != nil {
		return m.AppRuntimeId
	}
	return ""
}

func (m *AppRuntimeLabel) GetLabelKey() string {
	if m != nil {
		return m.LabelKey
	}
	return ""
}

func (m *AppRuntimeLabel) GetLabelValue() string {
	if m != nil {
		return m.LabelValue
	}
	return ""
}

type AppRuntimeId struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *AppRuntimeId) Reset()                    { *m = AppRuntimeId{} }
func (m *AppRuntimeId) String() string            { return proto.CompactTextString(m) }
func (*AppRuntimeId) ProtoMessage()               {}
func (*AppRuntimeId) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *AppRuntimeId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type AppRuntimeListRequest struct {
	PageSize   int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	PageNumber int32 `protobuf:"varint,2,opt,name=page_number,json=pageNumber" json:"page_number,omitempty"`
}

func (m *AppRuntimeListRequest) Reset()                    { *m = AppRuntimeListRequest{} }
func (m *AppRuntimeListRequest) String() string            { return proto.CompactTextString(m) }
func (*AppRuntimeListRequest) ProtoMessage()               {}
func (*AppRuntimeListRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *AppRuntimeListRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *AppRuntimeListRequest) GetPageNumber() int32 {
	if m != nil {
		return m.PageNumber
	}
	return 0
}

type AppRuntimeListResponse struct {
	TotalItems  int32         `protobuf:"varint,1,opt,name=total_items,json=totalItems" json:"total_items,omitempty"`
	TotalPages  int32         `protobuf:"varint,2,opt,name=total_pages,json=totalPages" json:"total_pages,omitempty"`
	PageSize    int32         `protobuf:"varint,3,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	CurrentPage int32         `protobuf:"varint,4,opt,name=current_page,json=currentPage" json:"current_page,omitempty"`
	Items       []*AppRuntime `protobuf:"bytes,5,rep,name=items" json:"items,omitempty"`
}

func (m *AppRuntimeListResponse) Reset()                    { *m = AppRuntimeListResponse{} }
func (m *AppRuntimeListResponse) String() string            { return proto.CompactTextString(m) }
func (*AppRuntimeListResponse) ProtoMessage()               {}
func (*AppRuntimeListResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *AppRuntimeListResponse) GetTotalItems() int32 {
	if m != nil {
		return m.TotalItems
	}
	return 0
}

func (m *AppRuntimeListResponse) GetTotalPages() int32 {
	if m != nil {
		return m.TotalPages
	}
	return 0
}

func (m *AppRuntimeListResponse) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *AppRuntimeListResponse) GetCurrentPage() int32 {
	if m != nil {
		return m.CurrentPage
	}
	return 0
}

func (m *AppRuntimeListResponse) GetItems() []*AppRuntime {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*AppRuntime)(nil), "openpitrix.AppRuntime")
	proto.RegisterType((*AppRuntimeLabel)(nil), "openpitrix.AppRuntimeLabel")
	proto.RegisterType((*AppRuntimeId)(nil), "openpitrix.AppRuntimeId")
	proto.RegisterType((*AppRuntimeListRequest)(nil), "openpitrix.AppRuntimeListRequest")
	proto.RegisterType((*AppRuntimeListResponse)(nil), "openpitrix.AppRuntimeListResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AppRuntimeService service

type AppRuntimeServiceClient interface {
	GetAppRuntime(ctx context.Context, in *AppRuntimeId, opts ...grpc.CallOption) (*AppRuntime, error)
	// Returns a list containing all app runtimes.
	GetAppRuntimeList(ctx context.Context, in *AppRuntimeListRequest, opts ...grpc.CallOption) (*AppRuntimeListResponse, error)
	CreateAppRuntime(ctx context.Context, in *AppRuntime, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	UpdateAppRuntime(ctx context.Context, in *AppRuntime, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	DeleteAppRuntime(ctx context.Context, in *AppRuntimeId, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type appRuntimeServiceClient struct {
	cc *grpc.ClientConn
}

func NewAppRuntimeServiceClient(cc *grpc.ClientConn) AppRuntimeServiceClient {
	return &appRuntimeServiceClient{cc}
}

func (c *appRuntimeServiceClient) GetAppRuntime(ctx context.Context, in *AppRuntimeId, opts ...grpc.CallOption) (*AppRuntime, error) {
	out := new(AppRuntime)
	err := grpc.Invoke(ctx, "/openpitrix.AppRuntimeService/GetAppRuntime", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appRuntimeServiceClient) GetAppRuntimeList(ctx context.Context, in *AppRuntimeListRequest, opts ...grpc.CallOption) (*AppRuntimeListResponse, error) {
	out := new(AppRuntimeListResponse)
	err := grpc.Invoke(ctx, "/openpitrix.AppRuntimeService/GetAppRuntimeList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appRuntimeServiceClient) CreateAppRuntime(ctx context.Context, in *AppRuntime, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/openpitrix.AppRuntimeService/CreateAppRuntime", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appRuntimeServiceClient) UpdateAppRuntime(ctx context.Context, in *AppRuntime, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/openpitrix.AppRuntimeService/UpdateAppRuntime", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appRuntimeServiceClient) DeleteAppRuntime(ctx context.Context, in *AppRuntimeId, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/openpitrix.AppRuntimeService/DeleteAppRuntime", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AppRuntimeService service

type AppRuntimeServiceServer interface {
	GetAppRuntime(context.Context, *AppRuntimeId) (*AppRuntime, error)
	// Returns a list containing all app runtimes.
	GetAppRuntimeList(context.Context, *AppRuntimeListRequest) (*AppRuntimeListResponse, error)
	CreateAppRuntime(context.Context, *AppRuntime) (*google_protobuf1.Empty, error)
	UpdateAppRuntime(context.Context, *AppRuntime) (*google_protobuf1.Empty, error)
	DeleteAppRuntime(context.Context, *AppRuntimeId) (*google_protobuf1.Empty, error)
}

func RegisterAppRuntimeServiceServer(s *grpc.Server, srv AppRuntimeServiceServer) {
	s.RegisterService(&_AppRuntimeService_serviceDesc, srv)
}

func _AppRuntimeService_GetAppRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppRuntimeId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRuntimeServiceServer).GetAppRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AppRuntimeService/GetAppRuntime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRuntimeServiceServer).GetAppRuntime(ctx, req.(*AppRuntimeId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppRuntimeService_GetAppRuntimeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppRuntimeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRuntimeServiceServer).GetAppRuntimeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AppRuntimeService/GetAppRuntimeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRuntimeServiceServer).GetAppRuntimeList(ctx, req.(*AppRuntimeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppRuntimeService_CreateAppRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppRuntime)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRuntimeServiceServer).CreateAppRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AppRuntimeService/CreateAppRuntime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRuntimeServiceServer).CreateAppRuntime(ctx, req.(*AppRuntime))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppRuntimeService_UpdateAppRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppRuntime)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRuntimeServiceServer).UpdateAppRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AppRuntimeService/UpdateAppRuntime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRuntimeServiceServer).UpdateAppRuntime(ctx, req.(*AppRuntime))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppRuntimeService_DeleteAppRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppRuntimeId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRuntimeServiceServer).DeleteAppRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AppRuntimeService/DeleteAppRuntime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRuntimeServiceServer).DeleteAppRuntime(ctx, req.(*AppRuntimeId))
	}
	return interceptor(ctx, in, info, handler)
}

var _AppRuntimeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openpitrix.AppRuntimeService",
	HandlerType: (*AppRuntimeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAppRuntime",
			Handler:    _AppRuntimeService_GetAppRuntime_Handler,
		},
		{
			MethodName: "GetAppRuntimeList",
			Handler:    _AppRuntimeService_GetAppRuntimeList_Handler,
		},
		{
			MethodName: "CreateAppRuntime",
			Handler:    _AppRuntimeService_CreateAppRuntime_Handler,
		},
		{
			MethodName: "UpdateAppRuntime",
			Handler:    _AppRuntimeService_UpdateAppRuntime_Handler,
		},
		{
			MethodName: "DeleteAppRuntime",
			Handler:    _AppRuntimeService_DeleteAppRuntime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app_runtime.proto",
}

func init() { proto.RegisterFile("app_runtime.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 584 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0x95, 0x93, 0xba, 0xb4, 0x37, 0x69, 0x9b, 0x8c, 0x4a, 0x30, 0x6e, 0x45, 0x53, 0x8b, 0x45,
	0x55, 0x21, 0x5b, 0x04, 0x56, 0x6c, 0x50, 0x05, 0x08, 0x45, 0x3c, 0x84, 0x5c, 0xca, 0x12, 0x6b,
	0x12, 0xdf, 0x46, 0x23, 0xfc, 0x18, 0x3c, 0xe3, 0x88, 0x14, 0xb1, 0xe1, 0x13, 0xe0, 0xa7, 0xd8,
	0xb3, 0x64, 0xcb, 0x87, 0xa0, 0x19, 0x3b, 0x8d, 0x63, 0xd2, 0xb2, 0x60, 0xe7, 0x9c, 0x7b, 0xe6,
	0x9c, 0x73, 0x1f, 0x81, 0x2e, 0xe5, 0x3c, 0xc8, 0xf2, 0x44, 0xb2, 0x18, 0x5d, 0x9e, 0xa5, 0x32,
	0x25, 0x90, 0x72, 0x4c, 0x38, 0x93, 0x19, 0xfb, 0x64, 0xef, 0x4f, 0xd2, 0x74, 0x12, 0xa1, 0x47,
	0x39, 0xf3, 0x68, 0x92, 0xa4, 0x92, 0x4a, 0x96, 0x26, 0xa2, 0x60, 0xda, 0x7b, 0x65, 0x55, 0xff,
	0x1a, 0xe5, 0xe7, 0x1e, 0xc6, 0x5c, 0xce, 0xca, 0xe2, 0x41, 0xbd, 0xa8, 0x2c, 0x84, 0xa4, 0x31,
	0x2f, 0x08, 0xce, 0x2f, 0x03, 0xe0, 0x84, 0x73, 0xbf, 0x30, 0x27, 0xdb, 0xd0, 0x60, 0xa1, 0x65,
	0xf4, 0x8d, 0xa3, 0x4d, 0xbf, 0xc1, 0x42, 0x42, 0x60, 0x2d, 0xa1, 0x31, 0x5a, 0x0d, 0x8d, 0xe8,
	0x6f, 0xd2, 0x87, 0x56, 0x88, 0x62, 0x9c, 0x31, 0xae, 0x62, 0x58, 0x4d, 0x5d, 0xaa, 0x42, 0xa4,
	0x03, 0xcd, 0x3c, 0x8b, 0xac, 0x35, 0x5d, 0x51, 0x9f, 0xe4, 0x21, 0xdc, 0x18, 0x67, 0x48, 0x25,
	0x86, 0x96, 0xd9, 0x37, 0x8e, 0x5a, 0x03, 0xdb, 0x2d, 0x92, 0xb9, 0xf3, 0x64, 0xee, 0xdb, 0x79,
	0x32, 0x7f, 0x4e, 0x25, 0x8f, 0x61, 0x2b, 0xa2, 0x42, 0x06, 0x71, 0x1a, 0xb2, 0x73, 0x86, 0xa1,
	0xb5, 0xfe, 0xcf, 0xb7, 0x6d, 0xf5, 0xe0, 0x55, 0xc9, 0x77, 0x72, 0xd8, 0x59, 0x34, 0xf7, 0x92,
	0x8e, 0x30, 0x22, 0x77, 0x61, 0xbb, 0x32, 0xed, 0xe0, 0xb2, 0xdb, 0x36, 0xbd, 0x24, 0x0e, 0x43,
	0xb2, 0x07, 0x9b, 0x91, 0xa2, 0x07, 0x1f, 0x70, 0x56, 0x36, 0xbf, 0xa1, 0x81, 0x17, 0x38, 0x23,
	0x07, 0xd0, 0x2a, 0x8a, 0x53, 0x1a, 0xe5, 0x58, 0x0e, 0x00, 0x34, 0xf4, 0x4e, 0x21, 0xce, 0x1d,
	0x68, 0x9f, 0x54, 0xd5, 0x6a, 0x53, 0x75, 0xce, 0xe0, 0x66, 0x25, 0x16, 0x13, 0xd2, 0xc7, 0x8f,
	0x39, 0x0a, 0xa9, 0x6c, 0x39, 0x9d, 0x60, 0x20, 0xd8, 0x05, 0x6a, 0xbe, 0xe9, 0x6f, 0x28, 0xe0,
	0x94, 0x5d, 0xa0, 0xb2, 0xd5, 0xc5, 0x24, 0x8f, 0x47, 0x98, 0xe9, 0x54, 0xa6, 0x0f, 0x0a, 0x7a,
	0xad, 0x11, 0xe7, 0x87, 0x01, 0xbd, 0xba, 0xae, 0xe0, 0x69, 0x22, 0xf4, 0x5b, 0x99, 0x4a, 0x1a,
	0x05, 0x4c, 0x62, 0x2c, 0x4a, 0x69, 0xd0, 0xd0, 0x50, 0x21, 0x0b, 0x82, 0xd2, 0x13, 0x73, 0x71,
	0x0d, 0xbd, 0x51, 0xc8, 0x72, 0xb4, 0x66, 0x2d, 0xda, 0x21, 0xb4, 0xc7, 0x79, 0x96, 0x61, 0x22,
	0xf5, 0x7b, 0xbd, 0x79, 0xd3, 0x6f, 0x95, 0x98, 0x12, 0x20, 0xf7, 0xc0, 0x2c, 0xbc, 0xcd, 0x7e,
	0xf3, 0xa8, 0x35, 0xe8, 0xb9, 0x8b, 0x03, 0x77, 0x17, 0xa1, 0xfd, 0x82, 0x34, 0xf8, 0xb6, 0x06,
	0xdd, 0x05, 0x7a, 0x8a, 0xd9, 0x94, 0x8d, 0x91, 0x04, 0xb0, 0xf5, 0x1c, 0x65, 0xe5, 0x5c, 0xad,
	0xd5, 0x2a, 0xc3, 0xd0, 0xbe, 0x42, 0xdf, 0xd9, 0xff, 0xfa, 0xf3, 0xf7, 0xf7, 0x46, 0x8f, 0xec,
	0x7a, 0xd3, 0xfb, 0x1e, 0xe5, 0xbc, 0xbc, 0x03, 0xe1, 0x7d, 0x66, 0xe1, 0x17, 0x22, 0xa0, 0xbb,
	0x64, 0xa0, 0x66, 0x48, 0x0e, 0x57, 0x4b, 0x55, 0xf6, 0x66, 0x3b, 0xd7, 0x51, 0x8a, 0x15, 0x38,
	0xb7, 0xb4, 0x73, 0x97, 0xec, 0xd4, 0x9c, 0xc9, 0x7b, 0xe8, 0x3c, 0xd1, 0x07, 0x5f, 0x69, 0xec,
	0x8a, 0xf8, 0x76, 0xef, 0xaf, 0xd3, 0x7f, 0xa6, 0xfe, 0xed, 0x8e, 0xad, 0xc5, 0x77, 0x9d, 0xba,
	0xf8, 0x23, 0xe3, 0x98, 0x8c, 0xa1, 0x73, 0xc6, 0xc3, 0xff, 0xd3, 0x3f, 0xd0, 0xfa, 0xb7, 0x9d,
	0x95, 0x63, 0x53, 0x26, 0x23, 0xe8, 0x3c, 0xc5, 0x08, 0x97, 0x4c, 0xae, 0xdb, 0xce, 0x6a, 0x9b,
	0x72, 0x3b, 0xc7, 0x2b, 0x6d, 0x46, 0xeb, 0x9a, 0xfd, 0xe0, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xa3, 0x56, 0x02, 0x8a, 0x2f, 0x05, 0x00, 0x00,
}
