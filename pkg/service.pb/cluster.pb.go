// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cluster.proto

package openpitrix

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
import google_protobuf2 "github.com/golang/protobuf/ptypes/empty"
import google_protobuf3 "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Cluster struct {
	Id               *string                     `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Name             *string                     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Description      *string                     `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	AppId            *string                     `protobuf:"bytes,4,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	AppVersion       *string                     `protobuf:"bytes,5,opt,name=app_version,json=appVersion" json:"app_version,omitempty"`
	Status           *string                     `protobuf:"bytes,6,opt,name=status" json:"status,omitempty"`
	TransitionStatus *string                     `protobuf:"bytes,7,opt,name=transition_status,json=transitionStatus" json:"transition_status,omitempty"`
	Created          *google_protobuf3.Timestamp `protobuf:"bytes,8,opt,name=created" json:"created,omitempty"`
	LastModified     *google_protobuf3.Timestamp `protobuf:"bytes,9,opt,name=last_modified,json=lastModified" json:"last_modified,omitempty"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *Cluster) Reset()                    { *m = Cluster{} }
func (m *Cluster) String() string            { return proto.CompactTextString(m) }
func (*Cluster) ProtoMessage()               {}
func (*Cluster) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *Cluster) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Cluster) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Cluster) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *Cluster) GetAppId() string {
	if m != nil && m.AppId != nil {
		return *m.AppId
	}
	return ""
}

func (m *Cluster) GetAppVersion() string {
	if m != nil && m.AppVersion != nil {
		return *m.AppVersion
	}
	return ""
}

func (m *Cluster) GetStatus() string {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ""
}

func (m *Cluster) GetTransitionStatus() string {
	if m != nil && m.TransitionStatus != nil {
		return *m.TransitionStatus
	}
	return ""
}

func (m *Cluster) GetCreated() *google_protobuf3.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *Cluster) GetLastModified() *google_protobuf3.Timestamp {
	if m != nil {
		return m.LastModified
	}
	return nil
}

type ClusterNode struct {
	Id               *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	InstanceId       *string `protobuf:"bytes,2,req,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	Name             *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Description      *string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	ClusterId        *string `protobuf:"bytes,5,opt,name=cluster_id,json=clusterId" json:"cluster_id,omitempty"`
	PrivateIp        *string `protobuf:"bytes,6,opt,name=private_ip,json=privateIp" json:"private_ip,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ClusterNode) Reset()                    { *m = ClusterNode{} }
func (m *ClusterNode) String() string            { return proto.CompactTextString(m) }
func (*ClusterNode) ProtoMessage()               {}
func (*ClusterNode) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *ClusterNode) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *ClusterNode) GetInstanceId() string {
	if m != nil && m.InstanceId != nil {
		return *m.InstanceId
	}
	return ""
}

func (m *ClusterNode) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ClusterNode) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *ClusterNode) GetClusterId() string {
	if m != nil && m.ClusterId != nil {
		return *m.ClusterId
	}
	return ""
}

func (m *ClusterNode) GetPrivateIp() string {
	if m != nil && m.PrivateIp != nil {
		return *m.PrivateIp
	}
	return ""
}

type ClusterId struct {
	Id               *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ClusterId) Reset()                    { *m = ClusterId{} }
func (m *ClusterId) String() string            { return proto.CompactTextString(m) }
func (*ClusterId) ProtoMessage()               {}
func (*ClusterId) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *ClusterId) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

type ClusterListRequest struct {
	PageSize         *int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,def=10" json:"page_size,omitempty"`
	PageNumber       *int32 `protobuf:"varint,2,opt,name=page_number,json=pageNumber,def=1" json:"page_number,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ClusterListRequest) Reset()                    { *m = ClusterListRequest{} }
func (m *ClusterListRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterListRequest) ProtoMessage()               {}
func (*ClusterListRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

const Default_ClusterListRequest_PageSize int32 = 10
const Default_ClusterListRequest_PageNumber int32 = 1

func (m *ClusterListRequest) GetPageSize() int32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return Default_ClusterListRequest_PageSize
}

func (m *ClusterListRequest) GetPageNumber() int32 {
	if m != nil && m.PageNumber != nil {
		return *m.PageNumber
	}
	return Default_ClusterListRequest_PageNumber
}

type ClusterListResponse struct {
	TotalItems       *int32     `protobuf:"varint,1,opt,name=total_items,json=totalItems" json:"total_items,omitempty"`
	TotalPages       *int32     `protobuf:"varint,2,opt,name=total_pages,json=totalPages" json:"total_pages,omitempty"`
	PageSize         *int32     `protobuf:"varint,3,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	CurrentPage      *int32     `protobuf:"varint,4,opt,name=current_page,json=currentPage" json:"current_page,omitempty"`
	Items            []*Cluster `protobuf:"bytes,5,rep,name=items" json:"items,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *ClusterListResponse) Reset()                    { *m = ClusterListResponse{} }
func (m *ClusterListResponse) String() string            { return proto.CompactTextString(m) }
func (*ClusterListResponse) ProtoMessage()               {}
func (*ClusterListResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *ClusterListResponse) GetTotalItems() int32 {
	if m != nil && m.TotalItems != nil {
		return *m.TotalItems
	}
	return 0
}

func (m *ClusterListResponse) GetTotalPages() int32 {
	if m != nil && m.TotalPages != nil {
		return *m.TotalPages
	}
	return 0
}

func (m *ClusterListResponse) GetPageSize() int32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

func (m *ClusterListResponse) GetCurrentPage() int32 {
	if m != nil && m.CurrentPage != nil {
		return *m.CurrentPage
	}
	return 0
}

func (m *ClusterListResponse) GetItems() []*Cluster {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*Cluster)(nil), "openpitrix.Cluster")
	proto.RegisterType((*ClusterNode)(nil), "openpitrix.ClusterNode")
	proto.RegisterType((*ClusterId)(nil), "openpitrix.ClusterId")
	proto.RegisterType((*ClusterListRequest)(nil), "openpitrix.ClusterListRequest")
	proto.RegisterType((*ClusterListResponse)(nil), "openpitrix.ClusterListResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ClusterService service

type ClusterServiceClient interface {
	GetCluster(ctx context.Context, in *ClusterId, opts ...grpc.CallOption) (*Cluster, error)
	GetClusterList(ctx context.Context, in *ClusterListRequest, opts ...grpc.CallOption) (*ClusterListResponse, error)
	CreateCluster(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	UpdateCluster(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	DeleteCluster(ctx context.Context, in *ClusterId, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
}

type clusterServiceClient struct {
	cc *grpc.ClientConn
}

func NewClusterServiceClient(cc *grpc.ClientConn) ClusterServiceClient {
	return &clusterServiceClient{cc}
}

func (c *clusterServiceClient) GetCluster(ctx context.Context, in *ClusterId, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := grpc.Invoke(ctx, "/openpitrix.ClusterService/GetCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) GetClusterList(ctx context.Context, in *ClusterListRequest, opts ...grpc.CallOption) (*ClusterListResponse, error) {
	out := new(ClusterListResponse)
	err := grpc.Invoke(ctx, "/openpitrix.ClusterService/GetClusterList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) CreateCluster(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/openpitrix.ClusterService/CreateCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) UpdateCluster(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/openpitrix.ClusterService/UpdateCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) DeleteCluster(ctx context.Context, in *ClusterId, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/openpitrix.ClusterService/DeleteCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ClusterService service

type ClusterServiceServer interface {
	GetCluster(context.Context, *ClusterId) (*Cluster, error)
	GetClusterList(context.Context, *ClusterListRequest) (*ClusterListResponse, error)
	CreateCluster(context.Context, *Cluster) (*google_protobuf2.Empty, error)
	UpdateCluster(context.Context, *Cluster) (*google_protobuf2.Empty, error)
	DeleteCluster(context.Context, *ClusterId) (*google_protobuf2.Empty, error)
}

func RegisterClusterServiceServer(s *grpc.Server, srv ClusterServiceServer) {
	s.RegisterService(&_ClusterService_serviceDesc, srv)
}

func _ClusterService_GetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).GetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.ClusterService/GetCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).GetCluster(ctx, req.(*ClusterId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_GetClusterList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).GetClusterList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.ClusterService/GetClusterList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).GetClusterList(ctx, req.(*ClusterListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_CreateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).CreateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.ClusterService/CreateCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).CreateCluster(ctx, req.(*Cluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_UpdateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).UpdateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.ClusterService/UpdateCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).UpdateCluster(ctx, req.(*Cluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_DeleteCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).DeleteCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.ClusterService/DeleteCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).DeleteCluster(ctx, req.(*ClusterId))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClusterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openpitrix.ClusterService",
	HandlerType: (*ClusterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCluster",
			Handler:    _ClusterService_GetCluster_Handler,
		},
		{
			MethodName: "GetClusterList",
			Handler:    _ClusterService_GetClusterList_Handler,
		},
		{
			MethodName: "CreateCluster",
			Handler:    _ClusterService_CreateCluster_Handler,
		},
		{
			MethodName: "UpdateCluster",
			Handler:    _ClusterService_UpdateCluster_Handler,
		},
		{
			MethodName: "DeleteCluster",
			Handler:    _ClusterService_DeleteCluster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster.proto",
}

func init() { proto.RegisterFile("cluster.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 789 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0xb5, 0xeb, 0x6c, 0x52, 0xbf, 0x8d, 0xa3, 0x7a, 0xd2, 0xa4, 0x8b, 0x5b, 0xb0, 0xd9,
	0x0b, 0x26, 0xc5, 0xbb, 0xb1, 0x95, 0x03, 0xf5, 0x05, 0xb9, 0x01, 0x21, 0x4b, 0x50, 0xa2, 0x35,
	0x45, 0x6a, 0x51, 0x65, 0xa6, 0xbb, 0xaf, 0x66, 0xaa, 0xf5, 0xee, 0xb0, 0x33, 0x36, 0x25, 0x55,
	0x2f, 0x1c, 0x7b, 0x0c, 0xff, 0x11, 0x67, 0x6e, 0x5c, 0x7b, 0xe4, 0x0f, 0x41, 0x33, 0x3b, 0xc6,
	0x0e, 0xb6, 0x05, 0xea, 0x29, 0xd9, 0xef, 0xfb, 0xbe, 0xcf, 0x3c, 0x7f, 0xe7, 0x07, 0xd4, 0xe2,
	0x74, 0x26, 0x24, 0x16, 0x01, 0x2f, 0x72, 0x99, 0x13, 0xc8, 0x39, 0x66, 0x9c, 0xc9, 0x82, 0xbd,
	0x6c, 0xdc, 0x9d, 0xe4, 0xf9, 0x24, 0xc5, 0x90, 0x72, 0x16, 0xd2, 0x2c, 0xcb, 0x25, 0x95, 0x2c,
	0xcf, 0x44, 0xe9, 0x6c, 0x7c, 0xa2, 0xff, 0xc4, 0x9d, 0x09, 0x66, 0x1d, 0xf1, 0x33, 0x9d, 0x4c,
	0xb0, 0x08, 0x73, 0xae, 0x1d, 0x1b, 0xdc, 0x77, 0x0c, 0x4b, 0x7f, 0x3d, 0x9b, 0x3d, 0x0f, 0x71,
	0xca, 0xe5, 0x2f, 0xa6, 0xd8, 0xfc, 0x77, 0x51, 0xb2, 0x29, 0x0a, 0x49, 0xa7, 0xdc, 0x18, 0xea,
	0x6b, 0x40, 0xff, 0xad, 0x0d, 0x7b, 0xe7, 0xe5, 0xe8, 0xe4, 0x23, 0xb0, 0x59, 0xe2, 0x59, 0x2d,
	0xbb, 0x5d, 0x7d, 0x70, 0xfb, 0x6a, 0x70, 0xeb, 0x8d, 0x55, 0x8f, 0xd3, 0xce, 0xf7, 0xb4, 0x73,
	0x39, 0xe8, 0x3c, 0x39, 0xed, 0xdc, 0x7f, 0xfa, 0xea, 0xfe, 0xeb, 0xc8, 0x66, 0x09, 0x21, 0xb0,
	0x93, 0xd1, 0x29, 0x7a, 0x76, 0xcb, 0x6a, 0x57, 0x23, 0xfd, 0x3f, 0x69, 0x81, 0x9b, 0xa0, 0x88,
	0x0b, 0xa6, 0x67, 0xf7, 0x2a, 0xba, 0xb4, 0x2a, 0x91, 0x23, 0xd8, 0xa5, 0x9c, 0x8f, 0x59, 0xe2,
	0xed, 0xe8, 0xa2, 0x43, 0x39, 0x1f, 0x26, 0xa4, 0x09, 0xae, 0x92, 0xe7, 0x58, 0x08, 0xd5, 0xe8,
	0xe8, 0x1a, 0x50, 0xce, 0xbf, 0x2b, 0x15, 0x72, 0x0c, 0xbb, 0x42, 0x52, 0x39, 0x13, 0xde, 0xae,
	0xae, 0x99, 0x2f, 0x72, 0x0f, 0xea, 0xb2, 0xa0, 0x99, 0x60, 0x8a, 0x3e, 0x36, 0x96, 0x3d, 0x6d,
	0xb9, 0xb9, 0x2c, 0x8c, 0x4a, 0xf3, 0x19, 0xec, 0xc5, 0x05, 0x52, 0x89, 0x89, 0x77, 0xa3, 0x65,
	0xb5, 0xdd, 0x5e, 0x23, 0x28, 0xd3, 0x0a, 0x16, 0x69, 0x05, 0xdf, 0x2e, 0xd2, 0x8a, 0x16, 0x56,
	0xf2, 0x19, 0xd4, 0x52, 0x2a, 0xe4, 0x78, 0x9a, 0x27, 0xec, 0x39, 0xc3, 0xc4, 0xab, 0xfe, 0x67,
	0xef, 0xbe, 0x6a, 0xf8, 0xda, 0xf8, 0xfd, 0x3f, 0x2c, 0x70, 0x4d, 0xbc, 0x0f, 0xf3, 0x04, 0x49,
	0x7b, 0x25, 0x62, 0xef, 0x6a, 0x70, 0xf4, 0xc6, 0x22, 0x71, 0x9a, 0x5d, 0xcb, 0xf8, 0xd3, 0x32,
	0xe3, 0x26, 0xb8, 0x2c, 0x13, 0x92, 0x66, 0x31, 0xaa, 0xc8, 0x6c, 0xd5, 0x12, 0xc1, 0x42, 0x1a,
	0x2e, 0x37, 0xa1, 0xb2, 0x7d, 0x13, 0x76, 0xd6, 0x37, 0xe1, 0x7d, 0x00, 0x73, 0x52, 0x15, 0xb5,
	0x0c, 0xbb, 0x6a, 0x94, 0x61, 0xa2, 0xca, 0xbc, 0x60, 0x73, 0x2a, 0x71, 0xcc, 0xb8, 0xc9, 0xbb,
	0x6a, 0x94, 0x21, 0xf7, 0xcf, 0xa0, 0x7a, 0xfe, 0x8f, 0xf7, 0xff, 0x1e, 0x17, 0xff, 0x31, 0x10,
	0xd3, 0xf5, 0x15, 0x13, 0x32, 0xc2, 0x9f, 0x66, 0x28, 0x24, 0x69, 0x42, 0x95, 0xd3, 0x09, 0x8e,
	0x05, 0xbb, 0x44, 0xcf, 0x6a, 0x59, 0x6d, 0xa7, 0x6f, 0x77, 0x4f, 0xa3, 0x1b, 0x4a, 0x1c, 0xb1,
	0x4b, 0x24, 0x3e, 0xb8, 0xda, 0x90, 0xcd, 0xa6, 0xcf, 0xb0, 0xd0, 0x87, 0xcd, 0xe9, 0x5b, 0xdd,
	0x08, 0x94, 0xfa, 0x50, 0x8b, 0xfe, 0xef, 0x16, 0x1c, 0x5e, 0x63, 0x0b, 0x9e, 0x67, 0x02, 0x55,
	0x7a, 0x32, 0x97, 0x34, 0x1d, 0x33, 0x89, 0x53, 0x51, 0xe2, 0x23, 0xd0, 0xd2, 0x50, 0x29, 0x4b,
	0x83, 0x82, 0x89, 0x12, 0x6e, 0x0c, 0x17, 0x4a, 0x21, 0x77, 0x56, 0xc7, 0xab, 0xe8, 0xf2, 0x72,
	0xb4, 0x0f, 0x61, 0x3f, 0x9e, 0x15, 0x05, 0x66, 0x52, 0xf7, 0xeb, 0xa0, 0x9d, 0xc8, 0x35, 0x9a,
	0x02, 0x90, 0x8f, 0xc1, 0x29, 0xd7, 0x76, 0x5a, 0x95, 0xb6, 0xdb, 0x3b, 0x0c, 0x96, 0x2f, 0x42,
	0x60, 0x26, 0x8e, 0x4a, 0x47, 0xef, 0x6d, 0x05, 0x0e, 0x8c, 0x34, 0xc2, 0x62, 0xce, 0x62, 0x24,
	0x23, 0x80, 0x2f, 0x51, 0x2e, 0x2e, 0xe6, 0xd1, 0x86, 0xe6, 0x61, 0xd2, 0xd8, 0xc4, 0xf4, 0xdf,
	0xfb, 0xf5, 0xcf, 0xbf, 0x7e, 0xb3, 0x0f, 0x49, 0x3d, 0x9c, 0x77, 0x43, 0xb3, 0xb1, 0x22, 0x7c,
	0xc5, 0x92, 0xd7, 0x64, 0x02, 0x07, 0x4b, 0xa8, 0x8a, 0x8b, 0x7c, 0xb0, 0x81, 0xb0, 0xb2, 0x47,
	0x8d, 0xe6, 0xd6, 0x7a, 0x99, 0xb3, 0x7f, 0x4b, 0xaf, 0x76, 0x40, 0xf6, 0x57, 0x57, 0x23, 0x8f,
	0xa0, 0x76, 0xae, 0x6f, 0xd0, 0xe2, 0x07, 0x6c, 0x9a, 0xb4, 0x71, 0xbc, 0x76, 0x8b, 0xbe, 0x50,
	0x8f, 0x99, 0x7f, 0x5b, 0x33, 0xeb, 0xfe, 0x35, 0x66, 0xdf, 0x3a, 0x21, 0x4f, 0xa0, 0xf6, 0x88,
	0x27, 0xef, 0x8a, 0xbd, 0xab, 0xb1, 0xc7, 0xfe, 0x7a, 0x30, 0x8a, 0xfd, 0x18, 0x6a, 0x9f, 0x63,
	0x8a, 0x4b, 0xf6, 0x96, 0xcc, 0xb7, 0xd1, 0x4d, 0xec, 0x27, 0xeb, 0xf4, 0x07, 0x3f, 0x5c, 0x0d,
	0x9e, 0x92, 0x33, 0xff, 0x1e, 0x90, 0x6f, 0x38, 0x66, 0x17, 0xac, 0x40, 0xf6, 0xb2, 0x75, 0x51,
	0xe4, 0x2f, 0x30, 0x96, 0xe4, 0xe8, 0x47, 0x29, 0xb9, 0xe8, 0x87, 0xe1, 0xca, 0x6a, 0x2c, 0xef,
	0x39, 0xa7, 0xc1, 0x69, 0xd0, 0x3d, 0xb1, 0xac, 0xde, 0x4d, 0xca, 0x79, 0xca, 0x62, 0xfd, 0x68,
	0x87, 0x2f, 0x44, 0x9e, 0xf5, 0xd7, 0x94, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x81, 0x52, 0x8d,
	0xcb, 0x7d, 0x06, 0x00, 0x00,
}
