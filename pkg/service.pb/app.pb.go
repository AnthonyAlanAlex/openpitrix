// Code generated by protoc-gen-go. DO NOT EDIT.
// source: app.proto

package openpitrix

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
import google_protobuf2 "github.com/golang/protobuf/ptypes/empty"
import google_protobuf3 "github.com/golang/protobuf/ptypes/timestamp"
import _ "github.com/mwitkow/go-proto-validators"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type App struct {
	Id               *string                     `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Name             *string                     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Description      *string                     `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	RepoId           *string                     `protobuf:"bytes,4,opt,name=repo_id,json=repoId" json:"repo_id,omitempty"`
	Created          *google_protobuf3.Timestamp `protobuf:"bytes,5,opt,name=created" json:"created,omitempty"`
	LastModified     *google_protobuf3.Timestamp `protobuf:"bytes,6,opt,name=last_modified,json=lastModified" json:"last_modified,omitempty"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *App) Reset()                    { *m = App{} }
func (m *App) String() string            { return proto.CompactTextString(m) }
func (*App) ProtoMessage()               {}
func (*App) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *App) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *App) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *App) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *App) GetRepoId() string {
	if m != nil && m.RepoId != nil {
		return *m.RepoId
	}
	return ""
}

func (m *App) GetCreated() *google_protobuf3.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *App) GetLastModified() *google_protobuf3.Timestamp {
	if m != nil {
		return m.LastModified
	}
	return nil
}

type AppId struct {
	Id               *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AppId) Reset()                    { *m = AppId{} }
func (m *AppId) String() string            { return proto.CompactTextString(m) }
func (*AppId) ProtoMessage()               {}
func (*AppId) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *AppId) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

type AppListRequest struct {
	PageSize         *int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,def=10" json:"page_size,omitempty"`
	PageNumber       *int32 `protobuf:"varint,2,opt,name=page_number,json=pageNumber,def=1" json:"page_number,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *AppListRequest) Reset()                    { *m = AppListRequest{} }
func (m *AppListRequest) String() string            { return proto.CompactTextString(m) }
func (*AppListRequest) ProtoMessage()               {}
func (*AppListRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

const Default_AppListRequest_PageSize int32 = 10
const Default_AppListRequest_PageNumber int32 = 1

func (m *AppListRequest) GetPageSize() int32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return Default_AppListRequest_PageSize
}

func (m *AppListRequest) GetPageNumber() int32 {
	if m != nil && m.PageNumber != nil {
		return *m.PageNumber
	}
	return Default_AppListRequest_PageNumber
}

type AppListResponse struct {
	TotalItems       *int32 `protobuf:"varint,1,opt,name=total_items,json=totalItems" json:"total_items,omitempty"`
	TotalPages       *int32 `protobuf:"varint,2,opt,name=total_pages,json=totalPages" json:"total_pages,omitempty"`
	PageSize         *int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	CurrentPage      *int32 `protobuf:"varint,4,opt,name=current_page,json=currentPage" json:"current_page,omitempty"`
	Items            []*App `protobuf:"bytes,5,rep,name=items" json:"items,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *AppListResponse) Reset()                    { *m = AppListResponse{} }
func (m *AppListResponse) String() string            { return proto.CompactTextString(m) }
func (*AppListResponse) ProtoMessage()               {}
func (*AppListResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *AppListResponse) GetTotalItems() int32 {
	if m != nil && m.TotalItems != nil {
		return *m.TotalItems
	}
	return 0
}

func (m *AppListResponse) GetTotalPages() int32 {
	if m != nil && m.TotalPages != nil {
		return *m.TotalPages
	}
	return 0
}

func (m *AppListResponse) GetPageSize() int32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

func (m *AppListResponse) GetCurrentPage() int32 {
	if m != nil && m.CurrentPage != nil {
		return *m.CurrentPage
	}
	return 0
}

func (m *AppListResponse) GetItems() []*App {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*App)(nil), "openpitrix.App")
	proto.RegisterType((*AppId)(nil), "openpitrix.AppId")
	proto.RegisterType((*AppListRequest)(nil), "openpitrix.AppListRequest")
	proto.RegisterType((*AppListResponse)(nil), "openpitrix.AppListResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AppService service

type AppServiceClient interface {
	GetApp(ctx context.Context, in *AppId, opts ...grpc.CallOption) (*App, error)
	GetAppList(ctx context.Context, in *AppListRequest, opts ...grpc.CallOption) (*AppListResponse, error)
	CreateApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	UpdateApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	DeleteApp(ctx context.Context, in *AppId, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
}

type appServiceClient struct {
	cc *grpc.ClientConn
}

func NewAppServiceClient(cc *grpc.ClientConn) AppServiceClient {
	return &appServiceClient{cc}
}

func (c *appServiceClient) GetApp(ctx context.Context, in *AppId, opts ...grpc.CallOption) (*App, error) {
	out := new(App)
	err := grpc.Invoke(ctx, "/openpitrix.AppService/GetApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) GetAppList(ctx context.Context, in *AppListRequest, opts ...grpc.CallOption) (*AppListResponse, error) {
	out := new(AppListResponse)
	err := grpc.Invoke(ctx, "/openpitrix.AppService/GetAppList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) CreateApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/openpitrix.AppService/CreateApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) UpdateApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/openpitrix.AppService/UpdateApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) DeleteApp(ctx context.Context, in *AppId, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/openpitrix.AppService/DeleteApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AppService service

type AppServiceServer interface {
	GetApp(context.Context, *AppId) (*App, error)
	GetAppList(context.Context, *AppListRequest) (*AppListResponse, error)
	CreateApp(context.Context, *App) (*google_protobuf2.Empty, error)
	UpdateApp(context.Context, *App) (*google_protobuf2.Empty, error)
	DeleteApp(context.Context, *AppId) (*google_protobuf2.Empty, error)
}

func RegisterAppServiceServer(s *grpc.Server, srv AppServiceServer) {
	s.RegisterService(&_AppService_serviceDesc, srv)
}

func _AppService_GetApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AppService/GetApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetApp(ctx, req.(*AppId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_GetAppList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetAppList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AppService/GetAppList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetAppList(ctx, req.(*AppListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).CreateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AppService/CreateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).CreateApp(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_UpdateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).UpdateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AppService/UpdateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).UpdateApp(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_DeleteApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).DeleteApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AppService/DeleteApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).DeleteApp(ctx, req.(*AppId))
	}
	return interceptor(ctx, in, info, handler)
}

var _AppService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openpitrix.AppService",
	HandlerType: (*AppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetApp",
			Handler:    _AppService_GetApp_Handler,
		},
		{
			MethodName: "GetAppList",
			Handler:    _AppService_GetAppList_Handler,
		},
		{
			MethodName: "CreateApp",
			Handler:    _AppService_CreateApp_Handler,
		},
		{
			MethodName: "UpdateApp",
			Handler:    _AppService_UpdateApp_Handler,
		},
		{
			MethodName: "DeleteApp",
			Handler:    _AppService_DeleteApp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app.proto",
}

func init() { proto.RegisterFile("app.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 694 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xd1, 0x4e, 0xdb, 0x48,
	0x14, 0x86, 0xe5, 0x04, 0x03, 0x99, 0xc0, 0x02, 0xb3, 0x0b, 0x6b, 0x99, 0x95, 0x92, 0xb5, 0x76,
	0xa5, 0x28, 0xad, 0xed, 0x24, 0x45, 0x55, 0x9b, 0x9b, 0x2a, 0xd0, 0xaa, 0x8a, 0x54, 0x28, 0x32,
	0x45, 0x95, 0x5a, 0xd1, 0x74, 0xb0, 0x07, 0x33, 0x34, 0xf6, 0x9c, 0x7a, 0x26, 0x40, 0x41, 0xdc,
	0xf4, 0x11, 0xda, 0x3e, 0x4d, 0x5f, 0xa3, 0x0f, 0x50, 0xa9, 0xea, 0x3b, 0xf4, 0xb6, 0xf2, 0xd8,
	0x81, 0x10, 0xa8, 0x2a, 0xae, 0x62, 0xff, 0xe7, 0x3f, 0xdf, 0x9c, 0xf9, 0x33, 0x63, 0x54, 0x22,
	0x00, 0x0e, 0x24, 0x5c, 0x72, 0x8c, 0x38, 0xd0, 0x18, 0x98, 0x4c, 0xd8, 0xb1, 0xf9, 0x4f, 0xc8,
	0x79, 0xd8, 0xa7, 0x2e, 0x01, 0xe6, 0x92, 0x38, 0xe6, 0x92, 0x48, 0xc6, 0x63, 0x91, 0x39, 0xcd,
	0xdb, 0xea, 0xc7, 0xb7, 0x43, 0x1a, 0xdb, 0xe2, 0x88, 0x84, 0x21, 0x4d, 0x5c, 0x0e, 0xca, 0x71,
	0x8d, 0x7b, 0x39, 0x67, 0xa9, 0xb7, 0xdd, 0xc1, 0x9e, 0x4b, 0x23, 0x90, 0xef, 0xf2, 0x62, 0x65,
	0xbc, 0x28, 0x59, 0x44, 0x85, 0x24, 0x51, 0x3e, 0x95, 0x79, 0x37, 0x64, 0x72, 0x7f, 0xb0, 0xeb,
	0xf8, 0x3c, 0x72, 0xa3, 0x23, 0x26, 0xdf, 0xf0, 0x23, 0x37, 0xe4, 0xb6, 0x2a, 0xda, 0x87, 0xa4,
	0xcf, 0x02, 0x22, 0x79, 0x22, 0xdc, 0xf3, 0xc7, 0xbc, 0x6f, 0xe1, 0xca, 0x20, 0xd6, 0x0f, 0x0d,
	0x15, 0x3b, 0x00, 0xb8, 0x8e, 0x0a, 0x2c, 0x30, 0xb4, 0x6a, 0xa1, 0x56, 0x5a, 0x35, 0xbf, 0x7d,
	0xad, 0x2c, 0xa1, 0xbf, 0x5e, 0x11, 0x00, 0xfb, 0x25, 0xb1, 0x4f, 0x3a, 0xf6, 0x8b, 0x86, 0x7d,
	0x7f, 0xe7, 0xf4, 0xde, 0xd9, 0x7f, 0x5e, 0x81, 0x05, 0x18, 0xa3, 0x89, 0x98, 0x44, 0xd4, 0x28,
	0x54, 0xb5, 0x5a, 0xc9, 0x53, 0xcf, 0xb8, 0x8a, 0xca, 0x01, 0x15, 0x7e, 0xc2, 0xd4, 0x96, 0x8d,
	0xa2, 0x2a, 0x8d, 0x4a, 0xf8, 0x6f, 0x34, 0x95, 0x50, 0xe0, 0x3d, 0x16, 0x18, 0x13, 0xaa, 0x3a,
	0x99, 0xbe, 0x76, 0x03, 0xbc, 0x82, 0xa6, 0xfc, 0x84, 0x12, 0x49, 0x03, 0x43, 0xaf, 0x6a, 0xb5,
	0x72, 0xcb, 0x74, 0xb2, 0x00, 0x9c, 0x61, 0x00, 0xce, 0xb3, 0x61, 0x00, 0xde, 0xd0, 0x8a, 0x1f,
	0xa0, 0xd9, 0x3e, 0x11, 0xb2, 0x17, 0xf1, 0x80, 0xed, 0x31, 0x1a, 0x18, 0x93, 0xbf, 0xed, 0x9d,
	0x49, 0x1b, 0xd6, 0x73, 0xbf, 0x75, 0x07, 0xe9, 0x1d, 0x80, 0x6e, 0x70, 0x93, 0xad, 0x5b, 0xdb,
	0xe8, 0x8f, 0x0e, 0xc0, 0x13, 0x26, 0xa4, 0x47, 0xdf, 0x0e, 0xa8, 0x90, 0xb8, 0x82, 0x4a, 0x40,
	0x42, 0xda, 0x13, 0xec, 0x84, 0x1a, 0x5a, 0x55, 0xab, 0xe9, 0xed, 0x42, 0xb3, 0xe1, 0x4d, 0xa7,
	0xe2, 0x16, 0x3b, 0xa1, 0xd8, 0x42, 0x65, 0x65, 0x88, 0x07, 0xd1, 0x2e, 0x4d, 0x54, 0x68, 0x7a,
	0x5b, 0x6b, 0x7a, 0x28, 0x55, 0x37, 0x94, 0x68, 0x7d, 0xd6, 0xd0, 0xdc, 0x39, 0x57, 0x00, 0x8f,
	0x05, 0xc5, 0x15, 0x54, 0x96, 0x5c, 0x92, 0x7e, 0x8f, 0x49, 0x1a, 0x89, 0x0c, 0xed, 0x21, 0x25,
	0x75, 0x53, 0xe5, 0xc2, 0x90, 0x82, 0x44, 0x06, 0xce, 0x0d, 0x9b, 0xa9, 0x82, 0x97, 0x47, 0x47,
	0x2b, 0xaa, 0xf2, 0xc5, 0x58, 0xff, 0xa2, 0x19, 0x7f, 0x90, 0x24, 0x34, 0x96, 0xaa, 0x5f, 0xfd,
	0x27, 0xba, 0x57, 0xce, 0xb5, 0x14, 0x80, 0xff, 0x47, 0x7a, 0xb6, 0xb6, 0x5e, 0x2d, 0xd6, 0xca,
	0xad, 0x39, 0xe7, 0xe2, 0x32, 0x38, 0x1d, 0x00, 0x2f, 0xab, 0xb6, 0x3e, 0x15, 0x11, 0xea, 0x00,
	0x6c, 0xd1, 0xe4, 0x90, 0xf9, 0x14, 0xaf, 0xa1, 0xc9, 0xc7, 0x54, 0xa6, 0x67, 0x6a, 0x61, 0xac,
	0xa1, 0x1b, 0x98, 0xe3, 0x0c, 0x6b, 0xf1, 0xfd, 0x97, 0xef, 0x1f, 0x0b, 0x73, 0x78, 0xd6, 0x3d,
	0x6c, 0xba, 0x04, 0x40, 0xb8, 0xa7, 0x2c, 0x38, 0xc3, 0xcf, 0x11, 0xca, 0x20, 0x69, 0x24, 0xd8,
	0x1c, 0xeb, 0x1a, 0xc9, 0xdf, 0x5c, 0xbe, 0xb6, 0x96, 0x65, 0x68, 0xcd, 0x2b, 0x3a, 0xc2, 0xd3,
	0x43, 0x3a, 0xee, 0xa2, 0xd2, 0x9a, 0x3a, 0x41, 0xe9, 0x80, 0xe3, 0xd3, 0x98, 0x4b, 0x57, 0x4e,
	0xcf, 0xa3, 0xf4, 0x5e, 0x5a, 0x7f, 0x2a, 0xce, 0xac, 0x75, 0xce, 0x69, 0x6b, 0x75, 0xbc, 0x81,
	0x4a, 0xdb, 0x10, 0xdc, 0x14, 0x65, 0x28, 0x14, 0xb6, 0x2e, 0x6f, 0x38, 0xe5, 0xad, 0xa3, 0xd2,
	0x43, 0xda, 0xa7, 0x19, 0xef, 0x9a, 0xec, 0x7e, 0x45, 0xcc, 0x23, 0xac, 0x5f, 0x26, 0xae, 0xbe,
	0xfe, 0xd0, 0xd9, 0xc1, 0x2b, 0xd6, 0x2d, 0x84, 0x9f, 0x02, 0x8d, 0x37, 0x59, 0x42, 0xd9, 0x71,
	0x75, 0x33, 0xe1, 0x07, 0xd4, 0x97, 0x78, 0x71, 0x5f, 0x4a, 0x10, 0x6d, 0xd7, 0x1d, 0x59, 0x85,
	0xf1, 0x96, 0xde, 0x70, 0x1a, 0x4e, 0xb3, 0xae, 0x69, 0xad, 0x79, 0x02, 0xd0, 0x67, 0xbe, 0xfa,
	0x56, 0xb8, 0x07, 0x82, 0xc7, 0xed, 0x2b, 0xca, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4b, 0x1b,
	0x57, 0x42, 0x28, 0x05, 0x00, 0x00,
}
