// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AppRuntimeLabel app runtime label
// swagger:model AppRuntimeLabel

type AppRuntimeLabel struct {

	// app runtime id
	// Max Length: 12
	// Min Length: 12
	// Pattern: rt-[a-zA-Z0-9]{9}
	AppRuntimeID string `json:"app_runtime_id,omitempty"`

	// label key
	LabelKey string `json:"label_key,omitempty"`

	// label value
	LabelValue string `json:"label_value,omitempty"`
}

/* polymorph AppRuntimeLabel app_runtime_id false */

/* polymorph AppRuntimeLabel label_key false */

/* polymorph AppRuntimeLabel label_value false */

// Validate validates this app runtime label
func (m *AppRuntimeLabel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppRuntimeID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppRuntimeLabel) validateAppRuntimeID(formats strfmt.Registry) error {

	if swag.IsZero(m.AppRuntimeID) { // not required
		return nil
	}

	if err := validate.MinLength("app_runtime_id", "body", string(m.AppRuntimeID), 12); err != nil {
		return err
	}

	if err := validate.MaxLength("app_runtime_id", "body", string(m.AppRuntimeID), 12); err != nil {
		return err
	}

	if err := validate.Pattern("app_runtime_id", "body", string(m.AppRuntimeID), `rt-[a-zA-Z0-9]{9}`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AppRuntimeLabel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppRuntimeLabel) UnmarshalBinary(b []byte) error {
	var res AppRuntimeLabel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
