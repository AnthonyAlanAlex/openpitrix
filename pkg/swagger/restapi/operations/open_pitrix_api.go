// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"openpitrix.io/openpitrix/pkg/swagger/restapi/operations/app_runtimes"
	"openpitrix.io/openpitrix/pkg/swagger/restapi/operations/apps"
	"openpitrix.io/openpitrix/pkg/swagger/restapi/operations/clusters"
	"openpitrix.io/openpitrix/pkg/swagger/restapi/operations/repos"
)

// NewOpenPitrixAPI creates a new OpenPitrix instance
func NewOpenPitrixAPI(spec *loads.Document) *OpenPitrixAPI {
	return &OpenPitrixAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		AppRuntimesDeleteAppruntimesAppRuntimeIDHandler: app_runtimes.DeleteAppruntimesAppRuntimeIDHandlerFunc(func(params app_runtimes.DeleteAppruntimesAppRuntimeIDParams) middleware.Responder {
			return middleware.NotImplemented("operation AppRuntimesDeleteAppruntimesAppRuntimeID has not yet been implemented")
		}),
		AppsDeleteAppsAppIDHandler: apps.DeleteAppsAppIDHandlerFunc(func(params apps.DeleteAppsAppIDParams) middleware.Responder {
			return middleware.NotImplemented("operation AppsDeleteAppsAppID has not yet been implemented")
		}),
		ClustersDeleteClustersClusterIDHandler: clusters.DeleteClustersClusterIDHandlerFunc(func(params clusters.DeleteClustersClusterIDParams) middleware.Responder {
			return middleware.NotImplemented("operation ClustersDeleteClustersClusterID has not yet been implemented")
		}),
		ReposDeleteReposRepoIDHandler: repos.DeleteReposRepoIDHandlerFunc(func(params repos.DeleteReposRepoIDParams) middleware.Responder {
			return middleware.NotImplemented("operation ReposDeleteReposRepoID has not yet been implemented")
		}),
		AppRuntimesGetAppruntimesHandler: app_runtimes.GetAppruntimesHandlerFunc(func(params app_runtimes.GetAppruntimesParams) middleware.Responder {
			return middleware.NotImplemented("operation AppRuntimesGetAppruntimes has not yet been implemented")
		}),
		AppRuntimesGetAppruntimesAppRuntimeIDHandler: app_runtimes.GetAppruntimesAppRuntimeIDHandlerFunc(func(params app_runtimes.GetAppruntimesAppRuntimeIDParams) middleware.Responder {
			return middleware.NotImplemented("operation AppRuntimesGetAppruntimesAppRuntimeID has not yet been implemented")
		}),
		AppsGetAppsHandler: apps.GetAppsHandlerFunc(func(params apps.GetAppsParams) middleware.Responder {
			return middleware.NotImplemented("operation AppsGetApps has not yet been implemented")
		}),
		AppsGetAppsAppIDHandler: apps.GetAppsAppIDHandlerFunc(func(params apps.GetAppsAppIDParams) middleware.Responder {
			return middleware.NotImplemented("operation AppsGetAppsAppID has not yet been implemented")
		}),
		ClustersGetClustersHandler: clusters.GetClustersHandlerFunc(func(params clusters.GetClustersParams) middleware.Responder {
			return middleware.NotImplemented("operation ClustersGetClusters has not yet been implemented")
		}),
		ClustersGetClustersClusterIDHandler: clusters.GetClustersClusterIDHandlerFunc(func(params clusters.GetClustersClusterIDParams) middleware.Responder {
			return middleware.NotImplemented("operation ClustersGetClustersClusterID has not yet been implemented")
		}),
		ReposGetReposHandler: repos.GetReposHandlerFunc(func(params repos.GetReposParams) middleware.Responder {
			return middleware.NotImplemented("operation ReposGetRepos has not yet been implemented")
		}),
		ReposGetReposRepoIDHandler: repos.GetReposRepoIDHandlerFunc(func(params repos.GetReposRepoIDParams) middleware.Responder {
			return middleware.NotImplemented("operation ReposGetReposRepoID has not yet been implemented")
		}),
		AppRuntimesPostAppruntimesHandler: app_runtimes.PostAppruntimesHandlerFunc(func(params app_runtimes.PostAppruntimesParams) middleware.Responder {
			return middleware.NotImplemented("operation AppRuntimesPostAppruntimes has not yet been implemented")
		}),
		AppsPostAppsHandler: apps.PostAppsHandlerFunc(func(params apps.PostAppsParams) middleware.Responder {
			return middleware.NotImplemented("operation AppsPostApps has not yet been implemented")
		}),
		ClustersPostClustersHandler: clusters.PostClustersHandlerFunc(func(params clusters.PostClustersParams) middleware.Responder {
			return middleware.NotImplemented("operation ClustersPostClusters has not yet been implemented")
		}),
		ReposPostReposHandler: repos.PostReposHandlerFunc(func(params repos.PostReposParams) middleware.Responder {
			return middleware.NotImplemented("operation ReposPostRepos has not yet been implemented")
		}),
	}
}

/*OpenPitrixAPI An open platform to package and deploy applications into multiple environment such as QingCloud, AWS, Kubernetes etc. */
type OpenPitrixAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// AppRuntimesDeleteAppruntimesAppRuntimeIDHandler sets the operation handler for the delete appruntimes app runtime ID operation
	AppRuntimesDeleteAppruntimesAppRuntimeIDHandler app_runtimes.DeleteAppruntimesAppRuntimeIDHandler
	// AppsDeleteAppsAppIDHandler sets the operation handler for the delete apps app ID operation
	AppsDeleteAppsAppIDHandler apps.DeleteAppsAppIDHandler
	// ClustersDeleteClustersClusterIDHandler sets the operation handler for the delete clusters cluster ID operation
	ClustersDeleteClustersClusterIDHandler clusters.DeleteClustersClusterIDHandler
	// ReposDeleteReposRepoIDHandler sets the operation handler for the delete repos repo ID operation
	ReposDeleteReposRepoIDHandler repos.DeleteReposRepoIDHandler
	// AppRuntimesGetAppruntimesHandler sets the operation handler for the get appruntimes operation
	AppRuntimesGetAppruntimesHandler app_runtimes.GetAppruntimesHandler
	// AppRuntimesGetAppruntimesAppRuntimeIDHandler sets the operation handler for the get appruntimes app runtime ID operation
	AppRuntimesGetAppruntimesAppRuntimeIDHandler app_runtimes.GetAppruntimesAppRuntimeIDHandler
	// AppsGetAppsHandler sets the operation handler for the get apps operation
	AppsGetAppsHandler apps.GetAppsHandler
	// AppsGetAppsAppIDHandler sets the operation handler for the get apps app ID operation
	AppsGetAppsAppIDHandler apps.GetAppsAppIDHandler
	// ClustersGetClustersHandler sets the operation handler for the get clusters operation
	ClustersGetClustersHandler clusters.GetClustersHandler
	// ClustersGetClustersClusterIDHandler sets the operation handler for the get clusters cluster ID operation
	ClustersGetClustersClusterIDHandler clusters.GetClustersClusterIDHandler
	// ReposGetReposHandler sets the operation handler for the get repos operation
	ReposGetReposHandler repos.GetReposHandler
	// ReposGetReposRepoIDHandler sets the operation handler for the get repos repo ID operation
	ReposGetReposRepoIDHandler repos.GetReposRepoIDHandler
	// AppRuntimesPostAppruntimesHandler sets the operation handler for the post appruntimes operation
	AppRuntimesPostAppruntimesHandler app_runtimes.PostAppruntimesHandler
	// AppsPostAppsHandler sets the operation handler for the post apps operation
	AppsPostAppsHandler apps.PostAppsHandler
	// ClustersPostClustersHandler sets the operation handler for the post clusters operation
	ClustersPostClustersHandler clusters.PostClustersHandler
	// ReposPostReposHandler sets the operation handler for the post repos operation
	ReposPostReposHandler repos.PostReposHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *OpenPitrixAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *OpenPitrixAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *OpenPitrixAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *OpenPitrixAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *OpenPitrixAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *OpenPitrixAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *OpenPitrixAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the OpenPitrixAPI
func (o *OpenPitrixAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.AppRuntimesDeleteAppruntimesAppRuntimeIDHandler == nil {
		unregistered = append(unregistered, "app_runtimes.DeleteAppruntimesAppRuntimeIDHandler")
	}

	if o.AppsDeleteAppsAppIDHandler == nil {
		unregistered = append(unregistered, "apps.DeleteAppsAppIDHandler")
	}

	if o.ClustersDeleteClustersClusterIDHandler == nil {
		unregistered = append(unregistered, "clusters.DeleteClustersClusterIDHandler")
	}

	if o.ReposDeleteReposRepoIDHandler == nil {
		unregistered = append(unregistered, "repos.DeleteReposRepoIDHandler")
	}

	if o.AppRuntimesGetAppruntimesHandler == nil {
		unregistered = append(unregistered, "app_runtimes.GetAppruntimesHandler")
	}

	if o.AppRuntimesGetAppruntimesAppRuntimeIDHandler == nil {
		unregistered = append(unregistered, "app_runtimes.GetAppruntimesAppRuntimeIDHandler")
	}

	if o.AppsGetAppsHandler == nil {
		unregistered = append(unregistered, "apps.GetAppsHandler")
	}

	if o.AppsGetAppsAppIDHandler == nil {
		unregistered = append(unregistered, "apps.GetAppsAppIDHandler")
	}

	if o.ClustersGetClustersHandler == nil {
		unregistered = append(unregistered, "clusters.GetClustersHandler")
	}

	if o.ClustersGetClustersClusterIDHandler == nil {
		unregistered = append(unregistered, "clusters.GetClustersClusterIDHandler")
	}

	if o.ReposGetReposHandler == nil {
		unregistered = append(unregistered, "repos.GetReposHandler")
	}

	if o.ReposGetReposRepoIDHandler == nil {
		unregistered = append(unregistered, "repos.GetReposRepoIDHandler")
	}

	if o.AppRuntimesPostAppruntimesHandler == nil {
		unregistered = append(unregistered, "app_runtimes.PostAppruntimesHandler")
	}

	if o.AppsPostAppsHandler == nil {
		unregistered = append(unregistered, "apps.PostAppsHandler")
	}

	if o.ClustersPostClustersHandler == nil {
		unregistered = append(unregistered, "clusters.PostClustersHandler")
	}

	if o.ReposPostReposHandler == nil {
		unregistered = append(unregistered, "repos.PostReposHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *OpenPitrixAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *OpenPitrixAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// Authorizer returns the registered authorizer
func (o *OpenPitrixAPI) Authorizer() runtime.Authorizer {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *OpenPitrixAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *OpenPitrixAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *OpenPitrixAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the open pitrix API
func (o *OpenPitrixAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *OpenPitrixAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/appruntimes/{appRuntimeId}"] = app_runtimes.NewDeleteAppruntimesAppRuntimeID(o.context, o.AppRuntimesDeleteAppruntimesAppRuntimeIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apps/{appId}"] = apps.NewDeleteAppsAppID(o.context, o.AppsDeleteAppsAppIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/clusters/{clusterId}"] = clusters.NewDeleteClustersClusterID(o.context, o.ClustersDeleteClustersClusterIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/repos/{repoId}"] = repos.NewDeleteReposRepoID(o.context, o.ReposDeleteReposRepoIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/appruntimes"] = app_runtimes.NewGetAppruntimes(o.context, o.AppRuntimesGetAppruntimesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/appruntimes/{appRuntimeId}"] = app_runtimes.NewGetAppruntimesAppRuntimeID(o.context, o.AppRuntimesGetAppruntimesAppRuntimeIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apps"] = apps.NewGetApps(o.context, o.AppsGetAppsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apps/{appId}"] = apps.NewGetAppsAppID(o.context, o.AppsGetAppsAppIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/clusters"] = clusters.NewGetClusters(o.context, o.ClustersGetClustersHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/clusters/{clusterId}"] = clusters.NewGetClustersClusterID(o.context, o.ClustersGetClustersClusterIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos"] = repos.NewGetRepos(o.context, o.ReposGetReposHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{repoId}"] = repos.NewGetReposRepoID(o.context, o.ReposGetReposRepoIDHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/appruntimes"] = app_runtimes.NewPostAppruntimes(o.context, o.AppRuntimesPostAppruntimesHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apps"] = apps.NewPostApps(o.context, o.AppsPostAppsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/clusters"] = clusters.NewPostClusters(o.context, o.ClustersPostClustersHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/repos"] = repos.NewPostRepos(o.context, o.ReposPostReposHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *OpenPitrixAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middelware as you see fit
func (o *OpenPitrixAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}
