// Code generated by go-swagger; DO NOT EDIT.

package app_runtimes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new app runtimes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for app runtimes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteAppruntimesAppRuntimeID deletes an app runtime

Delete a single app runtime identified via its id
*/
func (a *Client) DeleteAppruntimesAppRuntimeID(params *DeleteAppruntimesAppRuntimeIDParams) (*DeleteAppruntimesAppRuntimeIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAppruntimesAppRuntimeIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAppruntimesAppRuntimeID",
		Method:             "DELETE",
		PathPattern:        "/appruntimes/{appRuntimeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAppruntimesAppRuntimeIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAppruntimesAppRuntimeIDNoContent), nil

}

/*
GetAppruntimes gets some app runtimes

Returns a list containing all app runtimes.
*/
func (a *Client) GetAppruntimes(params *GetAppruntimesParams) (*GetAppruntimesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppruntimesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAppruntimes",
		Method:             "GET",
		PathPattern:        "/appruntimes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAppruntimesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAppruntimesOK), nil

}

/*
GetAppruntimesAppRuntimeID gets an app runtime

Returns a single runtime by its id
*/
func (a *Client) GetAppruntimesAppRuntimeID(params *GetAppruntimesAppRuntimeIDParams) (*GetAppruntimesAppRuntimeIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppruntimesAppRuntimeIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAppruntimesAppRuntimeID",
		Method:             "GET",
		PathPattern:        "/appruntimes/{appRuntimeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAppruntimesAppRuntimeIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAppruntimesAppRuntimeIDOK), nil

}

/*
PostAppruntimes creates an app runtime

Adds a new app runtime to the runtimes list.
*/
func (a *Client) PostAppruntimes(params *PostAppruntimesParams) (*PostAppruntimesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAppruntimesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAppruntimes",
		Method:             "POST",
		PathPattern:        "/appruntimes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAppruntimesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAppruntimesNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
