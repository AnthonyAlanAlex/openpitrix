// Code generated by go-swagger; DO NOT EDIT.

package repos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"openpitrix.io/openpitrix/pkg/swagger/models"
)

// NewPostReposParams creates a new PostReposParams object
// with the default values initialized.
func NewPostReposParams() *PostReposParams {
	var ()
	return &PostReposParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostReposParamsWithTimeout creates a new PostReposParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostReposParamsWithTimeout(timeout time.Duration) *PostReposParams {
	var ()
	return &PostReposParams{

		timeout: timeout,
	}
}

// NewPostReposParamsWithContext creates a new PostReposParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostReposParamsWithContext(ctx context.Context) *PostReposParams {
	var ()
	return &PostReposParams{

		Context: ctx,
	}
}

// NewPostReposParamsWithHTTPClient creates a new PostReposParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostReposParamsWithHTTPClient(client *http.Client) *PostReposParams {
	var ()
	return &PostReposParams{
		HTTPClient: client,
	}
}

/*PostReposParams contains all the parameters to send to the API endpoint
for the post repos operation typically these are written to a http.Request
*/
type PostReposParams struct {

	/*Repo
	  The repo to create.

	*/
	Repo *models.Repo

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post repos params
func (o *PostReposParams) WithTimeout(timeout time.Duration) *PostReposParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post repos params
func (o *PostReposParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post repos params
func (o *PostReposParams) WithContext(ctx context.Context) *PostReposParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post repos params
func (o *PostReposParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post repos params
func (o *PostReposParams) WithHTTPClient(client *http.Client) *PostReposParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post repos params
func (o *PostReposParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRepo adds the repo to the post repos params
func (o *PostReposParams) WithRepo(repo *models.Repo) *PostReposParams {
	o.SetRepo(repo)
	return o
}

// SetRepo adds the repo to the post repos params
func (o *PostReposParams) SetRepo(repo *models.Repo) {
	o.Repo = repo
}

// WriteToRequest writes these params to a swagger request
func (o *PostReposParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Repo == nil {
		o.Repo = new(models.Repo)
	}

	if err := r.SetBodyParam(o.Repo); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
