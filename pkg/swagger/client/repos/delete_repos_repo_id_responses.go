// Code generated by go-swagger; DO NOT EDIT.

package repos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"openpitrix.io/openpitrix/pkg/swagger/models"
)

// DeleteReposRepoIDReader is a Reader for the DeleteReposRepoID structure.
type DeleteReposRepoIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteReposRepoIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewDeleteReposRepoIDNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewDeleteReposRepoIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewDeleteReposRepoIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteReposRepoIDNoContent creates a DeleteReposRepoIDNoContent with default headers values
func NewDeleteReposRepoIDNoContent() *DeleteReposRepoIDNoContent {
	return &DeleteReposRepoIDNoContent{}
}

/*DeleteReposRepoIDNoContent handles this case with default header values.

Repo successfully deleted.
*/
type DeleteReposRepoIDNoContent struct {
}

func (o *DeleteReposRepoIDNoContent) Error() string {
	return fmt.Sprintf("[DELETE /repos/{repoId}][%d] deleteReposRepoIdNoContent ", 204)
}

func (o *DeleteReposRepoIDNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteReposRepoIDNotFound creates a DeleteReposRepoIDNotFound with default headers values
func NewDeleteReposRepoIDNotFound() *DeleteReposRepoIDNotFound {
	return &DeleteReposRepoIDNotFound{}
}

/*DeleteReposRepoIDNotFound handles this case with default header values.

The repo does not exist.
*/
type DeleteReposRepoIDNotFound struct {
}

func (o *DeleteReposRepoIDNotFound) Error() string {
	return fmt.Sprintf("[DELETE /repos/{repoId}][%d] deleteReposRepoIdNotFound ", 404)
}

func (o *DeleteReposRepoIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteReposRepoIDInternalServerError creates a DeleteReposRepoIDInternalServerError with default headers values
func NewDeleteReposRepoIDInternalServerError() *DeleteReposRepoIDInternalServerError {
	return &DeleteReposRepoIDInternalServerError{}
}

/*DeleteReposRepoIDInternalServerError handles this case with default header values.

An unexpected error occured.
*/
type DeleteReposRepoIDInternalServerError struct {
	Payload *models.Error
}

func (o *DeleteReposRepoIDInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /repos/{repoId}][%d] deleteReposRepoIdInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteReposRepoIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
