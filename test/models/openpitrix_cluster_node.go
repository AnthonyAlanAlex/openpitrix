// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// OpenpitrixClusterNode openpitrix cluster node
// swagger:model openpitrixClusterNode
type OpenpitrixClusterNode struct {

	// advanced actions
	AdvancedActions string `json:"advanced_actions,omitempty"`

	// cluster id
	ClusterID string `json:"cluster_id,omitempty"`

	// cpu
	CPU *ProtobufUint32Value `json:"cpu,omitempty"`

	// create time
	CreateTime strfmt.DateTime `json:"create_time,omitempty"`

	// env
	Env string `json:"env,omitempty"`

	// global server id
	GlobalServerID *ProtobufUint64Value `json:"global_server_id,omitempty"`

	// gpu
	Gpu *ProtobufUint32Value `json:"gpu,omitempty"`

	// health status
	HealthStatus string `json:"health_status,omitempty"`

	// image id
	ImageID string `json:"image_id,omitempty"`

	// instance id
	InstanceID string `json:"instance_id,omitempty"`

	// memory
	Memory *ProtobufUint32Value `json:"memory,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// node id
	NodeID string `json:"node_id,omitempty"`

	// owner
	Owner string `json:"owner,omitempty"`

	// passphraseless
	Passphraseless string `json:"passphraseless,omitempty"`

	// private ip
	PrivateIP string `json:"private_ip,omitempty"`

	// role
	Role string `json:"role,omitempty"`

	// server id
	ServerID *ProtobufUint32Value `json:"server_id,omitempty"`

	// server id upper bound
	ServerIDUpperBound *ProtobufUint32Value `json:"server_id_upper_bound,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// status time
	StatusTime strfmt.DateTime `json:"status_time,omitempty"`

	// storage size
	StorageSize *ProtobufUint32Value `json:"storage_size,omitempty"`

	// transition status
	TransitionStatus string `json:"transition_status,omitempty"`

	// vxnet id
	VxnetID string `json:"vxnet_id,omitempty"`
}

// Validate validates this openpitrix cluster node
func (m *OpenpitrixClusterNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCPU(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGlobalServerID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGpu(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMemory(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateServerID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateServerIDUpperBound(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStorageSize(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenpitrixClusterNode) validateCPU(formats strfmt.Registry) error {

	if swag.IsZero(m.CPU) { // not required
		return nil
	}

	if m.CPU != nil {

		if err := m.CPU.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cpu")
			}
			return err
		}
	}

	return nil
}

func (m *OpenpitrixClusterNode) validateGlobalServerID(formats strfmt.Registry) error {

	if swag.IsZero(m.GlobalServerID) { // not required
		return nil
	}

	if m.GlobalServerID != nil {

		if err := m.GlobalServerID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("global_server_id")
			}
			return err
		}
	}

	return nil
}

func (m *OpenpitrixClusterNode) validateGpu(formats strfmt.Registry) error {

	if swag.IsZero(m.Gpu) { // not required
		return nil
	}

	if m.Gpu != nil {

		if err := m.Gpu.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gpu")
			}
			return err
		}
	}

	return nil
}

func (m *OpenpitrixClusterNode) validateMemory(formats strfmt.Registry) error {

	if swag.IsZero(m.Memory) { // not required
		return nil
	}

	if m.Memory != nil {

		if err := m.Memory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("memory")
			}
			return err
		}
	}

	return nil
}

func (m *OpenpitrixClusterNode) validateServerID(formats strfmt.Registry) error {

	if swag.IsZero(m.ServerID) { // not required
		return nil
	}

	if m.ServerID != nil {

		if err := m.ServerID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("server_id")
			}
			return err
		}
	}

	return nil
}

func (m *OpenpitrixClusterNode) validateServerIDUpperBound(formats strfmt.Registry) error {

	if swag.IsZero(m.ServerIDUpperBound) { // not required
		return nil
	}

	if m.ServerIDUpperBound != nil {

		if err := m.ServerIDUpperBound.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("server_id_upper_bound")
			}
			return err
		}
	}

	return nil
}

func (m *OpenpitrixClusterNode) validateStorageSize(formats strfmt.Registry) error {

	if swag.IsZero(m.StorageSize) { // not required
		return nil
	}

	if m.StorageSize != nil {

		if err := m.StorageSize.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage_size")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OpenpitrixClusterNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenpitrixClusterNode) UnmarshalBinary(b []byte) error {
	var res OpenpitrixClusterNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
