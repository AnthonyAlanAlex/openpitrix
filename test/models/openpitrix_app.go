// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OpenpitrixApp openpitrix app
// swagger:model openpitrixApp
type OpenpitrixApp struct {

	// app id
	AppID string `json:"app_id,omitempty"`

	// chart name
	ChartName string `json:"chart_name,omitempty"`

	// create time
	CreateTime strfmt.DateTime `json:"create_time,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// home
	Home string `json:"home,omitempty"`

	// icon
	Icon string `json:"icon,omitempty"`

	// maintainers
	Maintainers string `json:"maintainers,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// readme
	Readme string `json:"readme,omitempty"`

	// repo id
	RepoID string `json:"repo_id,omitempty"`

	// screenshots
	Screenshots string `json:"screenshots,omitempty"`

	// sources
	Sources string `json:"sources,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// status time
	StatusTime strfmt.DateTime `json:"status_time,omitempty"`
}

// Validate validates this openpitrix app
func (m *OpenpitrixApp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreateTime(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatusTime(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenpitrixApp) validateCreateTime(formats strfmt.Registry) error {

	if swag.IsZero(m.CreateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("create_time", "body", "date-time", m.CreateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OpenpitrixApp) validateStatusTime(formats strfmt.Registry) error {

	if swag.IsZero(m.StatusTime) { // not required
		return nil
	}

	if err := validate.FormatOf("status_time", "body", "date-time", m.StatusTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OpenpitrixApp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenpitrixApp) UnmarshalBinary(b []byte) error {
	var res OpenpitrixApp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
