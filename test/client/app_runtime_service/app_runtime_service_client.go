// Code generated by go-swagger; DO NOT EDIT.

package app_runtime_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new app runtime service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for app runtime service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateAppRuntime create app runtime API
*/
func (a *Client) CreateAppRuntime(params *CreateAppRuntimeParams) (*CreateAppRuntimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAppRuntimeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateAppRuntime",
		Method:             "POST",
		PathPattern:        "/v1/appruntimes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateAppRuntimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateAppRuntimeOK), nil

}

/*
DeleteAppRuntime delete app runtime API
*/
func (a *Client) DeleteAppRuntime(params *DeleteAppRuntimeParams) (*DeleteAppRuntimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAppRuntimeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAppRuntime",
		Method:             "DELETE",
		PathPattern:        "/v1/appruntimes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAppRuntimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAppRuntimeOK), nil

}

/*
GetAppRuntime get app runtime API
*/
func (a *Client) GetAppRuntime(params *GetAppRuntimeParams) (*GetAppRuntimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppRuntimeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAppRuntime",
		Method:             "GET",
		PathPattern:        "/v1/appruntimes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAppRuntimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAppRuntimeOK), nil

}

/*
GetAppRuntimeList returns a list containing all app runtimes
*/
func (a *Client) GetAppRuntimeList(params *GetAppRuntimeListParams) (*GetAppRuntimeListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppRuntimeListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAppRuntimeList",
		Method:             "GET",
		PathPattern:        "/v1/appruntimes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAppRuntimeListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAppRuntimeListOK), nil

}

/*
UpdateAppRuntime update app runtime API
*/
func (a *Client) UpdateAppRuntime(params *UpdateAppRuntimeParams) (*UpdateAppRuntimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAppRuntimeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateAppRuntime",
		Method:             "POST",
		PathPattern:        "/v1/appruntimes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateAppRuntimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateAppRuntimeOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
