// Code generated by go-swagger; DO NOT EDIT.

package repo_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDescribeRepoLabelsParams creates a new DescribeRepoLabelsParams object
// with the default values initialized.
func NewDescribeRepoLabelsParams() *DescribeRepoLabelsParams {
	var ()
	return &DescribeRepoLabelsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDescribeRepoLabelsParamsWithTimeout creates a new DescribeRepoLabelsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDescribeRepoLabelsParamsWithTimeout(timeout time.Duration) *DescribeRepoLabelsParams {
	var ()
	return &DescribeRepoLabelsParams{

		timeout: timeout,
	}
}

// NewDescribeRepoLabelsParamsWithContext creates a new DescribeRepoLabelsParams object
// with the default values initialized, and the ability to set a context for a request
func NewDescribeRepoLabelsParamsWithContext(ctx context.Context) *DescribeRepoLabelsParams {
	var ()
	return &DescribeRepoLabelsParams{

		Context: ctx,
	}
}

// NewDescribeRepoLabelsParamsWithHTTPClient creates a new DescribeRepoLabelsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDescribeRepoLabelsParamsWithHTTPClient(client *http.Client) *DescribeRepoLabelsParams {
	var ()
	return &DescribeRepoLabelsParams{
		HTTPClient: client,
	}
}

/*DescribeRepoLabelsParams contains all the parameters to send to the API endpoint
for the describe repo labels operation typically these are written to a http.Request
*/
type DescribeRepoLabelsParams struct {

	/*Limit*/
	Limit *int64
	/*Offset*/
	Offset *int64
	/*RepoID*/
	RepoID []string
	/*RepoLabelID*/
	RepoLabelID []string
	/*Status*/
	Status []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the describe repo labels params
func (o *DescribeRepoLabelsParams) WithTimeout(timeout time.Duration) *DescribeRepoLabelsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the describe repo labels params
func (o *DescribeRepoLabelsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the describe repo labels params
func (o *DescribeRepoLabelsParams) WithContext(ctx context.Context) *DescribeRepoLabelsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the describe repo labels params
func (o *DescribeRepoLabelsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the describe repo labels params
func (o *DescribeRepoLabelsParams) WithHTTPClient(client *http.Client) *DescribeRepoLabelsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the describe repo labels params
func (o *DescribeRepoLabelsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimit adds the limit to the describe repo labels params
func (o *DescribeRepoLabelsParams) WithLimit(limit *int64) *DescribeRepoLabelsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the describe repo labels params
func (o *DescribeRepoLabelsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the describe repo labels params
func (o *DescribeRepoLabelsParams) WithOffset(offset *int64) *DescribeRepoLabelsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the describe repo labels params
func (o *DescribeRepoLabelsParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithRepoID adds the repoID to the describe repo labels params
func (o *DescribeRepoLabelsParams) WithRepoID(repoID []string) *DescribeRepoLabelsParams {
	o.SetRepoID(repoID)
	return o
}

// SetRepoID adds the repoId to the describe repo labels params
func (o *DescribeRepoLabelsParams) SetRepoID(repoID []string) {
	o.RepoID = repoID
}

// WithRepoLabelID adds the repoLabelID to the describe repo labels params
func (o *DescribeRepoLabelsParams) WithRepoLabelID(repoLabelID []string) *DescribeRepoLabelsParams {
	o.SetRepoLabelID(repoLabelID)
	return o
}

// SetRepoLabelID adds the repoLabelId to the describe repo labels params
func (o *DescribeRepoLabelsParams) SetRepoLabelID(repoLabelID []string) {
	o.RepoLabelID = repoLabelID
}

// WithStatus adds the status to the describe repo labels params
func (o *DescribeRepoLabelsParams) WithStatus(status []string) *DescribeRepoLabelsParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the describe repo labels params
func (o *DescribeRepoLabelsParams) SetStatus(status []string) {
	o.Status = status
}

// WriteToRequest writes these params to a swagger request
func (o *DescribeRepoLabelsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	valuesRepoID := o.RepoID

	joinedRepoID := swag.JoinByFormat(valuesRepoID, "")
	// query array param repo_id
	if err := r.SetQueryParam("repo_id", joinedRepoID...); err != nil {
		return err
	}

	valuesRepoLabelID := o.RepoLabelID

	joinedRepoLabelID := swag.JoinByFormat(valuesRepoLabelID, "")
	// query array param repo_label_id
	if err := r.SetQueryParam("repo_label_id", joinedRepoLabelID...); err != nil {
		return err
	}

	valuesStatus := o.Status

	joinedStatus := swag.JoinByFormat(valuesStatus, "")
	// query array param status
	if err := r.SetQueryParam("status", joinedStatus...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
