// Code generated by go-swagger; DO NOT EDIT.

package runtime_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new runtime manager API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for runtime manager API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateRuntime creates runtime
*/
func (a *Client) CreateRuntime(params *CreateRuntimeParams) (*CreateRuntimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRuntimeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateRuntime",
		Method:             "POST",
		PathPattern:        "/v1/runtimes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRuntimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateRuntimeOK), nil

}

/*
CreateRuntimeCredential creates runtime credential
*/
func (a *Client) CreateRuntimeCredential(params *CreateRuntimeCredentialParams) (*CreateRuntimeCredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRuntimeCredentialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateRuntimeCredential",
		Method:             "POST",
		PathPattern:        "/v1/runtime_credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRuntimeCredentialReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateRuntimeCredentialOK), nil

}

/*
DeleteRuntime deletes runtime
*/
func (a *Client) DeleteRuntime(params *DeleteRuntimeParams) (*DeleteRuntimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRuntimeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteRuntime",
		Method:             "DELETE",
		PathPattern:        "/v1/runtimes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRuntimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRuntimeOK), nil

}

/*
DeleteRuntimeCredential modifies runtime credential
*/
func (a *Client) DeleteRuntimeCredential(params *DeleteRuntimeCredentialParams) (*DeleteRuntimeCredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRuntimeCredentialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteRuntimeCredential",
		Method:             "DELETE",
		PathPattern:        "/v1/runtime_credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRuntimeCredentialReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRuntimeCredentialOK), nil

}

/*
DescribeRuntimeCredentials describes runtime crendentials
*/
func (a *Client) DescribeRuntimeCredentials(params *DescribeRuntimeCredentialsParams) (*DescribeRuntimeCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeRuntimeCredentialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DescribeRuntimeCredentials",
		Method:             "GET",
		PathPattern:        "/v1/runtime_credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeRuntimeCredentialsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeRuntimeCredentialsOK), nil

}

/*
DescribeRuntimes describes runtimes
*/
func (a *Client) DescribeRuntimes(params *DescribeRuntimesParams) (*DescribeRuntimesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeRuntimesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DescribeRuntimes",
		Method:             "GET",
		PathPattern:        "/v1/runtimes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeRuntimesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeRuntimesOK), nil

}

/*
ModifyRuntime modifies runtime
*/
func (a *Client) ModifyRuntime(params *ModifyRuntimeParams) (*ModifyRuntimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyRuntimeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifyRuntime",
		Method:             "PATCH",
		PathPattern:        "/v1/runtimes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModifyRuntimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyRuntimeOK), nil

}

/*
ModifyRuntimeCredential modifies runtime credential
*/
func (a *Client) ModifyRuntimeCredential(params *ModifyRuntimeCredentialParams) (*ModifyRuntimeCredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyRuntimeCredentialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifyRuntimeCredential",
		Method:             "PATCH",
		PathPattern:        "/v1/runtime_credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModifyRuntimeCredentialReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyRuntimeCredentialOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
