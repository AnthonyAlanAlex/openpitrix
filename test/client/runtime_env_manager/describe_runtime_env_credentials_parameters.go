// Code generated by go-swagger; DO NOT EDIT.

package runtime_env_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDescribeRuntimeEnvCredentialsParams creates a new DescribeRuntimeEnvCredentialsParams object
// with the default values initialized.
func NewDescribeRuntimeEnvCredentialsParams() *DescribeRuntimeEnvCredentialsParams {
	var ()
	return &DescribeRuntimeEnvCredentialsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDescribeRuntimeEnvCredentialsParamsWithTimeout creates a new DescribeRuntimeEnvCredentialsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDescribeRuntimeEnvCredentialsParamsWithTimeout(timeout time.Duration) *DescribeRuntimeEnvCredentialsParams {
	var ()
	return &DescribeRuntimeEnvCredentialsParams{

		timeout: timeout,
	}
}

// NewDescribeRuntimeEnvCredentialsParamsWithContext creates a new DescribeRuntimeEnvCredentialsParams object
// with the default values initialized, and the ability to set a context for a request
func NewDescribeRuntimeEnvCredentialsParamsWithContext(ctx context.Context) *DescribeRuntimeEnvCredentialsParams {
	var ()
	return &DescribeRuntimeEnvCredentialsParams{

		Context: ctx,
	}
}

// NewDescribeRuntimeEnvCredentialsParamsWithHTTPClient creates a new DescribeRuntimeEnvCredentialsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDescribeRuntimeEnvCredentialsParamsWithHTTPClient(client *http.Client) *DescribeRuntimeEnvCredentialsParams {
	var ()
	return &DescribeRuntimeEnvCredentialsParams{
		HTTPClient: client,
	}
}

/*DescribeRuntimeEnvCredentialsParams contains all the parameters to send to the API endpoint
for the describe runtime env credentials operation typically these are written to a http.Request
*/
type DescribeRuntimeEnvCredentialsParams struct {

	/*Limit*/
	Limit *int64
	/*Offset*/
	Offset *int64
	/*Owner*/
	Owner []string
	/*RuntimeEnvCredentialID*/
	RuntimeEnvCredentialID []string
	/*SearchWord*/
	SearchWord *string
	/*Status*/
	Status []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the describe runtime env credentials params
func (o *DescribeRuntimeEnvCredentialsParams) WithTimeout(timeout time.Duration) *DescribeRuntimeEnvCredentialsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the describe runtime env credentials params
func (o *DescribeRuntimeEnvCredentialsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the describe runtime env credentials params
func (o *DescribeRuntimeEnvCredentialsParams) WithContext(ctx context.Context) *DescribeRuntimeEnvCredentialsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the describe runtime env credentials params
func (o *DescribeRuntimeEnvCredentialsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the describe runtime env credentials params
func (o *DescribeRuntimeEnvCredentialsParams) WithHTTPClient(client *http.Client) *DescribeRuntimeEnvCredentialsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the describe runtime env credentials params
func (o *DescribeRuntimeEnvCredentialsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimit adds the limit to the describe runtime env credentials params
func (o *DescribeRuntimeEnvCredentialsParams) WithLimit(limit *int64) *DescribeRuntimeEnvCredentialsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the describe runtime env credentials params
func (o *DescribeRuntimeEnvCredentialsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the describe runtime env credentials params
func (o *DescribeRuntimeEnvCredentialsParams) WithOffset(offset *int64) *DescribeRuntimeEnvCredentialsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the describe runtime env credentials params
func (o *DescribeRuntimeEnvCredentialsParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithOwner adds the owner to the describe runtime env credentials params
func (o *DescribeRuntimeEnvCredentialsParams) WithOwner(owner []string) *DescribeRuntimeEnvCredentialsParams {
	o.SetOwner(owner)
	return o
}

// SetOwner adds the owner to the describe runtime env credentials params
func (o *DescribeRuntimeEnvCredentialsParams) SetOwner(owner []string) {
	o.Owner = owner
}

// WithRuntimeEnvCredentialID adds the runtimeEnvCredentialID to the describe runtime env credentials params
func (o *DescribeRuntimeEnvCredentialsParams) WithRuntimeEnvCredentialID(runtimeEnvCredentialID []string) *DescribeRuntimeEnvCredentialsParams {
	o.SetRuntimeEnvCredentialID(runtimeEnvCredentialID)
	return o
}

// SetRuntimeEnvCredentialID adds the runtimeEnvCredentialId to the describe runtime env credentials params
func (o *DescribeRuntimeEnvCredentialsParams) SetRuntimeEnvCredentialID(runtimeEnvCredentialID []string) {
	o.RuntimeEnvCredentialID = runtimeEnvCredentialID
}

// WithSearchWord adds the searchWord to the describe runtime env credentials params
func (o *DescribeRuntimeEnvCredentialsParams) WithSearchWord(searchWord *string) *DescribeRuntimeEnvCredentialsParams {
	o.SetSearchWord(searchWord)
	return o
}

// SetSearchWord adds the searchWord to the describe runtime env credentials params
func (o *DescribeRuntimeEnvCredentialsParams) SetSearchWord(searchWord *string) {
	o.SearchWord = searchWord
}

// WithStatus adds the status to the describe runtime env credentials params
func (o *DescribeRuntimeEnvCredentialsParams) WithStatus(status []string) *DescribeRuntimeEnvCredentialsParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the describe runtime env credentials params
func (o *DescribeRuntimeEnvCredentialsParams) SetStatus(status []string) {
	o.Status = status
}

// WriteToRequest writes these params to a swagger request
func (o *DescribeRuntimeEnvCredentialsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	valuesOwner := o.Owner

	joinedOwner := swag.JoinByFormat(valuesOwner, "")
	// query array param owner
	if err := r.SetQueryParam("owner", joinedOwner...); err != nil {
		return err
	}

	valuesRuntimeEnvCredentialID := o.RuntimeEnvCredentialID

	joinedRuntimeEnvCredentialID := swag.JoinByFormat(valuesRuntimeEnvCredentialID, "")
	// query array param runtime_env_credential_id
	if err := r.SetQueryParam("runtime_env_credential_id", joinedRuntimeEnvCredentialID...); err != nil {
		return err
	}

	if o.SearchWord != nil {

		// query param search_word
		var qrSearchWord string
		if o.SearchWord != nil {
			qrSearchWord = *o.SearchWord
		}
		qSearchWord := qrSearchWord
		if qSearchWord != "" {
			if err := r.SetQueryParam("search_word", qSearchWord); err != nil {
				return err
			}
		}

	}

	valuesStatus := o.Status

	joinedStatus := swag.JoinByFormat(valuesStatus, "")
	// query array param status
	if err := r.SetQueryParam("status", joinedStatus...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
