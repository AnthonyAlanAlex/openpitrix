// Code generated by go-swagger; DO NOT EDIT.

package job_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDescribeJobsParams creates a new DescribeJobsParams object
// with the default values initialized.
func NewDescribeJobsParams() *DescribeJobsParams {
	var ()
	return &DescribeJobsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDescribeJobsParamsWithTimeout creates a new DescribeJobsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDescribeJobsParamsWithTimeout(timeout time.Duration) *DescribeJobsParams {
	var ()
	return &DescribeJobsParams{

		timeout: timeout,
	}
}

// NewDescribeJobsParamsWithContext creates a new DescribeJobsParams object
// with the default values initialized, and the ability to set a context for a request
func NewDescribeJobsParamsWithContext(ctx context.Context) *DescribeJobsParams {
	var ()
	return &DescribeJobsParams{

		Context: ctx,
	}
}

// NewDescribeJobsParamsWithHTTPClient creates a new DescribeJobsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDescribeJobsParamsWithHTTPClient(client *http.Client) *DescribeJobsParams {
	var ()
	return &DescribeJobsParams{
		HTTPClient: client,
	}
}

/*DescribeJobsParams contains all the parameters to send to the API endpoint
for the describe jobs operation typically these are written to a http.Request
*/
type DescribeJobsParams struct {

	/*AppID*/
	AppID *string
	/*AppVersion*/
	AppVersion *string
	/*ClusterID*/
	ClusterID *string
	/*JobID*/
	JobID []string
	/*Limit*/
	Limit *int64
	/*Offset*/
	Offset *int64
	/*Status*/
	Status []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the describe jobs params
func (o *DescribeJobsParams) WithTimeout(timeout time.Duration) *DescribeJobsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the describe jobs params
func (o *DescribeJobsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the describe jobs params
func (o *DescribeJobsParams) WithContext(ctx context.Context) *DescribeJobsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the describe jobs params
func (o *DescribeJobsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the describe jobs params
func (o *DescribeJobsParams) WithHTTPClient(client *http.Client) *DescribeJobsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the describe jobs params
func (o *DescribeJobsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAppID adds the appID to the describe jobs params
func (o *DescribeJobsParams) WithAppID(appID *string) *DescribeJobsParams {
	o.SetAppID(appID)
	return o
}

// SetAppID adds the appId to the describe jobs params
func (o *DescribeJobsParams) SetAppID(appID *string) {
	o.AppID = appID
}

// WithAppVersion adds the appVersion to the describe jobs params
func (o *DescribeJobsParams) WithAppVersion(appVersion *string) *DescribeJobsParams {
	o.SetAppVersion(appVersion)
	return o
}

// SetAppVersion adds the appVersion to the describe jobs params
func (o *DescribeJobsParams) SetAppVersion(appVersion *string) {
	o.AppVersion = appVersion
}

// WithClusterID adds the clusterID to the describe jobs params
func (o *DescribeJobsParams) WithClusterID(clusterID *string) *DescribeJobsParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the describe jobs params
func (o *DescribeJobsParams) SetClusterID(clusterID *string) {
	o.ClusterID = clusterID
}

// WithJobID adds the jobID to the describe jobs params
func (o *DescribeJobsParams) WithJobID(jobID []string) *DescribeJobsParams {
	o.SetJobID(jobID)
	return o
}

// SetJobID adds the jobId to the describe jobs params
func (o *DescribeJobsParams) SetJobID(jobID []string) {
	o.JobID = jobID
}

// WithLimit adds the limit to the describe jobs params
func (o *DescribeJobsParams) WithLimit(limit *int64) *DescribeJobsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the describe jobs params
func (o *DescribeJobsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the describe jobs params
func (o *DescribeJobsParams) WithOffset(offset *int64) *DescribeJobsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the describe jobs params
func (o *DescribeJobsParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithStatus adds the status to the describe jobs params
func (o *DescribeJobsParams) WithStatus(status []string) *DescribeJobsParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the describe jobs params
func (o *DescribeJobsParams) SetStatus(status []string) {
	o.Status = status
}

// WriteToRequest writes these params to a swagger request
func (o *DescribeJobsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AppID != nil {

		// query param app_id
		var qrAppID string
		if o.AppID != nil {
			qrAppID = *o.AppID
		}
		qAppID := qrAppID
		if qAppID != "" {
			if err := r.SetQueryParam("app_id", qAppID); err != nil {
				return err
			}
		}

	}

	if o.AppVersion != nil {

		// query param app_version
		var qrAppVersion string
		if o.AppVersion != nil {
			qrAppVersion = *o.AppVersion
		}
		qAppVersion := qrAppVersion
		if qAppVersion != "" {
			if err := r.SetQueryParam("app_version", qAppVersion); err != nil {
				return err
			}
		}

	}

	if o.ClusterID != nil {

		// query param cluster_id
		var qrClusterID string
		if o.ClusterID != nil {
			qrClusterID = *o.ClusterID
		}
		qClusterID := qrClusterID
		if qClusterID != "" {
			if err := r.SetQueryParam("cluster_id", qClusterID); err != nil {
				return err
			}
		}

	}

	valuesJobID := o.JobID

	joinedJobID := swag.JoinByFormat(valuesJobID, "")
	// query array param job_id
	if err := r.SetQueryParam("job_id", joinedJobID...); err != nil {
		return err
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	valuesStatus := o.Status

	joinedStatus := swag.JoinByFormat(valuesStatus, "")
	// query array param status
	if err := r.SetQueryParam("status", joinedStatus...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
