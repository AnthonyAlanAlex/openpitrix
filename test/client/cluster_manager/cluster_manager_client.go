// Code generated by go-swagger; DO NOT EDIT.

package cluster_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new cluster manager API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cluster manager API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CeaseClusters ceases clusters
*/
func (a *Client) CeaseClusters(params *CeaseClustersParams) (*CeaseClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCeaseClustersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CeaseClusters",
		Method:             "DELETE",
		PathPattern:        "/v1/clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CeaseClustersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CeaseClustersOK), nil

}

/*
DescribeClusterNodes describes cluster nodes
*/
func (a *Client) DescribeClusterNodes(params *DescribeClusterNodesParams) (*DescribeClusterNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeClusterNodesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DescribeClusterNodes",
		Method:             "GET",
		PathPattern:        "/v1/clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeClusterNodesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeClusterNodesOK), nil

}

/*
RecoverClusters recovers clusters
*/
func (a *Client) RecoverClusters(params *RecoverClustersParams) (*RecoverClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRecoverClustersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RecoverClusters",
		Method:             "POST",
		PathPattern:        "/v1/clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RecoverClustersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RecoverClustersOK), nil

}

/*
UpdateClusterEnv updates cluster env
*/
func (a *Client) UpdateClusterEnv(params *UpdateClusterEnvParams) (*UpdateClusterEnvOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateClusterEnvParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateClusterEnv",
		Method:             "PATCH",
		PathPattern:        "/v1/clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateClusterEnvReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateClusterEnvOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
