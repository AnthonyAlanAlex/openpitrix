// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	"github.com/go-openapi/runtime/yamlpc"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"AppHub/restapi/operations/app"
	"AppHub/restapi/operations/app_runtime"
	"AppHub/restapi/operations/cluster"
	"AppHub/restapi/operations/repo"
)

// NewAppHubAPI creates a new AppHub instance
func NewAppHubAPI(spec *loads.Document) *AppHubAPI {
	return &AppHubAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		YamlConsumer:        yamlpc.YAMLConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		YamlProducer:        yamlpc.YAMLProducer(),
		AppRuntimeDeleteAppruntimesAppRuntimeIDHandler: app_runtime.DeleteAppruntimesAppRuntimeIDHandlerFunc(func(params app_runtime.DeleteAppruntimesAppRuntimeIDParams) middleware.Responder {
			return middleware.NotImplemented("operation AppRuntimeDeleteAppruntimesAppRuntimeID has not yet been implemented")
		}),
		AppDeleteAppsAppIDHandler: app.DeleteAppsAppIDHandlerFunc(func(params app.DeleteAppsAppIDParams) middleware.Responder {
			return middleware.NotImplemented("operation AppDeleteAppsAppID has not yet been implemented")
		}),
		ClusterDeleteClustersClusterIDHandler: cluster.DeleteClustersClusterIDHandlerFunc(func(params cluster.DeleteClustersClusterIDParams) middleware.Responder {
			return middleware.NotImplemented("operation ClusterDeleteClustersClusterID has not yet been implemented")
		}),
		RepoDeleteReposRepoIDHandler: repo.DeleteReposRepoIDHandlerFunc(func(params repo.DeleteReposRepoIDParams) middleware.Responder {
			return middleware.NotImplemented("operation RepoDeleteReposRepoID has not yet been implemented")
		}),
		AppRuntimeGetAppruntimesHandler: app_runtime.GetAppruntimesHandlerFunc(func(params app_runtime.GetAppruntimesParams) middleware.Responder {
			return middleware.NotImplemented("operation AppRuntimeGetAppruntimes has not yet been implemented")
		}),
		AppRuntimeGetAppruntimesAppRuntimeIDHandler: app_runtime.GetAppruntimesAppRuntimeIDHandlerFunc(func(params app_runtime.GetAppruntimesAppRuntimeIDParams) middleware.Responder {
			return middleware.NotImplemented("operation AppRuntimeGetAppruntimesAppRuntimeID has not yet been implemented")
		}),
		AppGetAppsHandler: app.GetAppsHandlerFunc(func(params app.GetAppsParams) middleware.Responder {
			return middleware.NotImplemented("operation AppGetApps has not yet been implemented")
		}),
		AppGetAppsAppIDHandler: app.GetAppsAppIDHandlerFunc(func(params app.GetAppsAppIDParams) middleware.Responder {
			return middleware.NotImplemented("operation AppGetAppsAppID has not yet been implemented")
		}),
		ClusterGetClustersHandler: cluster.GetClustersHandlerFunc(func(params cluster.GetClustersParams) middleware.Responder {
			return middleware.NotImplemented("operation ClusterGetClusters has not yet been implemented")
		}),
		ClusterGetClustersClusterIDHandler: cluster.GetClustersClusterIDHandlerFunc(func(params cluster.GetClustersClusterIDParams) middleware.Responder {
			return middleware.NotImplemented("operation ClusterGetClustersClusterID has not yet been implemented")
		}),
		RepoGetReposHandler: repo.GetReposHandlerFunc(func(params repo.GetReposParams) middleware.Responder {
			return middleware.NotImplemented("operation RepoGetRepos has not yet been implemented")
		}),
		RepoGetReposRepoIDHandler: repo.GetReposRepoIDHandlerFunc(func(params repo.GetReposRepoIDParams) middleware.Responder {
			return middleware.NotImplemented("operation RepoGetReposRepoID has not yet been implemented")
		}),
		AppRuntimePostAppruntimesHandler: app_runtime.PostAppruntimesHandlerFunc(func(params app_runtime.PostAppruntimesParams) middleware.Responder {
			return middleware.NotImplemented("operation AppRuntimePostAppruntimes has not yet been implemented")
		}),
		AppPostAppsHandler: app.PostAppsHandlerFunc(func(params app.PostAppsParams) middleware.Responder {
			return middleware.NotImplemented("operation AppPostApps has not yet been implemented")
		}),
		ClusterPostClustersHandler: cluster.PostClustersHandlerFunc(func(params cluster.PostClustersParams) middleware.Responder {
			return middleware.NotImplemented("operation ClusterPostClusters has not yet been implemented")
		}),
		RepoPostReposHandler: repo.PostReposHandlerFunc(func(params repo.PostReposParams) middleware.Responder {
			return middleware.NotImplemented("operation RepoPostRepos has not yet been implemented")
		}),
	}
}

/*AppHubAPI An open platform to package and deploy applications into multiple environment such as QingCloud, AWS, Kubernetes etc. */
type AppHubAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer
	// YamlConsumer registers a consumer for a "application/yaml" mime type
	YamlConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer
	// YamlProducer registers a producer for a "application/yaml" mime type
	YamlProducer runtime.Producer

	// AppRuntimeDeleteAppruntimesAppRuntimeIDHandler sets the operation handler for the delete appruntimes app runtime ID operation
	AppRuntimeDeleteAppruntimesAppRuntimeIDHandler app_runtime.DeleteAppruntimesAppRuntimeIDHandler
	// AppDeleteAppsAppIDHandler sets the operation handler for the delete apps app ID operation
	AppDeleteAppsAppIDHandler app.DeleteAppsAppIDHandler
	// ClusterDeleteClustersClusterIDHandler sets the operation handler for the delete clusters cluster ID operation
	ClusterDeleteClustersClusterIDHandler cluster.DeleteClustersClusterIDHandler
	// RepoDeleteReposRepoIDHandler sets the operation handler for the delete repos repo ID operation
	RepoDeleteReposRepoIDHandler repo.DeleteReposRepoIDHandler
	// AppRuntimeGetAppruntimesHandler sets the operation handler for the get appruntimes operation
	AppRuntimeGetAppruntimesHandler app_runtime.GetAppruntimesHandler
	// AppRuntimeGetAppruntimesAppRuntimeIDHandler sets the operation handler for the get appruntimes app runtime ID operation
	AppRuntimeGetAppruntimesAppRuntimeIDHandler app_runtime.GetAppruntimesAppRuntimeIDHandler
	// AppGetAppsHandler sets the operation handler for the get apps operation
	AppGetAppsHandler app.GetAppsHandler
	// AppGetAppsAppIDHandler sets the operation handler for the get apps app ID operation
	AppGetAppsAppIDHandler app.GetAppsAppIDHandler
	// ClusterGetClustersHandler sets the operation handler for the get clusters operation
	ClusterGetClustersHandler cluster.GetClustersHandler
	// ClusterGetClustersClusterIDHandler sets the operation handler for the get clusters cluster ID operation
	ClusterGetClustersClusterIDHandler cluster.GetClustersClusterIDHandler
	// RepoGetReposHandler sets the operation handler for the get repos operation
	RepoGetReposHandler repo.GetReposHandler
	// RepoGetReposRepoIDHandler sets the operation handler for the get repos repo ID operation
	RepoGetReposRepoIDHandler repo.GetReposRepoIDHandler
	// AppRuntimePostAppruntimesHandler sets the operation handler for the post appruntimes operation
	AppRuntimePostAppruntimesHandler app_runtime.PostAppruntimesHandler
	// AppPostAppsHandler sets the operation handler for the post apps operation
	AppPostAppsHandler app.PostAppsHandler
	// ClusterPostClustersHandler sets the operation handler for the post clusters operation
	ClusterPostClustersHandler cluster.PostClustersHandler
	// RepoPostReposHandler sets the operation handler for the post repos operation
	RepoPostReposHandler repo.PostReposHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *AppHubAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *AppHubAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *AppHubAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *AppHubAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *AppHubAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *AppHubAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *AppHubAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the AppHubAPI
func (o *AppHubAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.YamlConsumer == nil {
		unregistered = append(unregistered, "YamlConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.YamlProducer == nil {
		unregistered = append(unregistered, "YamlProducer")
	}

	if o.AppRuntimeDeleteAppruntimesAppRuntimeIDHandler == nil {
		unregistered = append(unregistered, "app_runtime.DeleteAppruntimesAppRuntimeIDHandler")
	}

	if o.AppDeleteAppsAppIDHandler == nil {
		unregistered = append(unregistered, "app.DeleteAppsAppIDHandler")
	}

	if o.ClusterDeleteClustersClusterIDHandler == nil {
		unregistered = append(unregistered, "cluster.DeleteClustersClusterIDHandler")
	}

	if o.RepoDeleteReposRepoIDHandler == nil {
		unregistered = append(unregistered, "repo.DeleteReposRepoIDHandler")
	}

	if o.AppRuntimeGetAppruntimesHandler == nil {
		unregistered = append(unregistered, "app_runtime.GetAppruntimesHandler")
	}

	if o.AppRuntimeGetAppruntimesAppRuntimeIDHandler == nil {
		unregistered = append(unregistered, "app_runtime.GetAppruntimesAppRuntimeIDHandler")
	}

	if o.AppGetAppsHandler == nil {
		unregistered = append(unregistered, "app.GetAppsHandler")
	}

	if o.AppGetAppsAppIDHandler == nil {
		unregistered = append(unregistered, "app.GetAppsAppIDHandler")
	}

	if o.ClusterGetClustersHandler == nil {
		unregistered = append(unregistered, "cluster.GetClustersHandler")
	}

	if o.ClusterGetClustersClusterIDHandler == nil {
		unregistered = append(unregistered, "cluster.GetClustersClusterIDHandler")
	}

	if o.RepoGetReposHandler == nil {
		unregistered = append(unregistered, "repo.GetReposHandler")
	}

	if o.RepoGetReposRepoIDHandler == nil {
		unregistered = append(unregistered, "repo.GetReposRepoIDHandler")
	}

	if o.AppRuntimePostAppruntimesHandler == nil {
		unregistered = append(unregistered, "app_runtime.PostAppruntimesHandler")
	}

	if o.AppPostAppsHandler == nil {
		unregistered = append(unregistered, "app.PostAppsHandler")
	}

	if o.ClusterPostClustersHandler == nil {
		unregistered = append(unregistered, "cluster.PostClustersHandler")
	}

	if o.RepoPostReposHandler == nil {
		unregistered = append(unregistered, "repo.PostReposHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *AppHubAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *AppHubAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// Authorizer returns the registered authorizer
func (o *AppHubAPI) Authorizer() runtime.Authorizer {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *AppHubAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		case "application/yaml":
			result["application/yaml"] = o.YamlConsumer

		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *AppHubAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		case "application/yaml":
			result["application/yaml"] = o.YamlProducer

		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *AppHubAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the app hub API
func (o *AppHubAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *AppHubAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/appruntimes/{appRuntimeId}"] = app_runtime.NewDeleteAppruntimesAppRuntimeID(o.context, o.AppRuntimeDeleteAppruntimesAppRuntimeIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apps/{appId}"] = app.NewDeleteAppsAppID(o.context, o.AppDeleteAppsAppIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/clusters/{clusterId}"] = cluster.NewDeleteClustersClusterID(o.context, o.ClusterDeleteClustersClusterIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/repos/{repoId}"] = repo.NewDeleteReposRepoID(o.context, o.RepoDeleteReposRepoIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/appruntimes"] = app_runtime.NewGetAppruntimes(o.context, o.AppRuntimeGetAppruntimesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/appruntimes/{appRuntimeId}"] = app_runtime.NewGetAppruntimesAppRuntimeID(o.context, o.AppRuntimeGetAppruntimesAppRuntimeIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apps"] = app.NewGetApps(o.context, o.AppGetAppsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apps/{appId}"] = app.NewGetAppsAppID(o.context, o.AppGetAppsAppIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/clusters"] = cluster.NewGetClusters(o.context, o.ClusterGetClustersHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/clusters/{clusterId}"] = cluster.NewGetClustersClusterID(o.context, o.ClusterGetClustersClusterIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos"] = repo.NewGetRepos(o.context, o.RepoGetReposHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{repoId}"] = repo.NewGetReposRepoID(o.context, o.RepoGetReposRepoIDHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/appruntimes"] = app_runtime.NewPostAppruntimes(o.context, o.AppRuntimePostAppruntimesHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apps"] = app.NewPostApps(o.context, o.AppPostAppsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/clusters"] = cluster.NewPostClusters(o.context, o.ClusterPostClustersHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/repos"] = repo.NewPostRepos(o.context, o.RepoPostReposHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *AppHubAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middelware as you see fit
func (o *AppHubAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}
