// Code generated by go-swagger; DO NOT EDIT.

package restapi

import (
	"crypto/tls"
	"net/http"

	errors "github.com/go-openapi/errors"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/yamlpc"
	graceful "github.com/tylerb/graceful"

	"AppHub/restapi/operations"
	"AppHub/restapi/operations/app"
	"AppHub/restapi/operations/app_runtime"
	"AppHub/restapi/operations/cluster"
	"AppHub/restapi/operations/repo"
)

// This file is safe to edit. Once it exists it will not be overwritten

//go:generate swagger generate server --target .. --name  --spec ../api/swagger-spec/swagger.yaml

func configureFlags(api *operations.AppHubAPI) {
	// api.CommandLineOptionsGroups = []swag.CommandLineOptionsGroup{ ... }
}

func configureAPI(api *operations.AppHubAPI) http.Handler {
	// configure the api here
	api.ServeError = errors.ServeError

	// Set your custom logger if needed. Default one is log.Printf
	// Expected interface func(string, ...interface{})
	//
	// Example:
	// api.Logger = log.Printf

	api.JSONConsumer = runtime.JSONConsumer()

	api.YamlConsumer = yamlpc.YAMLConsumer()

	api.JSONProducer = runtime.JSONProducer()

	api.YamlProducer = yamlpc.YAMLProducer()

	api.AppRuntimeDeleteAppruntimesAppRuntimeIDHandler = app_runtime.DeleteAppruntimesAppRuntimeIDHandlerFunc(func(params app_runtime.DeleteAppruntimesAppRuntimeIDParams) middleware.Responder {
		return middleware.NotImplemented("operation app_runtime.DeleteAppruntimesAppRuntimeID has not yet been implemented")
	})
	api.AppDeleteAppsAppIDHandler = app.DeleteAppsAppIDHandlerFunc(func(params app.DeleteAppsAppIDParams) middleware.Responder {
		return middleware.NotImplemented("operation app.DeleteAppsAppID has not yet been implemented")
	})
	api.ClusterDeleteClustersClusterIDHandler = cluster.DeleteClustersClusterIDHandlerFunc(func(params cluster.DeleteClustersClusterIDParams) middleware.Responder {
		return middleware.NotImplemented("operation cluster.DeleteClustersClusterID has not yet been implemented")
	})
	api.RepoDeleteReposRepoIDHandler = repo.DeleteReposRepoIDHandlerFunc(func(params repo.DeleteReposRepoIDParams) middleware.Responder {
		return middleware.NotImplemented("operation repo.DeleteReposRepoID has not yet been implemented")
	})
	api.AppRuntimeGetAppruntimesHandler = app_runtime.GetAppruntimesHandlerFunc(func(params app_runtime.GetAppruntimesParams) middleware.Responder {
		return middleware.NotImplemented("operation app_runtime.GetAppruntimes has not yet been implemented")
	})
	api.AppRuntimeGetAppruntimesAppRuntimeIDHandler = app_runtime.GetAppruntimesAppRuntimeIDHandlerFunc(func(params app_runtime.GetAppruntimesAppRuntimeIDParams) middleware.Responder {
		return middleware.NotImplemented("operation app_runtime.GetAppruntimesAppRuntimeID has not yet been implemented")
	})
	api.AppGetAppsHandler = app.GetAppsHandlerFunc(func(params app.GetAppsParams) middleware.Responder {
		return middleware.NotImplemented("operation app.GetApps has not yet been implemented")
	})
	api.AppGetAppsAppIDHandler = app.GetAppsAppIDHandlerFunc(func(params app.GetAppsAppIDParams) middleware.Responder {
		return middleware.NotImplemented("operation app.GetAppsAppID has not yet been implemented")
	})
	api.ClusterGetClustersHandler = cluster.GetClustersHandlerFunc(func(params cluster.GetClustersParams) middleware.Responder {
		return middleware.NotImplemented("operation cluster.GetClusters has not yet been implemented")
	})
	api.ClusterGetClustersClusterIDHandler = cluster.GetClustersClusterIDHandlerFunc(func(params cluster.GetClustersClusterIDParams) middleware.Responder {
		return middleware.NotImplemented("operation cluster.GetClustersClusterID has not yet been implemented")
	})
	api.RepoGetReposHandler = repo.GetReposHandlerFunc(func(params repo.GetReposParams) middleware.Responder {
		return middleware.NotImplemented("operation repo.GetRepos has not yet been implemented")
	})
	api.RepoGetReposRepoIDHandler = repo.GetReposRepoIDHandlerFunc(func(params repo.GetReposRepoIDParams) middleware.Responder {
		return middleware.NotImplemented("operation repo.GetReposRepoID has not yet been implemented")
	})
	api.AppRuntimePostAppruntimesHandler = app_runtime.PostAppruntimesHandlerFunc(func(params app_runtime.PostAppruntimesParams) middleware.Responder {
		return middleware.NotImplemented("operation app_runtime.PostAppruntimes has not yet been implemented")
	})
	api.AppPostAppsHandler = app.PostAppsHandlerFunc(func(params app.PostAppsParams) middleware.Responder {
		return middleware.NotImplemented("operation app.PostApps has not yet been implemented")
	})
	api.ClusterPostClustersHandler = cluster.PostClustersHandlerFunc(func(params cluster.PostClustersParams) middleware.Responder {
		return middleware.NotImplemented("operation cluster.PostClusters has not yet been implemented")
	})
	api.RepoPostReposHandler = repo.PostReposHandlerFunc(func(params repo.PostReposParams) middleware.Responder {
		return middleware.NotImplemented("operation repo.PostRepos has not yet been implemented")
	})

	api.ServerShutdown = func() {}

	return setupGlobalMiddleware(api.Serve(setupMiddlewares))
}

// The TLS configuration before HTTPS server starts.
func configureTLS(tlsConfig *tls.Config) {
	// Make all necessary changes to the TLS configuration here.
}

// As soon as server is initialized but not run yet, this function will be called.
// If you need to modify a config, store server instance to stop it individually later, this is the place.
// This function can be called multiple times, depending on the number of serving schemes.
// scheme value will be set accordingly: "http", "https" or "unix"
func configureServer(s *graceful.Server, scheme, addr string) {
}

// The middleware configuration is for the handler executors. These do not apply to the swagger.json document.
// The middleware executes after routing but before authentication, binding and validation
func setupMiddlewares(handler http.Handler) http.Handler {
	return handler
}

// The middleware configuration happens before anything, this middleware also applies to serving the swagger.json document.
// So this is a good place to plug in a panic handling middleware, logging and metrics
func setupGlobalMiddleware(handler http.Handler) http.Handler {
	return handler
}
