// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Cluster cluster
// swagger:model Cluster

type Cluster struct {

	// cluster Id
	// Required: true
	// Max Length: 11
	// Min Length: 11
	// Pattern: cl-[a-zA-Z0-9]{11}
	ClusterID *string `json:"clusterId"`

	// create time
	// Read Only: true
	CreateTime strfmt.DateTime `json:"createTime,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

/* polymorph Cluster clusterId false */

/* polymorph Cluster createTime false */

/* polymorph Cluster description false */

/* polymorph Cluster name false */

// Validate validates this cluster
func (m *Cluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Cluster) validateClusterID(formats strfmt.Registry) error {

	if err := validate.Required("clusterId", "body", m.ClusterID); err != nil {
		return err
	}

	if err := validate.MinLength("clusterId", "body", string(*m.ClusterID), 11); err != nil {
		return err
	}

	if err := validate.MaxLength("clusterId", "body", string(*m.ClusterID), 11); err != nil {
		return err
	}

	if err := validate.Pattern("clusterId", "body", string(*m.ClusterID), `cl-[a-zA-Z0-9]{11}`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Cluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Cluster) UnmarshalBinary(b []byte) error {
	var res Cluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
