// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AppRuntime app runtime
// swagger:model appRuntime

type AppRuntime struct {

	// app runtime Id
	// Required: true
	// Max Length: 11
	// Min Length: 11
	// Pattern: rt-[a-zA-Z0-9]{11}
	AppRuntimeID *string `json:"appRuntimeId"`

	// create time
	// Read Only: true
	CreateTime strfmt.DateTime `json:"createTime,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

/* polymorph appRuntime appRuntimeId false */

/* polymorph appRuntime createTime false */

/* polymorph appRuntime description false */

/* polymorph appRuntime name false */

/* polymorph appRuntime url false */

// Validate validates this app runtime
func (m *AppRuntime) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppRuntimeID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppRuntime) validateAppRuntimeID(formats strfmt.Registry) error {

	if err := validate.Required("appRuntimeId", "body", m.AppRuntimeID); err != nil {
		return err
	}

	if err := validate.MinLength("appRuntimeId", "body", string(*m.AppRuntimeID), 11); err != nil {
		return err
	}

	if err := validate.MaxLength("appRuntimeId", "body", string(*m.AppRuntimeID), 11); err != nil {
		return err
	}

	if err := validate.Pattern("appRuntimeId", "body", string(*m.AppRuntimeID), `rt-[a-zA-Z0-9]{11}`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AppRuntime) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppRuntime) UnmarshalBinary(b []byte) error {
	var res AppRuntime
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
