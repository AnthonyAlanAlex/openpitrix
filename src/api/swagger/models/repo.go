// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Repo repo
// swagger:model repo

type Repo struct {

	// create time
	// Read Only: true
	CreateTime strfmt.DateTime `json:"createTime,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// repo Id
	// Required: true
	// Max Length: 13
	// Min Length: 13
	// Pattern: repo-[a-zA-Z0-9]{11}
	RepoID *string `json:"repoId"`

	// url
	URL string `json:"url,omitempty"`
}

/* polymorph repo createTime false */

/* polymorph repo description false */

/* polymorph repo name false */

/* polymorph repo repoId false */

/* polymorph repo url false */

// Validate validates this repo
func (m *Repo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRepoID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Repo) validateRepoID(formats strfmt.Registry) error {

	if err := validate.Required("repoId", "body", m.RepoID); err != nil {
		return err
	}

	if err := validate.MinLength("repoId", "body", string(*m.RepoID), 13); err != nil {
		return err
	}

	if err := validate.MaxLength("repoId", "body", string(*m.RepoID), 13); err != nil {
		return err
	}

	if err := validate.Pattern("repoId", "body", string(*m.RepoID), `repo-[a-zA-Z0-9]{11}`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Repo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Repo) UnmarshalBinary(b []byte) error {
	var res Repo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
