// Code generated by go-swagger; DO NOT EDIT.

package clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostV1ClustersHandlerFunc turns a function with the right signature into a post v1 clusters handler
type PostV1ClustersHandlerFunc func(PostV1ClustersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostV1ClustersHandlerFunc) Handle(params PostV1ClustersParams) middleware.Responder {
	return fn(params)
}

// PostV1ClustersHandler interface for that can handle valid post v1 clusters params
type PostV1ClustersHandler interface {
	Handle(PostV1ClustersParams) middleware.Responder
}

// NewPostV1Clusters creates a new http.Handler for the post v1 clusters operation
func NewPostV1Clusters(ctx *middleware.Context, handler PostV1ClustersHandler) *PostV1Clusters {
	return &PostV1Clusters{Context: ctx, Handler: handler}
}

/*PostV1Clusters swagger:route POST /v1/clusters clusters postV1Clusters

Creates a cluster

Adds a new cluster to the clusters list.

*/
type PostV1Clusters struct {
	Context *middleware.Context
	Handler PostV1ClustersHandler
}

func (o *PostV1Clusters) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostV1ClustersParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
