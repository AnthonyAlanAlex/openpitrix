// Code generated by go-swagger; DO NOT EDIT.

package apps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetV1AppsAppIDHandlerFunc turns a function with the right signature into a get v1 apps app ID handler
type GetV1AppsAppIDHandlerFunc func(GetV1AppsAppIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetV1AppsAppIDHandlerFunc) Handle(params GetV1AppsAppIDParams) middleware.Responder {
	return fn(params)
}

// GetV1AppsAppIDHandler interface for that can handle valid get v1 apps app ID params
type GetV1AppsAppIDHandler interface {
	Handle(GetV1AppsAppIDParams) middleware.Responder
}

// NewGetV1AppsAppID creates a new http.Handler for the get v1 apps app ID operation
func NewGetV1AppsAppID(ctx *middleware.Context, handler GetV1AppsAppIDHandler) *GetV1AppsAppID {
	return &GetV1AppsAppID{Context: ctx, Handler: handler}
}

/*GetV1AppsAppID swagger:route GET /v1/apps/{appId} apps getV1AppsAppId

Gets an app

Returns a single app by its id

*/
type GetV1AppsAppID struct {
	Context *middleware.Context
	Handler GetV1AppsAppIDHandler
}

func (o *GetV1AppsAppID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetV1AppsAppIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
