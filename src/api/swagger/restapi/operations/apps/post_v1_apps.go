// Code generated by go-swagger; DO NOT EDIT.

package apps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostV1AppsHandlerFunc turns a function with the right signature into a post v1 apps handler
type PostV1AppsHandlerFunc func(PostV1AppsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostV1AppsHandlerFunc) Handle(params PostV1AppsParams) middleware.Responder {
	return fn(params)
}

// PostV1AppsHandler interface for that can handle valid post v1 apps params
type PostV1AppsHandler interface {
	Handle(PostV1AppsParams) middleware.Responder
}

// NewPostV1Apps creates a new http.Handler for the post v1 apps operation
func NewPostV1Apps(ctx *middleware.Context, handler PostV1AppsHandler) *PostV1Apps {
	return &PostV1Apps{Context: ctx, Handler: handler}
}

/*PostV1Apps swagger:route POST /v1/apps apps postV1Apps

Creates an app

Adds a new app to the app runtimes list.

*/
type PostV1Apps struct {
	Context *middleware.Context
	Handler PostV1AppsHandler
}

func (o *PostV1Apps) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostV1AppsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
