// Code generated by go-swagger; DO NOT EDIT.

package app_runtimes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetV1AppruntimesAppRuntimeIDHandlerFunc turns a function with the right signature into a get v1 appruntimes app runtime ID handler
type GetV1AppruntimesAppRuntimeIDHandlerFunc func(GetV1AppruntimesAppRuntimeIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetV1AppruntimesAppRuntimeIDHandlerFunc) Handle(params GetV1AppruntimesAppRuntimeIDParams) middleware.Responder {
	return fn(params)
}

// GetV1AppruntimesAppRuntimeIDHandler interface for that can handle valid get v1 appruntimes app runtime ID params
type GetV1AppruntimesAppRuntimeIDHandler interface {
	Handle(GetV1AppruntimesAppRuntimeIDParams) middleware.Responder
}

// NewGetV1AppruntimesAppRuntimeID creates a new http.Handler for the get v1 appruntimes app runtime ID operation
func NewGetV1AppruntimesAppRuntimeID(ctx *middleware.Context, handler GetV1AppruntimesAppRuntimeIDHandler) *GetV1AppruntimesAppRuntimeID {
	return &GetV1AppruntimesAppRuntimeID{Context: ctx, Handler: handler}
}

/*GetV1AppruntimesAppRuntimeID swagger:route GET /v1/appruntimes/{appRuntimeId} app-runtimes getV1AppruntimesAppRuntimeId

Gets an app runtime

Returns a single runtime by its id

*/
type GetV1AppruntimesAppRuntimeID struct {
	Context *middleware.Context
	Handler GetV1AppruntimesAppRuntimeIDHandler
}

func (o *GetV1AppruntimesAppRuntimeID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetV1AppruntimesAppRuntimeIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
