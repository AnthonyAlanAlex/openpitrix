// Code generated by go-swagger; DO NOT EDIT.

package repos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteV1ReposRepoIDHandlerFunc turns a function with the right signature into a delete v1 repos repo ID handler
type DeleteV1ReposRepoIDHandlerFunc func(DeleteV1ReposRepoIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteV1ReposRepoIDHandlerFunc) Handle(params DeleteV1ReposRepoIDParams) middleware.Responder {
	return fn(params)
}

// DeleteV1ReposRepoIDHandler interface for that can handle valid delete v1 repos repo ID params
type DeleteV1ReposRepoIDHandler interface {
	Handle(DeleteV1ReposRepoIDParams) middleware.Responder
}

// NewDeleteV1ReposRepoID creates a new http.Handler for the delete v1 repos repo ID operation
func NewDeleteV1ReposRepoID(ctx *middleware.Context, handler DeleteV1ReposRepoIDHandler) *DeleteV1ReposRepoID {
	return &DeleteV1ReposRepoID{Context: ctx, Handler: handler}
}

/*DeleteV1ReposRepoID swagger:route DELETE /v1/repos/{repoId} repos deleteV1ReposRepoId

Deletes a repo

Delete a single repo identified via its id

*/
type DeleteV1ReposRepoID struct {
	Context *middleware.Context
	Handler DeleteV1ReposRepoIDHandler
}

func (o *DeleteV1ReposRepoID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteV1ReposRepoIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
