// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	"github.com/go-openapi/runtime/yamlpc"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"AppHub/src/api/swagger/restapi/operations/app_runtimes"
	"AppHub/src/api/swagger/restapi/operations/apps"
	"AppHub/src/api/swagger/restapi/operations/clusters"
	"AppHub/src/api/swagger/restapi/operations/repos"
)

// NewAppHubAPI creates a new AppHub instance
func NewAppHubAPI(spec *loads.Document) *AppHubAPI {
	return &AppHubAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		YamlConsumer:        yamlpc.YAMLConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		YamlProducer:        yamlpc.YAMLProducer(),
		AppRuntimesDeleteV1AppruntimesAppRuntimeIDHandler: app_runtimes.DeleteV1AppruntimesAppRuntimeIDHandlerFunc(func(params app_runtimes.DeleteV1AppruntimesAppRuntimeIDParams) middleware.Responder {
			return middleware.NotImplemented("operation AppRuntimesDeleteV1AppruntimesAppRuntimeID has not yet been implemented")
		}),
		AppsDeleteV1AppsAppIDHandler: apps.DeleteV1AppsAppIDHandlerFunc(func(params apps.DeleteV1AppsAppIDParams) middleware.Responder {
			return middleware.NotImplemented("operation AppsDeleteV1AppsAppID has not yet been implemented")
		}),
		ClustersDeleteV1ClustersClusterIDHandler: clusters.DeleteV1ClustersClusterIDHandlerFunc(func(params clusters.DeleteV1ClustersClusterIDParams) middleware.Responder {
			return middleware.NotImplemented("operation ClustersDeleteV1ClustersClusterID has not yet been implemented")
		}),
		ReposDeleteV1ReposRepoIDHandler: repos.DeleteV1ReposRepoIDHandlerFunc(func(params repos.DeleteV1ReposRepoIDParams) middleware.Responder {
			return middleware.NotImplemented("operation ReposDeleteV1ReposRepoID has not yet been implemented")
		}),
		AppRuntimesGetV1AppruntimesHandler: app_runtimes.GetV1AppruntimesHandlerFunc(func(params app_runtimes.GetV1AppruntimesParams) middleware.Responder {
			return middleware.NotImplemented("operation AppRuntimesGetV1Appruntimes has not yet been implemented")
		}),
		AppRuntimesGetV1AppruntimesAppRuntimeIDHandler: app_runtimes.GetV1AppruntimesAppRuntimeIDHandlerFunc(func(params app_runtimes.GetV1AppruntimesAppRuntimeIDParams) middleware.Responder {
			return middleware.NotImplemented("operation AppRuntimesGetV1AppruntimesAppRuntimeID has not yet been implemented")
		}),
		AppsGetV1AppsHandler: apps.GetV1AppsHandlerFunc(func(params apps.GetV1AppsParams) middleware.Responder {
			return middleware.NotImplemented("operation AppsGetV1Apps has not yet been implemented")
		}),
		AppsGetV1AppsAppIDHandler: apps.GetV1AppsAppIDHandlerFunc(func(params apps.GetV1AppsAppIDParams) middleware.Responder {
			return middleware.NotImplemented("operation AppsGetV1AppsAppID has not yet been implemented")
		}),
		ClustersGetV1ClustersHandler: clusters.GetV1ClustersHandlerFunc(func(params clusters.GetV1ClustersParams) middleware.Responder {
			return middleware.NotImplemented("operation ClustersGetV1Clusters has not yet been implemented")
		}),
		ClustersGetV1ClustersClusterIDHandler: clusters.GetV1ClustersClusterIDHandlerFunc(func(params clusters.GetV1ClustersClusterIDParams) middleware.Responder {
			return middleware.NotImplemented("operation ClustersGetV1ClustersClusterID has not yet been implemented")
		}),
		ReposGetV1ReposHandler: repos.GetV1ReposHandlerFunc(func(params repos.GetV1ReposParams) middleware.Responder {
			return middleware.NotImplemented("operation ReposGetV1Repos has not yet been implemented")
		}),
		ReposGetV1ReposRepoIDHandler: repos.GetV1ReposRepoIDHandlerFunc(func(params repos.GetV1ReposRepoIDParams) middleware.Responder {
			return middleware.NotImplemented("operation ReposGetV1ReposRepoID has not yet been implemented")
		}),
		AppRuntimesPostV1AppruntimesHandler: app_runtimes.PostV1AppruntimesHandlerFunc(func(params app_runtimes.PostV1AppruntimesParams) middleware.Responder {
			return middleware.NotImplemented("operation AppRuntimesPostV1Appruntimes has not yet been implemented")
		}),
		AppsPostV1AppsHandler: apps.PostV1AppsHandlerFunc(func(params apps.PostV1AppsParams) middleware.Responder {
			return middleware.NotImplemented("operation AppsPostV1Apps has not yet been implemented")
		}),
		ClustersPostV1ClustersHandler: clusters.PostV1ClustersHandlerFunc(func(params clusters.PostV1ClustersParams) middleware.Responder {
			return middleware.NotImplemented("operation ClustersPostV1Clusters has not yet been implemented")
		}),
		ReposPostV1ReposHandler: repos.PostV1ReposHandlerFunc(func(params repos.PostV1ReposParams) middleware.Responder {
			return middleware.NotImplemented("operation ReposPostV1Repos has not yet been implemented")
		}),
	}
}

/*AppHubAPI An open platform to package and deploy applications into multiple environment such as QingCloud, AWS, Kubernetes etc. */
type AppHubAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer
	// YamlConsumer registers a consumer for a "application/yaml" mime type
	YamlConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer
	// YamlProducer registers a producer for a "application/yaml" mime type
	YamlProducer runtime.Producer

	// AppRuntimesDeleteV1AppruntimesAppRuntimeIDHandler sets the operation handler for the delete v1 appruntimes app runtime ID operation
	AppRuntimesDeleteV1AppruntimesAppRuntimeIDHandler app_runtimes.DeleteV1AppruntimesAppRuntimeIDHandler
	// AppsDeleteV1AppsAppIDHandler sets the operation handler for the delete v1 apps app ID operation
	AppsDeleteV1AppsAppIDHandler apps.DeleteV1AppsAppIDHandler
	// ClustersDeleteV1ClustersClusterIDHandler sets the operation handler for the delete v1 clusters cluster ID operation
	ClustersDeleteV1ClustersClusterIDHandler clusters.DeleteV1ClustersClusterIDHandler
	// ReposDeleteV1ReposRepoIDHandler sets the operation handler for the delete v1 repos repo ID operation
	ReposDeleteV1ReposRepoIDHandler repos.DeleteV1ReposRepoIDHandler
	// AppRuntimesGetV1AppruntimesHandler sets the operation handler for the get v1 appruntimes operation
	AppRuntimesGetV1AppruntimesHandler app_runtimes.GetV1AppruntimesHandler
	// AppRuntimesGetV1AppruntimesAppRuntimeIDHandler sets the operation handler for the get v1 appruntimes app runtime ID operation
	AppRuntimesGetV1AppruntimesAppRuntimeIDHandler app_runtimes.GetV1AppruntimesAppRuntimeIDHandler
	// AppsGetV1AppsHandler sets the operation handler for the get v1 apps operation
	AppsGetV1AppsHandler apps.GetV1AppsHandler
	// AppsGetV1AppsAppIDHandler sets the operation handler for the get v1 apps app ID operation
	AppsGetV1AppsAppIDHandler apps.GetV1AppsAppIDHandler
	// ClustersGetV1ClustersHandler sets the operation handler for the get v1 clusters operation
	ClustersGetV1ClustersHandler clusters.GetV1ClustersHandler
	// ClustersGetV1ClustersClusterIDHandler sets the operation handler for the get v1 clusters cluster ID operation
	ClustersGetV1ClustersClusterIDHandler clusters.GetV1ClustersClusterIDHandler
	// ReposGetV1ReposHandler sets the operation handler for the get v1 repos operation
	ReposGetV1ReposHandler repos.GetV1ReposHandler
	// ReposGetV1ReposRepoIDHandler sets the operation handler for the get v1 repos repo ID operation
	ReposGetV1ReposRepoIDHandler repos.GetV1ReposRepoIDHandler
	// AppRuntimesPostV1AppruntimesHandler sets the operation handler for the post v1 appruntimes operation
	AppRuntimesPostV1AppruntimesHandler app_runtimes.PostV1AppruntimesHandler
	// AppsPostV1AppsHandler sets the operation handler for the post v1 apps operation
	AppsPostV1AppsHandler apps.PostV1AppsHandler
	// ClustersPostV1ClustersHandler sets the operation handler for the post v1 clusters operation
	ClustersPostV1ClustersHandler clusters.PostV1ClustersHandler
	// ReposPostV1ReposHandler sets the operation handler for the post v1 repos operation
	ReposPostV1ReposHandler repos.PostV1ReposHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *AppHubAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *AppHubAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *AppHubAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *AppHubAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *AppHubAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *AppHubAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *AppHubAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the AppHubAPI
func (o *AppHubAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.YamlConsumer == nil {
		unregistered = append(unregistered, "YamlConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.YamlProducer == nil {
		unregistered = append(unregistered, "YamlProducer")
	}

	if o.AppRuntimesDeleteV1AppruntimesAppRuntimeIDHandler == nil {
		unregistered = append(unregistered, "app_runtimes.DeleteV1AppruntimesAppRuntimeIDHandler")
	}

	if o.AppsDeleteV1AppsAppIDHandler == nil {
		unregistered = append(unregistered, "apps.DeleteV1AppsAppIDHandler")
	}

	if o.ClustersDeleteV1ClustersClusterIDHandler == nil {
		unregistered = append(unregistered, "clusters.DeleteV1ClustersClusterIDHandler")
	}

	if o.ReposDeleteV1ReposRepoIDHandler == nil {
		unregistered = append(unregistered, "repos.DeleteV1ReposRepoIDHandler")
	}

	if o.AppRuntimesGetV1AppruntimesHandler == nil {
		unregistered = append(unregistered, "app_runtimes.GetV1AppruntimesHandler")
	}

	if o.AppRuntimesGetV1AppruntimesAppRuntimeIDHandler == nil {
		unregistered = append(unregistered, "app_runtimes.GetV1AppruntimesAppRuntimeIDHandler")
	}

	if o.AppsGetV1AppsHandler == nil {
		unregistered = append(unregistered, "apps.GetV1AppsHandler")
	}

	if o.AppsGetV1AppsAppIDHandler == nil {
		unregistered = append(unregistered, "apps.GetV1AppsAppIDHandler")
	}

	if o.ClustersGetV1ClustersHandler == nil {
		unregistered = append(unregistered, "clusters.GetV1ClustersHandler")
	}

	if o.ClustersGetV1ClustersClusterIDHandler == nil {
		unregistered = append(unregistered, "clusters.GetV1ClustersClusterIDHandler")
	}

	if o.ReposGetV1ReposHandler == nil {
		unregistered = append(unregistered, "repos.GetV1ReposHandler")
	}

	if o.ReposGetV1ReposRepoIDHandler == nil {
		unregistered = append(unregistered, "repos.GetV1ReposRepoIDHandler")
	}

	if o.AppRuntimesPostV1AppruntimesHandler == nil {
		unregistered = append(unregistered, "app_runtimes.PostV1AppruntimesHandler")
	}

	if o.AppsPostV1AppsHandler == nil {
		unregistered = append(unregistered, "apps.PostV1AppsHandler")
	}

	if o.ClustersPostV1ClustersHandler == nil {
		unregistered = append(unregistered, "clusters.PostV1ClustersHandler")
	}

	if o.ReposPostV1ReposHandler == nil {
		unregistered = append(unregistered, "repos.PostV1ReposHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *AppHubAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *AppHubAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// Authorizer returns the registered authorizer
func (o *AppHubAPI) Authorizer() runtime.Authorizer {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *AppHubAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		case "application/yaml":
			result["application/yaml"] = o.YamlConsumer

		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *AppHubAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		case "application/yaml":
			result["application/yaml"] = o.YamlProducer

		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *AppHubAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the app hub API
func (o *AppHubAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *AppHubAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v1/appruntimes/{appRuntimeId}"] = app_runtimes.NewDeleteV1AppruntimesAppRuntimeID(o.context, o.AppRuntimesDeleteV1AppruntimesAppRuntimeIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v1/apps/{appId}"] = apps.NewDeleteV1AppsAppID(o.context, o.AppsDeleteV1AppsAppIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v1/clusters/{clusterId}"] = clusters.NewDeleteV1ClustersClusterID(o.context, o.ClustersDeleteV1ClustersClusterIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v1/repos/{repoId}"] = repos.NewDeleteV1ReposRepoID(o.context, o.ReposDeleteV1ReposRepoIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/appruntimes"] = app_runtimes.NewGetV1Appruntimes(o.context, o.AppRuntimesGetV1AppruntimesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/appruntimes/{appRuntimeId}"] = app_runtimes.NewGetV1AppruntimesAppRuntimeID(o.context, o.AppRuntimesGetV1AppruntimesAppRuntimeIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/apps"] = apps.NewGetV1Apps(o.context, o.AppsGetV1AppsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/apps/{appId}"] = apps.NewGetV1AppsAppID(o.context, o.AppsGetV1AppsAppIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/clusters"] = clusters.NewGetV1Clusters(o.context, o.ClustersGetV1ClustersHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/clusters/{clusterId}"] = clusters.NewGetV1ClustersClusterID(o.context, o.ClustersGetV1ClustersClusterIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/repos"] = repos.NewGetV1Repos(o.context, o.ReposGetV1ReposHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/repos/{repoId}"] = repos.NewGetV1ReposRepoID(o.context, o.ReposGetV1ReposRepoIDHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/appruntimes"] = app_runtimes.NewPostV1Appruntimes(o.context, o.AppRuntimesPostV1AppruntimesHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/apps"] = apps.NewPostV1Apps(o.context, o.AppsPostV1AppsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/clusters"] = clusters.NewPostV1Clusters(o.context, o.ClustersPostV1ClustersHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/repos"] = repos.NewPostV1Repos(o.context, o.ReposPostV1ReposHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *AppHubAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middelware as you see fit
func (o *AppHubAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}
