// Code generated by go-swagger; DO NOT EDIT.

package restapi

import (
	"crypto/tls"
	"net/http"

	errors "github.com/go-openapi/errors"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/yamlpc"
	graceful "github.com/tylerb/graceful"

	"AppHub/src/api/swagger/restapi/operations"
	"AppHub/src/api/swagger/restapi/operations/app_runtimes"
	"AppHub/src/api/swagger/restapi/operations/apps"
	"AppHub/src/api/swagger/restapi/operations/clusters"
	"AppHub/src/api/swagger/restapi/operations/repos"

        hrepos "AppHub/src/api/handlers/repos"
)

// This file is safe to edit. Once it exists it will not be overwritten

//go:generate swagger generate server --target ../../swagger --name  --spec ../swagger.yaml

func configureFlags(api *operations.AppHubAPI) {
	// api.CommandLineOptionsGroups = []swag.CommandLineOptionsGroup{ ... }
}

func configureAPI(api *operations.AppHubAPI) http.Handler {
	// configure the api here
	api.ServeError = errors.ServeError

	// Set your custom logger if needed. Default one is log.Printf
	// Expected interface func(string, ...interface{})
	//
	// Example:
	// api.Logger = log.Printf

	api.JSONConsumer = runtime.JSONConsumer()

	api.YamlConsumer = yamlpc.YAMLConsumer()

	api.JSONProducer = runtime.JSONProducer()

	api.YamlProducer = yamlpc.YAMLProducer()

	api.AppRuntimesDeleteV1AppruntimesAppRuntimeIDHandler = app_runtimes.DeleteV1AppruntimesAppRuntimeIDHandlerFunc(func(params app_runtimes.DeleteV1AppruntimesAppRuntimeIDParams) middleware.Responder {
		return middleware.NotImplemented("operation app_runtimes.DeleteV1AppruntimesAppRuntimeID has not yet been implemented")
	})
	api.AppsDeleteV1AppsAppIDHandler = apps.DeleteV1AppsAppIDHandlerFunc(func(params apps.DeleteV1AppsAppIDParams) middleware.Responder {
		return middleware.NotImplemented("operation apps.DeleteV1AppsAppID has not yet been implemented")
	})
	api.ClustersDeleteV1ClustersClusterIDHandler = clusters.DeleteV1ClustersClusterIDHandlerFunc(func(params clusters.DeleteV1ClustersClusterIDParams) middleware.Responder {
		return middleware.NotImplemented("operation clusters.DeleteV1ClustersClusterID has not yet been implemented")
	})
	api.ReposDeleteV1ReposRepoIDHandler = repos.DeleteV1ReposRepoIDHandlerFunc(func(params repos.DeleteV1ReposRepoIDParams) middleware.Responder {
		return middleware.NotImplemented("operation repos.DeleteV1ReposRepoID has not yet been implemented")
	})
	api.AppRuntimesGetV1AppruntimesHandler = app_runtimes.GetV1AppruntimesHandlerFunc(func(params app_runtimes.GetV1AppruntimesParams) middleware.Responder {
		return middleware.NotImplemented("operation app_runtimes.GetV1Appruntimes has not yet been implemented")
	})
	api.AppRuntimesGetV1AppruntimesAppRuntimeIDHandler = app_runtimes.GetV1AppruntimesAppRuntimeIDHandlerFunc(func(params app_runtimes.GetV1AppruntimesAppRuntimeIDParams) middleware.Responder {
		return middleware.NotImplemented("operation app_runtimes.GetV1AppruntimesAppRuntimeID has not yet been implemented")
	})
	api.AppsGetV1AppsHandler = apps.GetV1AppsHandlerFunc(func(params apps.GetV1AppsParams) middleware.Responder {
		return middleware.NotImplemented("operation apps.GetV1Apps has not yet been implemented")
	})
	api.AppsGetV1AppsAppIDHandler = apps.GetV1AppsAppIDHandlerFunc(func(params apps.GetV1AppsAppIDParams) middleware.Responder {
		return middleware.NotImplemented("operation apps.GetV1AppsAppID has not yet been implemented")
	})
	api.ClustersGetV1ClustersHandler = clusters.GetV1ClustersHandlerFunc(func(params clusters.GetV1ClustersParams) middleware.Responder {
		return middleware.NotImplemented("operation clusters.GetV1Clusters has not yet been implemented")
	})
	api.ClustersGetV1ClustersClusterIDHandler = clusters.GetV1ClustersClusterIDHandlerFunc(func(params clusters.GetV1ClustersClusterIDParams) middleware.Responder {
		return middleware.NotImplemented("operation clusters.GetV1ClustersClusterID has not yet been implemented")
	})
	api.ReposGetV1ReposHandler = repos.GetV1ReposHandlerFunc(func(params repos.GetV1ReposParams) middleware.Responder {
		return hrepos.GetRepos(params)
	})
	api.ReposGetV1ReposRepoIDHandler = repos.GetV1ReposRepoIDHandlerFunc(func(params repos.GetV1ReposRepoIDParams) middleware.Responder {
		return middleware.NotImplemented("operation repos.GetV1ReposRepoID has not yet been implemented")
	})
	api.AppRuntimesPostV1AppruntimesHandler = app_runtimes.PostV1AppruntimesHandlerFunc(func(params app_runtimes.PostV1AppruntimesParams) middleware.Responder {
		return middleware.NotImplemented("operation app_runtimes.PostV1Appruntimes has not yet been implemented")
	})
	api.AppsPostV1AppsHandler = apps.PostV1AppsHandlerFunc(func(params apps.PostV1AppsParams) middleware.Responder {
		return middleware.NotImplemented("operation apps.PostV1Apps has not yet been implemented")
	})
	api.ClustersPostV1ClustersHandler = clusters.PostV1ClustersHandlerFunc(func(params clusters.PostV1ClustersParams) middleware.Responder {
		return middleware.NotImplemented("operation clusters.PostV1Clusters has not yet been implemented")
	})
	api.ReposPostV1ReposHandler = repos.PostV1ReposHandlerFunc(func(params repos.PostV1ReposParams) middleware.Responder {
		return middleware.NotImplemented("operation repos.PostV1Repos has not yet been implemented")
	})

	api.ServerShutdown = func() {}

	return setupGlobalMiddleware(api.Serve(setupMiddlewares))
}

// The TLS configuration before HTTPS server starts.
func configureTLS(tlsConfig *tls.Config) {
	// Make all necessary changes to the TLS configuration here.
}

// As soon as server is initialized but not run yet, this function will be called.
// If you need to modify a config, store server instance to stop it individually later, this is the place.
// This function can be called multiple times, depending on the number of serving schemes.
// scheme value will be set accordingly: "http", "https" or "unix"
func configureServer(s *graceful.Server, scheme, addr string) {
}

// The middleware configuration is for the handler executors. These do not apply to the swagger.json document.
// The middleware executes after routing but before authentication, binding and validation
func setupMiddlewares(handler http.Handler) http.Handler {
	return handler
}

// The middleware configuration happens before anything, this middleware also applies to serving the swagger.json document.
// So this is a good place to plug in a panic handling middleware, logging and metrics
func setupGlobalMiddleware(handler http.Handler) http.Handler {
	return handler
}
