// Code generated by go-swagger; DO NOT EDIT.

package restapi

import (
	"crypto/tls"
	"net/http"

	errors "github.com/go-openapi/errors"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/yamlpc"
	graceful "github.com/tylerb/graceful"

	"AppHub/src/api/swagger/restapi/operations"
	"AppHub/src/api/swagger/restapi/operations/app_runtimes"
	"AppHub/src/api/swagger/restapi/operations/apps"
	"AppHub/src/api/swagger/restapi/operations/clusters"
	"AppHub/src/api/swagger/restapi/operations/repos"

        hrepos "AppHub/src/api/handlers/repos"
)

// This file is safe to edit. Once it exists it will not be overwritten

//go:generate swagger generate server --target ../swagger --name  --spec ../swagger-spec/swagger.yaml

func configureFlags(api *operations.AppHubAPI) {
	// api.CommandLineOptionsGroups = []swag.CommandLineOptionsGroup{ ... }
}

func configureAPI(api *operations.AppHubAPI) http.Handler {
	// configure the api here
	api.ServeError = errors.ServeError

	// Set your custom logger if needed. Default one is log.Printf
	// Expected interface func(string, ...interface{})
	//
	// Example:
	// api.Logger = log.Printf

	api.JSONConsumer = runtime.JSONConsumer()

	api.YamlConsumer = yamlpc.YAMLConsumer()

	api.JSONProducer = runtime.JSONProducer()

	api.YamlProducer = yamlpc.YAMLProducer()

	api.AppRuntimesDeleteAppruntimesAppRuntimeIDHandler = app_runtimes.DeleteAppruntimesAppRuntimeIDHandlerFunc(func(params app_runtimes.DeleteAppruntimesAppRuntimeIDParams) middleware.Responder {
		return middleware.NotImplemented("operation app_runtimes.DeleteAppruntimesAppRuntimeID has not yet been implemented")
	})
	api.AppsDeleteAppsAppIDHandler = apps.DeleteAppsAppIDHandlerFunc(func(params apps.DeleteAppsAppIDParams) middleware.Responder {
		return middleware.NotImplemented("operation apps.DeleteAppsAppID has not yet been implemented")
	})
	api.ClustersDeleteClustersClusterIDHandler = clusters.DeleteClustersClusterIDHandlerFunc(func(params clusters.DeleteClustersClusterIDParams) middleware.Responder {
		return middleware.NotImplemented("operation clusters.DeleteClustersClusterID has not yet been implemented")
	})
	api.ReposDeleteReposRepoIDHandler = repos.DeleteReposRepoIDHandlerFunc(func(params repos.DeleteReposRepoIDParams) middleware.Responder {
		return middleware.NotImplemented("operation repos.DeleteReposRepoID has not yet been implemented")
	})
	api.AppRuntimesGetAppruntimesHandler = app_runtimes.GetAppruntimesHandlerFunc(func(params app_runtimes.GetAppruntimesParams) middleware.Responder {
		return middleware.NotImplemented("operation app_runtimes.GetAppruntimes has not yet been implemented")
	})
	api.AppRuntimesGetAppruntimesAppRuntimeIDHandler = app_runtimes.GetAppruntimesAppRuntimeIDHandlerFunc(func(params app_runtimes.GetAppruntimesAppRuntimeIDParams) middleware.Responder {
		return middleware.NotImplemented("operation app_runtimes.GetAppruntimesAppRuntimeID has not yet been implemented")
	})
	api.AppsGetAppsHandler = apps.GetAppsHandlerFunc(func(params apps.GetAppsParams) middleware.Responder {
		return middleware.NotImplemented("operation apps.GetApps has not yet been implemented")
	})
	api.AppsGetAppsAppIDHandler = apps.GetAppsAppIDHandlerFunc(func(params apps.GetAppsAppIDParams) middleware.Responder {
		return middleware.NotImplemented("operation apps.GetAppsAppID has not yet been implemented")
	})
	api.ClustersGetClustersHandler = clusters.GetClustersHandlerFunc(func(params clusters.GetClustersParams) middleware.Responder {
		return middleware.NotImplemented("operation clusters.GetClusters has not yet been implemented")
	})
	api.ClustersGetClustersClusterIDHandler = clusters.GetClustersClusterIDHandlerFunc(func(params clusters.GetClustersClusterIDParams) middleware.Responder {
		return middleware.NotImplemented("operation clusters.GetClustersClusterID has not yet been implemented")
	})
	api.ReposGetReposHandler = repos.GetReposHandlerFunc(func(params repos.GetReposParams) middleware.Responder {
		return hrepos.GetRepos(params)
	})
	api.ReposGetReposRepoIDHandler = repos.GetReposRepoIDHandlerFunc(func(params repos.GetReposRepoIDParams) middleware.Responder {
		return middleware.NotImplemented("operation repos.GetReposRepoID has not yet been implemented")
	})
	api.AppRuntimesPostAppruntimesHandler = app_runtimes.PostAppruntimesHandlerFunc(func(params app_runtimes.PostAppruntimesParams) middleware.Responder {
		return middleware.NotImplemented("operation app_runtimes.PostAppruntimes has not yet been implemented")
	})
	api.AppsPostAppsHandler = apps.PostAppsHandlerFunc(func(params apps.PostAppsParams) middleware.Responder {
		return middleware.NotImplemented("operation apps.PostApps has not yet been implemented")
	})
	api.ClustersPostClustersHandler = clusters.PostClustersHandlerFunc(func(params clusters.PostClustersParams) middleware.Responder {
		return middleware.NotImplemented("operation clusters.PostClusters has not yet been implemented")
	})
	api.ReposPostReposHandler = repos.PostReposHandlerFunc(func(params repos.PostReposParams) middleware.Responder {
		return middleware.NotImplemented("operation repos.PostRepos has not yet been implemented")
	})

	api.ServerShutdown = func() {}

	return setupGlobalMiddleware(api.Serve(setupMiddlewares))
}

// The TLS configuration before HTTPS server starts.
func configureTLS(tlsConfig *tls.Config) {
	// Make all necessary changes to the TLS configuration here.
}

// As soon as server is initialized but not run yet, this function will be called.
// If you need to modify a config, store server instance to stop it individually later, this is the place.
// This function can be called multiple times, depending on the number of serving schemes.
// scheme value will be set accordingly: "http", "https" or "unix"
func configureServer(s *graceful.Server, scheme, addr string) {
}

// The middleware configuration is for the handler executors. These do not apply to the swagger.json document.
// The middleware executes after routing but before authentication, binding and validation
func setupMiddlewares(handler http.Handler) http.Handler {
	return handler
}

// The middleware configuration happens before anything, this middleware also applies to serving the swagger.json document.
// So this is a good place to plug in a panic handling middleware, logging and metrics
func setupGlobalMiddleware(handler http.Handler) http.Handler {
	return handler
}
